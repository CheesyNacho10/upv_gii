<html>
<head>
<meta charset="UTF-8"/>
<script>
function ejecutar_ensamblador()
{


// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 31184, "QJFRAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAiBAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYeQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAEAAAAQhQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAQAAAAEAAAAEAAAAgAAAAJAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAQAAADiFAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8IwAAQSMAAEQjAABHIwAASiMAAE0jAABQIwAAUyMAAFYjAABZIwAAXCMAAF8jAABiIwAAZSMAAGgjAABrIwAAbiMAAHEjAAB0IwAAdyMAAHojAAB9IwAAgCMAAIMjAACGIwAAiSMAAIwjAACPIwAAkiMAAJUjAACYIwAAmyMAAAEAAAAFAAAABQAAAAEAAAAFAAAAFAAAABQAAAAeAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAABAAAAAcAAAAEAAAAAgAAAAAAAAAAAAAAAAAAABh3AAAAAAAAAAAAAD8AAAAddwAAAAAAAAAAAABuAAAALHcAAAAAAABQfQAAAAAAADR3AAAAAAAAAAAAAGoAAAA/dwAAAAAAANwvAQAAAAAATHcAAAAAAAA4fQAAAAAAAFd3AAAAAAAAPH0AAAAAAABidwAAAAAAAEB9AAAAAAAAbHcAAAAAAABEfQAAAAAAAHZ3AAAAAAAASH0AAAAAAACCdwAAAAAAAEx9AAAAAAAAjHcAAAEAAAAAAAAAcwAAAJN3AAABAAAAAAAAAGQAAACadwAAAQAAAAAAAABjAAAAo3cAAAEAAAAAAAAAYQAAAKl3AAABAAAAAAAAAG0AAACvdwAAAQAAAAAAAABsAAAAtHcAAAEAAAAAAAAAawAAALp3AAABAAAAAAAAAGYAAAAAAAAAAAAAAAAAAAAAAAAA");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.emscripten_resize_heap;
 var fimport$1 = env.emscripten_memcpy_big;
 var fimport$2 = env.__sys_open;
 var fimport$3 = env.__sys_fcntl64;
 var fimport$4 = env.__sys_ioctl;
 var fimport$5 = env.fd_fdstat_get;
 var fimport$6 = env.fd_write;
 var fimport$7 = env.fd_read;
 var fimport$8 = env.fd_close;
 var fimport$9 = env.exit;
 var fimport$10 = env.abort;
 var fimport$11 = env.__sys_stat64;
 var fimport$12 = env.setTempRet0;
 var fimport$13 = env.fd_seek;
 var global$0 = 5345600;
 var global$1 = 0;
 var global$2 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $71();
 }
 
 function $1() {
  return 32432 | 0;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = HEAP32[(0 + 31184 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$0($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 31184 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function $3($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $4($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$1($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $9_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $83_1 = 0, $96_1 = 0, $107_1 = 0, $115_1 = 0, $123_1 = 0, $217_1 = 0, $228_1 = 0, $236_1 = 0, $244_1 = 0, $279_1 = 0, $354_1 = 0, $361 = 0, $368 = 0, $459 = 0, $470 = 0, $478 = 0, $486 = 0, $1194 = 0, $1201 = 0, $1208 = 0, $1330 = 0, $1332 = 0, $1393 = 0, $1400 = 0, $1407 = 0, $1640 = 0, $1647 = 0, $1654 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 32436 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $5_1 = $3_1 << 3 | 0;
                $4_1 = HEAP32[($5_1 + 32484 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 32476 | 0;
                  if (($6_1 | 0) != ($5_1 | 0)) {
                   break label$16
                  }
                  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32436 | 0) >> 2] = wasm2js_i32$1;
                  break label$15;
                 }
                 HEAP32[(0 + 32452 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
                }
                $6_1 = $3_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                $4_1 = $4_1 + $6_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 32444 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $83_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $83_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $96_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $96_1 >>> $0_1 | 0;
                  $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $107_1 = $6_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $6_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $115_1 = $107_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $123_1 = $115_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $6_1 = ($123_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $5_1 = $6_1 << 3 | 0;
                  $4_1 = HEAP32[($5_1 + 32484 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 32476 | 0;
                  if (($0_1 | 0) != ($5_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                  HEAP32[(0 + 32436 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[(0 + 32452 | 0) >> 2] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $5_1 = $4_1 + $3_1 | 0;
                $8_1 = $6_1 << 3 | 0;
                $6_1 = $8_1 - $3_1 | 0;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 32476 | 0;
                 $4_1 = HEAP32[(0 + 32456 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 32436 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 32456 | 0) >> 2] = $5_1;
                HEAP32[(0 + 32444 | 0) >> 2] = $6_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 32440 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $217_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $217_1 >>> $0_1 | 0;
               $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $228_1 = $6_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $6_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $236_1 = $228_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $244_1 = $236_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $5_1 = HEAP32[(((($244_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 32740 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $5_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $279_1 = $6_1;
                 $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $6_1 ? $279_1 : $4_1;
                 $5_1 = $6_1 ? $0_1 : $5_1;
                 $6_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $5_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $5_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($5_1 | 0)) {
                 break label$26
                }
                label$27 : {
                 $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                 if ((HEAP32[(0 + 32452 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                  break label$27
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$28 : {
                $6_1 = $5_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 break label$28
                }
                $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $6_1 = $5_1 + 16 | 0;
               }
               label$29 : while (1) {
                $12_1 = $6_1;
                $8_1 = $0_1;
                $6_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                $6_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                break label$29;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 32440 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 31;
              label$30 : {
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$30
               }
               $0_1 = $0_1 >>> 8 | 0;
               $354_1 = $0_1;
               $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4_1 = $354_1 << $0_1 | 0;
               $361 = $4_1;
               $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $6_1 = $361 << $4_1 | 0;
               $368 = $6_1;
               $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($368 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$31 : {
               label$32 : {
                label$33 : {
                 label$34 : {
                  $6_1 = HEAP32[(($12_1 << 2 | 0) + 32740 | 0) >> 2] | 0;
                  if ($6_1) {
                   break label$34
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$33;
                 }
                 $0_1 = 0;
                 $5_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$35 : while (1) {
                  label$36 : {
                   $2_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$36
                   }
                   $4_1 = $2_1;
                   $8_1 = $6_1;
                   if ($4_1) {
                    break label$36
                   }
                   $4_1 = 0;
                   $8_1 = $6_1;
                   $0_1 = $6_1;
                   break label$32;
                  }
                  $2_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  $6_1 = HEAP32[(($6_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($6_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $5_1 = $5_1 << 1 | 0;
                  if ($6_1) {
                   continue label$35
                  }
                  break label$35;
                 };
                }
                label$37 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$37
                 }
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $459 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $6_1 = $459 >>> $0_1 | 0;
                 $5_1 = ($6_1 >>> 5 | 0) & 8 | 0;
                 $470 = $5_1 | $0_1 | 0;
                 $0_1 = $6_1 >>> $5_1 | 0;
                 $6_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $478 = $470 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $486 = $478 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($486 | $6_1 | 0) + ($0_1 >>> $6_1 | 0) | 0) << 2 | 0) + 32740 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$31
                }
               }
               label$38 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $5_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$39 : {
                 $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($6_1) {
                  break label$39
                 }
                 $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $5_1 ? $2_1 : $4_1;
                $8_1 = $5_1 ? $0_1 : $8_1;
                $0_1 = $6_1;
                if ($0_1) {
                 continue label$38
                }
                break label$38;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 32444 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$40 : {
               $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($5_1 | 0) == ($8_1 | 0)) {
                break label$40
               }
               label$41 : {
                $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 32452 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$41
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$42 : {
               $6_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$42
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $6_1 = $8_1 + 16 | 0;
              }
              label$43 : while (1) {
               $2_1 = $6_1;
               $5_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               $6_1 = $5_1 + 16 | 0;
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               break label$43;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$44 : {
              $0_1 = HEAP32[(0 + 32444 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$44
              }
              $4_1 = HEAP32[(0 + 32456 | 0) >> 2] | 0;
              label$45 : {
               label$46 : {
                $6_1 = $0_1 - $3_1 | 0;
                if ($6_1 >>> 0 < 16 >>> 0) {
                 break label$46
                }
                HEAP32[(0 + 32444 | 0) >> 2] = $6_1;
                $5_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 32456 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$45;
               }
               HEAP32[(0 + 32456 | 0) >> 2] = 0;
               HEAP32[(0 + 32444 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$47 : {
              $5_1 = HEAP32[(0 + 32448 | 0) >> 2] | 0;
              if ($5_1 >>> 0 <= $3_1 >>> 0) {
               break label$47
              }
              $4_1 = $5_1 - $3_1 | 0;
              HEAP32[(0 + 32448 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 32460 | 0) >> 2] | 0;
              $6_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 32460 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$48 : {
              label$49 : {
               if (!(HEAP32[(0 + 32908 | 0) >> 2] | 0)) {
                break label$49
               }
               $4_1 = HEAP32[(0 + 32916 | 0) >> 2] | 0;
               break label$48;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 32920 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 32924 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 32912 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 32916 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 32908 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 32928 | 0) >> 2] = 0;
              HEAP32[(0 + 32880 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$50 : {
              $4_1 = HEAP32[(0 + 32876 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$50
              }
              $6_1 = HEAP32[(0 + 32868 | 0) >> 2] | 0;
              $9_1 = $6_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $6_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 32880 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$51 : {
              label$52 : {
               label$53 : {
                $4_1 = HEAP32[(0 + 32460 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$53
                }
                $0_1 = 32884;
                label$54 : while (1) {
                 label$55 : {
                  $6_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($6_1 >>> 0 > $4_1 >>> 0) {
                   break label$55
                  }
                  if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$52
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$54
                 }
                 break label$54;
                };
               }
               $5_1 = $2(0 | 0) | 0;
               if (($5_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$56 : {
                $0_1 = HEAP32[(0 + 32912 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $5_1 | 0)) {
                 break label$56
                }
                $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$57 : {
                $0_1 = HEAP32[(0 + 32876 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$57
                }
                $4_1 = HEAP32[(0 + 32868 | 0) >> 2] | 0;
                $6_1 = $4_1 + $2_1 | 0;
                if ($6_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($6_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $2($2_1 | 0) | 0;
               if (($0_1 | 0) != ($5_1 | 0)) {
                break label$51
               }
               break label$5;
              }
              $2_1 = ($2_1 - $5_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $5_1 = $2($2_1 | 0) | 0;
              if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $5_1;
             }
             label$58 : {
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$58
              }
              if (($0_1 | 0) == (-1 | 0)) {
               break label$58
              }
              label$59 : {
               $4_1 = HEAP32[(0 + 32916 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$59
               }
               $5_1 = $0_1;
               break label$5;
              }
              label$60 : {
               if (($2($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$60
               }
               $2_1 = $4_1 + $2_1 | 0;
               $5_1 = $0_1;
               break label$5;
              }
              $2(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $5_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $5_1 = 0;
          break label$3;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 32880 | 0) >> 2] = HEAP32[(0 + 32880 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5_1 = $2($8_1 | 0) | 0;
       $0_1 = $2(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 32868 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 32868 | 0) >> 2] = $0_1;
      label$61 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 32872 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 32872 | 0) >> 2] = $0_1;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4_1 = HEAP32[(0 + 32460 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$65
          }
          $0_1 = 32884;
          label$66 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0_1 = HEAP32[(0 + 32452 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$68
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 32452 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 32888 | 0) >> 2] = $2_1;
         HEAP32[(0 + 32884 | 0) >> 2] = $5_1;
         HEAP32[(0 + 32468 | 0) >> 2] = -1;
         HEAP32[(0 + 32472 | 0) >> 2] = HEAP32[(0 + 32908 | 0) >> 2] | 0;
         HEAP32[(0 + 32896 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 32476 | 0;
          HEAP32[($4_1 + 32484 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 32488 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 32448 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 32460 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 32464 | 0) >> 2] = HEAP32[(0 + 32924 | 0) >> 2] | 0;
         break label$62;
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$63
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$63
        }
        if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
         break label$63
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 32460 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 32448 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 32448 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 32464 | 0) >> 2] = HEAP32[(0 + 32924 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8_1 = HEAP32[(0 + 32452 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 32452 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 32884;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$77
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0_1 = 32884;
            label$79 : while (1) {
             label$80 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$80
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$74
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $6_1 = ($2_1 - $12_1 | 0) - $3_1 | 0;
           $3_1 = $12_1 + $3_1 | 0;
           label$81 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$81
            }
            HEAP32[(0 + 32460 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 32448 | 0) >> 2] | 0) + $6_1 | 0;
            HEAP32[(0 + 32448 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 32456 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 32444 | 0) >> 2] | 0) + $6_1 | 0;
            HEAP32[(0 + 32444 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$72;
           }
           label$83 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7_1 = $0_1 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
              label$86 : {
               $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               $9_1 = $0_1 >>> 3 | 0;
               $0_1 = ($9_1 << 3 | 0) + 32476 | 0;
               if (($5_1 | 0) == ($0_1 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($4_1 | 0) != ($5_1 | 0)) {
                break label$87
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32436 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32436 | 0) >> 2] = wasm2js_i32$1;
               break label$84;
              }
              label$88 : {
               if (($4_1 | 0) == ($0_1 | 0)) {
                break label$88
               }
              }
              HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
              break label$84;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($5_1 | 0) == ($2_1 | 0)) {
                break label$90
               }
               label$91 : {
                $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $0_1 >>> 0) {
                 break label$91
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               break label$89;
              }
              label$92 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$92
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$92
               }
               $5_1 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8_1 = $0_1;
               $5_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$93
               }
               $0_1 = $5_1 + 16 | 0;
               $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 32740 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$95
               }
               HEAP32[$0_1 >> 2] = $5_1;
               if ($5_1) {
                break label$94
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32440 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32440 | 0) >> 2] = wasm2js_i32$1;
               break label$84;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
              if (!$5_1) {
               break label$84
              }
             }
             HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
             label$96 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$96
              }
              HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$84
             }
             HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
            }
            $6_1 = $7_1 + $6_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
           HEAP32[($3_1 + $6_1 | 0) >> 2] = $6_1;
           label$97 : {
            if ($6_1 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4_1 = $6_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 32476 | 0;
            label$98 : {
             label$99 : {
              $6_1 = HEAP32[(0 + 32436 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($6_1 & $4_1 | 0) {
               break label$99
              }
              HEAP32[(0 + 32436 | 0) >> 2] = $6_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$98;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$72;
           }
           $0_1 = 31;
           label$100 : {
            if ($6_1 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $0_1 = $6_1 >>> 8 | 0;
            $1194 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1194 << $0_1 | 0;
            $1201 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1201 << $4_1 | 0;
            $1208 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1208 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 32740 | 0;
           label$101 : {
            label$102 : {
             $5_1 = HEAP32[(0 + 32440 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 32440 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$101;
            }
            $0_1 = $6_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            label$103 : while (1) {
             $4_1 = $5_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6_1 | 0)) {
              break label$73
             }
             $5_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$72;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 32448 | 0) >> 2] = $12_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 32460 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 32464 | 0) >> 2] = HEAP32[(0 + 32924 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32892 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32896 | 0) >> 2] | 0;
          $1330 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1330;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32884 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32888 | 0) >> 2] | 0;
          $1332 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1332;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 32892 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 32888 | 0) >> 2] = $2_1;
          HEAP32[(0 + 32884 | 0) >> 2] = $5_1;
          HEAP32[(0 + 32896 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$62
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$105 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 32476 | 0;
           label$106 : {
            label$107 : {
             $5_1 = HEAP32[(0 + 32436 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$107
             }
             HEAP32[(0 + 32436 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$106;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$62;
          }
          $0_1 = 31;
          label$108 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1393 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $1393 << $0_1 | 0;
           $1400 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1400 << $6_1 | 0;
           $1407 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1407 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $6_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 32740 | 0;
          label$109 : {
           label$110 : {
            $5_1 = HEAP32[(0 + 32440 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$110
            }
            HEAP32[(0 + 32440 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$109;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$111 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$71
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$62;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 32448 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 32448 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 32460 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 32460 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $0_1 = 0;
     break label$1;
    }
    label$112 : {
     if (!$9_1) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $6_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($6_1 << 2 | 0) + 32740 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$113
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       HEAP32[(0 + 32440 | 0) >> 2] = $7_1;
       break label$112;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$112
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
     label$115 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$115
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$112
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$116 : {
     label$117 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$118 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 32476 | 0;
      label$119 : {
       label$120 : {
        $6_1 = HEAP32[(0 + 32436 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$120
        }
        HEAP32[(0 + 32436 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$119;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$116;
     }
     $0_1 = 31;
     label$121 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1640 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $6_1 = $1640 << $0_1 | 0;
      $1647 = $6_1;
      $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1647 << $6_1 | 0;
      $1654 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1654 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $6_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = ($0_1 << 2 | 0) + 32740 | 0;
     label$122 : {
      label$123 : {
       label$124 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$124
        }
        HEAP32[(0 + 32440 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$6_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
        break label$123;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$6_1 >> 2] | 0;
       label$125 : while (1) {
        $6_1 = $3_1;
        if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$122
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $5_1 = ($6_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         continue label$125
        }
        break label$125;
       };
       HEAP32[$5_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$116;
     }
     $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$126 : {
    if (!$11_1) {
     break label$126
    }
    label$127 : {
     label$128 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 32740 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$128
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$127
      }
      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32440 | 0) >> 2] = wasm2js_i32$1;
      break label$126;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$126
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$129 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$129
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$126
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$130 : {
    label$131 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$131
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$130;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$132 : {
     if (!$7_1) {
      break label$132
     }
     $3_1 = $7_1 >>> 3 | 0;
     $6_1 = ($3_1 << 3 | 0) + 32476 | 0;
     $0_1 = HEAP32[(0 + 32456 | 0) >> 2] | 0;
     label$133 : {
      label$134 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$134
       }
       HEAP32[(0 + 32436 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $6_1;
       break label$133;
      }
      $3_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 32456 | 0) >> 2] = $10_1;
    HEAP32[(0 + 32444 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $399 = 0, $406 = 0, $413 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 32452 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 32476 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32436 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32436 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 32740 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32440 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32440 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 32444 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 32460 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 32460 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 32448 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 32448 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 32444 | 0) >> 2] = 0;
      HEAP32[(0 + 32456 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 32456 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 32444 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 32444 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 32476 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 32452 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32436 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32436 | 0) >> 2] = wasm2js_i32$1;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 32452 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 32452 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 32740 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32440 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32440 | 0) >> 2] = wasm2js_i32$1;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 32444 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 32476 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 32436 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 32436 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$36 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = $0_1 >>> 8 | 0;
    $399 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $399 << $2_1 | 0;
    $406 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $406 << $4_1 | 0;
    $413 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($413 << $5_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 32740 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 32440 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 32440 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 32468 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 32468 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $5($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $8($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $5($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $4($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $6($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $8($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & 3 | 0;
  $4_1 = $2_1 & -8 | 0;
  $5_1 = $0_1 + $4_1 | 0;
  label$1 : {
   $6_1 = HEAP32[(0 + 32452 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > $0_1 >>> 0) {
    break label$1
   }
   if (($3_1 | 0) == (1 | 0)) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($3_1) {
     break label$3
    }
    $3_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($4_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $3_1 = $0_1;
     if (($4_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 32916 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $4_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $9($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $3_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 32460 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $5_1 = (HEAP32[(0 + 32448 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $1_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 32448 | 0) >> 2] = $1_1;
     HEAP32[(0 + 32460 | 0) >> 2] = $3_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $5_1 = (HEAP32[(0 + 32444 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3_1 = $5_1 - $1_1 | 0;
       if ($3_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $5_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 32456 | 0) >> 2] = $1_1;
     HEAP32[(0 + 32444 | 0) >> 2] = $3_1;
     break label$5;
    }
    $3_1 = 0;
    $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($7_1 & 2 | 0) {
     break label$2
    }
    $8_1 = ($7_1 & -8 | 0) + $4_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $9_1 = $8_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$13 : {
       $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       $7_1 = $7_1 >>> 3 | 0;
       $4_1 = ($7_1 << 3 | 0) + 32476 | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3_1 | 0) != ($5_1 | 0)) {
        break label$14
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32436 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32436 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      label$15 : {
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$15
       }
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($5_1 | 0)) {
        break label$17
       }
       label$18 : {
        $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($6_1 >>> 0 > $3_1 >>> 0) {
         break label$18
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
       break label$16;
      }
      label$19 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $7_1 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $6_1 = $3_1;
       $7_1 = $4_1;
       $3_1 = $7_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       $3_1 = $7_1 + 16 | 0;
       $4_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 32740 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$22
       }
       HEAP32[$3_1 >> 2] = $7_1;
       if ($7_1) {
        break label$21
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32440 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32440 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$11
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $10_1;
     label$23 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$23
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
     }
     $5_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
    }
    label$24 : {
     if ($9_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $9_1 | 3 | 0;
    $5_1 = $0_1 + $8_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $9($1_1 | 0, $9_1 | 0);
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $9($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $382 = 0, $389 = 0, $396 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $3_1 | 0;
     if ((HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[(0 + 32452 | 0) >> 2] | 0;
     label$4 : {
      if ($3_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $7_1 = $3_1 >>> 3 | 0;
       $3_1 = ($7_1 << 3 | 0) + 32476 | 0;
       if (($6_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32436 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32436 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($3_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($0_1 | 0)) {
        break label$9
       }
       label$10 : {
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $3_1 >>> 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$8;
      }
      label$11 : {
       $3_1 = $0_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $3_1 = $0_1 + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $6_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4_1 = $3_1;
       $6_1 = $5_1;
       $3_1 = $6_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       $3_1 = $6_1 + 16 | 0;
       $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($5_1 << 2 | 0) + 32740 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$14
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$13
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32440 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32440 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$15
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 32444 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return;
   }
   label$16 : {
    label$17 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 32460 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 32460 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 32448 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 32448 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 32444 | 0) >> 2] = 0;
      HEAP32[(0 + 32456 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 32456 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 32444 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 32444 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $4_1 = HEAP32[(0 + 32452 | 0) >> 2] | 0;
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$20 : {
      label$21 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $2_1 = $3_1 >>> 3 | 0;
        $3_1 = ($2_1 << 3 | 0) + 32476 | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5_1 | 0) != ($6_1 | 0)) {
         break label$23
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32436 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32436 | 0) >> 2] = wasm2js_i32$1;
        break label$20;
       }
       label$24 : {
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$24
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       break label$20;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$26
        }
        label$27 : {
         $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 > $3_1 >>> 0) {
          break label$27
         }
         HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$25;
       }
       label$28 : {
        $5_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         break label$28
        }
        $5_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         break label$28
        }
        $6_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4_1 = $5_1;
        $6_1 = $3_1;
        $5_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         continue label$29
        }
        $5_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($5_1 << 2 | 0) + 32740 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$31
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$30
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 32440 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32440 | 0) >> 2] = wasm2js_i32$1;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$20
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$32
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 32456 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 32444 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$33 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 32476 | 0;
    label$34 : {
     label$35 : {
      $5_1 = HEAP32[(0 + 32436 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($5_1 & $3_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 32436 | 0) >> 2] = $5_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$34;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$36 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3_1 = $1_1 >>> 8 | 0;
    $382 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5_1 = $382 << $3_1 | 0;
    $389 = $5_1;
    $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $389 << $5_1 | 0;
    $396 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($396 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $5_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $5_1 = ($3_1 << 2 | 0) + 32740 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6_1 = HEAP32[(0 + 32440 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$39
      }
      HEAP32[(0 + 32440 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$5_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
      break label$38;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$40 : while (1) {
      $5_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$37
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  i64toi32_i32$1 = $2_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $3_1 = HEAPU8[$1_1 >> 0] | 0;
   if ($3_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   $4_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   if ($4_1) {
    break label$2
   }
   $4_1 = $0_1;
   label$3 : while (1) {
    $1_1 = $4_1;
    $4_1 = $1_1 + 1 | 0;
    if ((HEAPU8[$1_1 >> 0] | 0 | 0) == ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
   return $1_1 - $0_1 | 0 | 0;
  }
  $5_1 = $2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | (1 << ($3_1 & 31 | 0) | 0) | 0;
  label$4 : while (1) {
   $3_1 = $4_1 & 31 | 0;
   $5_1 = $4_1 >>> 3 | 0;
   $4_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
   $5_1 = $2_1 + ($5_1 & 28 | 0) | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | (1 << $3_1 | 0) | 0;
   $1_1 = $1_1 + 1 | 0;
   if ($4_1) {
    continue label$4
   }
   break label$4;
  };
  $3_1 = $0_1;
  label$5 : {
   $4_1 = HEAPU8[$3_1 >> 0] | 0;
   if (!$4_1) {
    break label$5
   }
   $1_1 = $0_1;
   label$6 : while (1) {
    label$7 : {
     if (((HEAP32[($2_1 + (($4_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($4_1 & 31 | 0) | 0) & 1 | 0) {
      break label$7
     }
     $3_1 = $1_1;
     break label$5;
    }
    $4_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = $1_1 + 1 | 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $3_1 - $0_1 | 0 | 0;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $12($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($11($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $13($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (!$3_1) {
      break label$3
     }
     if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
      break label$2
     }
    }
    $4_1 = $12($0_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $3($2_1 | 0, 0 | 0, 32 | 0) | 0;
   label$4 : {
    $3_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     $4_1 = $2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | (1 << ($3_1 & 31 | 0) | 0) | 0;
     $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
     $1_1 = $1_1 + 1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $4_1 = $0_1;
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   $1_1 = $0_1;
   label$6 : while (1) {
    label$7 : {
     if (!(((HEAP32[($2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($3_1 & 31 | 0) | 0) & 1 | 0)) {
      break label$7
     }
     $4_1 = $1_1;
     break label$1;
    }
    $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $4_1 = $1_1 + 1 | 0;
    $1_1 = $4_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 - $0_1 | 0 | 0;
 }
 
 function $14($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    $0_1 = HEAP32[(0 + 32932 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 + ($10($0_1 | 0, $1_1 | 0) | 0) | 0;
    if (HEAPU8[$2_1 >> 0] | 0) {
     break label$3
    }
    HEAP32[(0 + 32932 | 0) >> 2] = 0;
    return 0 | 0;
   }
   label$4 : {
    $0_1 = $2_1 + ($13($2_1 | 0, $1_1 | 0) | 0) | 0;
    if (!(HEAPU8[$0_1 >> 0] | 0)) {
     break label$4
    }
    HEAP32[(0 + 32932 | 0) >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 0;
    return $2_1 | 0;
   }
   HEAP32[(0 + 32932 | 0) >> 2] = 0;
  }
  return $2_1 | 0;
 }
 
 function $15($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $12($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($15($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $15($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $15($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 0 - $0_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = $0_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function $19($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $0_1 = $18($358(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0_1 ? -1 : $1_1;
  i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $20($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($18(fimport$6(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($18(fimport$6(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $21($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  $4_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($18(fimport$7(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$2
     }
    }
    HEAP32[$0_1 >> 2] = ($4_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$1;
   }
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$8($22(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $26() {
  $24(33e3 | 0);
  return 33008 | 0;
 }
 
 function $27() {
  $25(33e3 | 0);
 }
 
 function $28($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $26() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $27();
  return $0_1 | 0;
 }
 
 function $29($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($15(1024 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     $3_1 = $5(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $3($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($15($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$3($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$3($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    if (fimport$4($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 1;
   HEAP32[($3_1 + 36 | 0) >> 2] = 2;
   HEAP32[($3_1 + 32 | 0) >> 2] = 3;
   HEAP32[($3_1 + 12 | 0) >> 2] = 4;
   label$10 : {
    if (HEAP32[(32936 + 4 | 0) >> 2] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $28($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($15(1028 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$2;
    }
    $3_1 = $16($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    $4_1 = 0;
    $0_1 = $17(fimport$2($0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $29($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$8($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $34($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($33($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $4($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $35($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $34($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $31($3_1 | 0) | 0;
   $0_1 = $34($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $32($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $11($0_1 | 0) | 0;
  return (($2_1 | 0) != ($35($0_1 | 0, 1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) ? -1 : 0) | 0;
 }
 
 function $37($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $38($0_1 | 0) | 0 | 0;
    }
    $1_1 = $31($0_1 | 0) | 0;
    $2_1 = $38($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $32($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 31336 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $37(HEAP32[(0 + 31336 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($26() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $31($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $38($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $32($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $27();
  }
  return $2_1 | 0;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $39($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $31($0_1 | 0) | 0;
  }
  $68($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $26() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $27();
  }
  $3_1 = $37($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $6($5_1 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2_1) {
     break label$8
    }
    $6($0_1 | 0);
    break label$7;
   }
   if (!$1_1) {
    break label$7
   }
   $32($0_1 | 0);
  }
  return $4_1 | $3_1 | 0 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $41($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $43($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      if (!$2_1) {
       break label$3
      }
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $44() {
  return 31340 | 0;
 }
 
 function $45($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($44() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $46($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $45($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $47($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$47(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $48($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $49($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $50($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $48($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $49($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $51($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $3($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($52(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $31($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $52($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $52($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $32($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $52($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $275_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$4
      }
      (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $11_1 = -1;
      break label$3;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$13
             }
             $13_1 = $1_1;
             break label$12;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$11
            }
            $13_1 = $1_1;
            label$14 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$15 : {
            if (!$0_1) {
             break label$15
            }
            $53($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$2
           }
           $1_1 = $42(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$16 : {
            label$17 : {
             if (!$1_1) {
              break label$17
             }
             if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
              break label$17
             }
             $1_1 = $13_1 + 3 | 0;
             $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
             $10_1 = 1;
             break label$16;
            }
            $1_1 = $13_1 + 1 | 0;
            $16_1 = -1;
           }
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $17_1 = 0;
           label$18 : {
            label$19 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 <= 31 >>> 0) {
              break label$19
             }
             $13_1 = $1_1;
             break label$18;
            }
            $17_1 = 0;
            $13_1 = $1_1;
            $14_1 = 1 << $14_1 | 0;
            if (!($14_1 & 75913 | 0)) {
             break label$18
            }
            label$20 : while (1) {
             $13_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
             $17_1 = $14_1 | $17_1 | 0;
             $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 >= 32 >>> 0) {
              break label$18
             }
             $1_1 = $13_1;
             $14_1 = 1 << $14_1 | 0;
             if ($14_1 & 75913 | 0) {
              continue label$20
             }
             break label$20;
            };
           }
           label$21 : {
            label$22 : {
             if (($15_1 | 0) != (42 | 0)) {
              break label$22
             }
             label$23 : {
              label$24 : {
               if (!($42(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$24
               }
               $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$24
               }
               HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $13_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$23;
              }
              if ($10_1) {
               break label$8
              }
              $10_1 = 0;
              $18_1 = 0;
              label$25 : {
               if (!$0_1) {
                break label$25
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$21
             }
             $18_1 = 0 - $18_1 | 0;
             $17_1 = $17_1 | 8192 | 0;
             break label$21;
            }
            $18_1 = $54($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$8
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$26 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$26
            }
            label$27 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$27
             }
             label$28 : {
              if (!($42(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$28
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$28
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$26;
             }
             if ($10_1) {
              break label$8
             }
             label$29 : {
              label$30 : {
               if ($0_1) {
                break label$30
               }
               $19_1 = 0;
               break label$29;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$26;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $54($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $13_1 = 0;
           label$31 : while (1) {
            $14_1 = $13_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
            $13_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $15_1;
            $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 991 | 0) >> 0] | 0;
            if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$31
            }
            break label$31;
           };
           label$32 : {
            label$33 : {
             label$34 : {
              if (($13_1 | 0) == (19 | 0)) {
               break label$34
              }
              if (!$13_1) {
               break label$1
              }
              label$35 : {
               if (($16_1 | 0) < (0 | 0)) {
                break label$35
               }
               HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
               i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $275_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $275_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$33;
              }
              if (!$0_1) {
               break label$5
              }
              $55($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
              $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              break label$32;
             }
             $20_1 = -1;
             if (($16_1 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1_1 = 0;
            if (!$0_1) {
             continue label$2
            }
           }
           $21_1 = $17_1 & -65537 | 0;
           $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
           $20_1 = 0;
           $16_1 = 1036;
           $17_1 = $9_1;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                label$41 : {
                 label$42 : {
                  label$43 : {
                   label$44 : {
                    label$45 : {
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         label$50 : {
                          label$51 : {
                           $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$36;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$37;
                           case 27:
                            break label$42;
                           case 12:
                           case 17:
                            break label$45;
                           case 23:
                            break label$46;
                           case 0:
                           case 32:
                            break label$47;
                           case 24:
                            break label$48;
                           case 22:
                            break label$49;
                           case 29:
                            break label$50;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          $17_1 = $9_1;
                          label$52 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$37;
                           case 2:
                            break label$40;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$52;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$41
                          }
                          break label$7;
                         }
                         $20_1 = 0;
                         $16_1 = 1036;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $22_1 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$44;
                        }
                        $1_1 = 0;
                        label$53 : {
                         switch ($14_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 7:
                          break label$53;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      $20_1 = 0;
                      $16_1 = 1036;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $56(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      if (!($13_1 & 8 | 0)) {
                       break label$43
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$43
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 1036 | 0;
                      $20_1 = 2;
                      break label$43;
                     }
                     $20_1 = 0;
                     $16_1 = 1036;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $57(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$43
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$43;
                    }
                    label$60 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31_1 = 0
                       } else {
                        $31_1 = 1
                       }
                       $32_1 = $31_1;
                      } else {
                       $32_1 = 0
                      }
                      $30_1 = $32_1;
                     }
                     if ($30_1) {
                      break label$60
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 1036;
                     break label$44;
                    }
                    label$61 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$61
                     }
                     $20_1 = 1;
                     $16_1 = 1037;
                     break label$44;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 1038 : 1036;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12_1 = $58($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $22_1 = i64toi32_i32$5;
                  $22$hi = i64toi32_i32$3;
                  label$62 : {
                   if ($19_1) {
                    break label$62
                   }
                   i64toi32_i32$3 = $22$hi;
                   if (!!($22_1 | i64toi32_i32$3 | 0)) {
                    break label$62
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$7;
                  }
                  i64toi32_i32$3 = $22$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$3 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$7;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 1046;
                 $1_1 = $43($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$6;
                }
                label$63 : {
                 if (!$19_1) {
                  break label$63
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$39;
                }
                $1_1 = 0;
                $59($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$38;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$64 : {
               label$65 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$64
                }
                label$66 : {
                 $15_1 = $46($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$66
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$66
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$65
                 }
                 break label$64;
                }
                break label$65;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$1
               }
              }
              $59($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$67 : {
               if ($1_1) {
                break label$67
               }
               $1_1 = 0;
               break label$38;
              }
              $14_1 = 0;
              $15_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$68 : while (1) {
               $12_1 = HEAP32[$15_1 >> 2] | 0;
               if (!$12_1) {
                break label$38
               }
               $12_1 = $46($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $14_1 = $12_1 + $14_1 | 0;
               if (($14_1 | 0) > ($1_1 | 0)) {
                break label$38
               }
               $53($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $15_1 = $15_1 + 4 | 0;
               if ($14_1 >>> 0 < $1_1 >>> 0) {
                continue label$68
               }
               break label$68;
              };
             }
             $59($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$2;
            }
            $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$2;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19_1 = 1;
           $12_1 = $8_1;
           $17_1 = $9_1;
           $13_1 = $21_1;
           break label$6;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$10;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$1
        }
        if (!$10_1) {
         break label$5
        }
        $1_1 = 1;
        label$69 : {
         label$70 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$69
          }
          $55($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$70
          }
          break label$1;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$71 : while (1) {
         if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20_1 = 1;
         $1_1 = $1_1 + 1 | 0;
         if (($1_1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$71;
        };
       }
       $20_1 = -1;
       break label$1;
      }
      $17_1 = $9_1;
     }
     $15_1 = $17_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $59($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $53($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $59($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $59($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $53($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $59($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20_1 = 0;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $53($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $34($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($42(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($42(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $55($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $56($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 1520 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $57($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $58($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $59($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $3($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $53($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $53($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $60($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $22_1 = 0, $16_1 = 0, $12_1 = 0, $19_1 = 0, $26_1 = 0.0, $24_1 = 0, $9_1 = 0, $24$hi = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $158_1 = 0, $160$hi = 0, $162$hi = 0, $164_1 = 0, $164$hi = 0, $166$hi = 0, $170_1 = 0, $170$hi = 0, $818 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $61(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 1536;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $61(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   $8_1 = 1;
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $9_1 = 1539;
    break label$1;
   }
   $9_1 = 1542;
   if ($4_1 & 1 | 0) {
    break label$1
   }
   $8_1 = 0;
   $7_1 = 1;
   $9_1 = 1537;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $59($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $53($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $53($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 1563 : 1567) : $11_1 ? 1555 : 1559) | 0, 3 | 0);
    $59($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$47(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $158_1 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $160$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $160$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $162$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $164_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $164$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $162$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$3 = $164_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $166$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $170_1 = i64toi32_i32$1;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $166$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $170$hi;
        i64toi32_i32$3 = $170_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$158_1 >> 2] = i64toi32_i32$2;
        $11_1 = $11_1 + -4 | 0;
        if ($11_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$18 : {
       label$19 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = (($14_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $11_1 >>> 0) {
         break label$23
        }
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        break label$22;
       }
       $21_1 = 1e9 >>> $10_1 | 0;
       $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $17_1 = $18_1;
       label$24 : while (1) {
        $23_1 = HEAP32[$17_1 >> 2] | 0;
        HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
        $17_1 = $17_1 + 4 | 0;
        if ($17_1 >>> 0 < $11_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$11_1 >> 2] = $3_1;
       $11_1 = $11_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $17_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$25
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($23_1 >>> 0 >= $3_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($14_1 | 0) != (0 | 0) & ($13_1 | 0) == (103 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$28 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $21_1 = HEAP32[$10_1 >> 2] | 0;
     $22_1 = ($21_1 >>> 0) / ($3_1 >>> 0) | 0;
     $23_1 = $21_1 - Math_imul($22_1, $3_1) | 0;
     label$30 : {
      label$31 : {
       $19_1 = $10_1 + 4 | 0;
       if (($19_1 | 0) != ($11_1 | 0)) {
        break label$31
       }
       if (!$23_1) {
        break label$30
       }
      }
      $20_1 = $3_1 >>> 1 | 0;
      $26_1 = $23_1 >>> 0 < $20_1 >>> 0 ? .5 : ($19_1 | 0) == ($11_1 | 0) ? (($23_1 | 0) == ($20_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $22_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7_1) {
        break label$32
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $21_1 - $23_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$33 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$35 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$35
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($23_1 >>> 0 >= $3_1 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$37 : {
     label$38 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$37
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$40
      }
      $22_1 = $4_1 & 8 | 0;
      break label$39;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$39
     }
     $11_1 = -9;
     label$41 : {
      if ($23_1) {
       break label$41
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$41
      }
      $23_1 = 10;
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $21_1 = $11_1;
       $11_1 = $11_1 + 1 | 0;
       $23_1 = Math_imul($23_1, 10);
       if (!(($10_1 >>> 0) % ($23_1 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $11_1 = $21_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$39;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $20_1 = $14_1 | $22_1 | 0;
    $23_1 = ($20_1 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break label$45
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$44;
     }
     label$46 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11_1 = $58(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $19_1 = $11_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $19_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $23_1 | 0) + $11_1 | 0) + 1 | 0;
    $59($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $53($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $59($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($21_1 | 0) != (70 | 0)) {
         break label$51
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$52 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11_1 = $58(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $17_1 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$54
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$53
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $53($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        label$56 : {
         if (!$20_1) {
          break label$56
         }
         $53($0_1 | 0, 1571 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$50
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$50
        }
        label$57 : while (1) {
         label$58 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11_1 = $58(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$58
          }
          label$59 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$59
           }
           break label$59;
          };
         }
         $53($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$49
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$57
         }
         break label$49;
        };
       }
       label$60 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$60
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $17_1 = $18_1;
        label$61 : while (1) {
         label$62 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11_1 = $58(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$62
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$63 : {
          label$64 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$64
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$63
           }
           label$65 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$65
            }
            break label$63;
           };
          }
          $53($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$66 : {
           if ($22_1) {
            break label$66
           }
           if (($14_1 | 0) < (1 | 0)) {
            break label$63
           }
          }
          $53($0_1 | 0, 1571 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $53($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$60
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$61
         }
         break label$61;
        };
       }
       $59($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $53($0_1 | 0, $19_1 | 0, $12_1 - $19_1 | 0 | 0);
       break label$48;
      }
      $11_1 = $14_1;
     }
     $59($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $59($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$67 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$67
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$67
    }
    $26_1 = 8.0;
    label$68 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$68
     }
     break label$68;
    };
    label$69 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$69
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$67;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$70 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $818 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11_1 = $58(($818 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$70
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$71 : while (1) {
    $11_1 = $18_1;
    label$72 : {
     label$73 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$73
      }
      $18_1 = ~~$1_1;
      break label$72;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 1520 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$74 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$74
     }
     label$75 : {
      if ($23_1) {
       break label$75
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$75
      }
      if ($1_1 == 0.0) {
       break label$74
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$71
    }
    break label$71;
   };
   label$76 : {
    label$77 : {
     if (!$3_1) {
      break label$77
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$77
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$76;
    }
    $11_1 = (($12_1 - ($6_1 + 16 | 0) | 0) - $21_1 | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $59($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $53($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $59($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $53($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $59($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $53($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $59($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $61($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $62($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $51($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $63($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $51($0_1 | 0, $1_1 | 0, $2_1 | 0, 7 | 0, 0 | 0) | 0 | 0;
 }
 
 function $64($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $62($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $65($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $63($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  return $66($0_1 | 0, HEAP32[((HEAP32[(($44() | 0) + 172 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 68 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[($1_1 + 128 | 0) >> 2] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   }
   label$3 : {
    label$4 : {
     $0_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $0_1 = $0_1 + 132 | 0;
     break label$3;
    }
    $0_1 = ($44() | 0) + 216 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
  }
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $44() | 0;
    $2_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if (($2_1 | 0) != (HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $3_1 = -1;
    $4_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    if (($4_1 | 0) == (2147483647 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 68 | 0) >> 2] = $4_1 + 1 | 0;
    return 0 | 0;
   }
   $3_1 = -1;
   label$3 : {
    $4_1 = $0_1 + 76 | 0;
    if ((HEAP32[$4_1 >> 2] | 0 | 0) > (-1 | 0)) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = 0;
   }
   if (HEAP32[$4_1 >> 2] | 0) {
    break label$1
   }
   if ($70($4_1 | 0, $2_1 | 0) | 0) {
    break label$1
   }
   $3_1 = 0;
   HEAP32[($0_1 + 128 | 0) >> 2] = 0;
   HEAP32[($0_1 + 68 | 0) >> 2] = 1;
   $4_1 = HEAP32[($1_1 + 216 | 0) >> 2] | 0;
   HEAP32[($0_1 + 132 | 0) >> 2] = $4_1;
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    HEAP32[($4_1 + 128 | 0) >> 2] = $0_1;
   }
   HEAP32[($1_1 + 216 | 0) >> 2] = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $70($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1 ? $2_1 : $1_1;
  return $2_1 | 0;
 }
 
 function $71() {
  global$2 = 5345600;
  global$1 = (102720 + 15 | 0) & -16 | 0;
 }
 
 function $72() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $73() {
  return global$1 | 0;
 }
 
 function $74($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $75($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  label$1 : {
   if (!($69($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $0_1 + 80 | 0;
   $2_1 = $0_1 + 76 | 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     $74($2_1 | 0, $1_1 | 0, $3_1 | 0, 1 | 0);
    }
    if ($69($0_1 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = -1;
    if ($33($0_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 >= $3_1 >>> 0) {
     break label$3
    }
    $3_1 = $1_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP8[($0_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break label$1;
   }
   $3_1 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($31($1_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $76($1_1 | 0, $0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    break label$4;
   }
   $2_1 = $76($1_1 | 0, $0_1 | 0) | 0;
  }
  $32($1_1 | 0);
  return $2_1 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (($1_1 | 0) != (1 | 0)) {
    break label$1
   }
   $68($0_1 | 0);
   HEAP32[($0_1 + 68 | 0) >> 2] = 0;
   $32($0_1 | 0);
   return;
  }
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1 + -1 | 0;
 }
 
 function $79($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $0_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
    label$4 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = ($4_1 << 24 | 0) >> 24 | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = $4_1;
     $1_1 = ($5_1 | 0) != (0 | 0);
     break label$1;
    }
    $4_1 = HEAP32[(HEAP32[(($44() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0;
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$0_1 >> 2] = $5_1 & 57343 | 0;
     $1_1 = 1;
     break label$1;
    }
    $4_1 = ($5_1 & 255 | 0) + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $4_1 = HEAP32[(1584 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    label$6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $5_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$7 : {
     $2_1 = $5_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 2;
     break label$1;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    label$8 : {
     $2_1 = $4_1 | ($2_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 3;
     break label$1;
    }
    $1_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($1_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $1_1 | ($2_1 << 6 | 0) | 0;
    $1_1 = 4;
    break label$1;
   }
   (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $80($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $67($1_1 | 0) | 0;
  $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
  $75($1_1 | 0);
  label$1 : {
   if (($36($0_1 | 0, $1_1 | 0) | 0 | 0) < (0 | 0)) {
    break label$1
   }
   if (!($35($4_1 | 0, $11($4_1 | 0) | 0 | 0, 1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   if (($35($2_1 | 0, 1 | 0, $3_1 | 0, $1_1 | 0) | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   $77(10 | 0, $1_1 | 0) | 0;
  }
  $78($1_1 | 0);
 }
 
 function $81($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    if (!(HEAP32[(0 + 34064 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   $4_1 = 1;
   HEAP32[(0 + 31712 | 0) >> 2] = 1;
   HEAP32[(0 + 34068 | 0) >> 2] = 0;
   HEAP32[(0 + 34064 | 0) >> 2] = 0;
  }
  $5_1 = -1;
  label$3 : {
   if (($4_1 | 0) >= ($0_1 | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$6_1) {
    break label$3
   }
   label$4 : {
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) == (45 | 0)) {
     break label$4
    }
    if ((HEAPU8[$2_1 >> 0] | 0 | 0) != (45 | 0)) {
     break label$3
    }
    HEAP32[(0 + 34072 | 0) >> 2] = $6_1;
    $5_1 = 1;
    HEAP32[(0 + 31712 | 0) >> 2] = $4_1 + 1 | 0;
    break label$3;
   }
   $7_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
   if (!$7_1) {
    break label$3
   }
   label$5 : {
    if (($7_1 | 0) != (45 | 0)) {
     break label$5
    }
    if (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) {
     break label$5
    }
    HEAP32[(0 + 31712 | 0) >> 2] = $4_1 + 1 | 0;
    break label$3;
   }
   label$6 : {
    $4_1 = HEAP32[(0 + 34068 | 0) >> 2] | 0;
    if ($4_1) {
     break label$6
    }
    $4_1 = 1;
    HEAP32[(0 + 34068 | 0) >> 2] = 1;
   }
   label$7 : {
    label$8 : {
     $8_1 = $79($3_1 + 12 | 0 | 0, $6_1 + $4_1 | 0 | 0, 4 | 0) | 0;
     if (($8_1 | 0) < (0 | 0)) {
      break label$8
     }
     $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     break label$7;
    }
    $6_1 = 65533;
    HEAP32[($3_1 + 12 | 0) >> 2] = 65533;
    $8_1 = 1;
   }
   $7_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
   $4_1 = HEAP32[($1_1 + ($7_1 << 2 | 0) | 0) >> 2] | 0;
   HEAP32[(0 + 34076 | 0) >> 2] = $6_1;
   $6_1 = HEAP32[(0 + 34068 | 0) >> 2] | 0;
   $5_1 = $6_1 + $8_1 | 0;
   HEAP32[(0 + 34068 | 0) >> 2] = $5_1;
   label$9 : {
    if (HEAPU8[($4_1 + $5_1 | 0) >> 0] | 0) {
     break label$9
    }
    HEAP32[(0 + 31712 | 0) >> 2] = $7_1 + 1 | 0;
    HEAP32[(0 + 34068 | 0) >> 2] = 0;
   }
   label$10 : {
    switch ((HEAPU8[$2_1 >> 0] | 0) + -43 | 0 | 0) {
    case 0:
    case 2:
     $2_1 = $2_1 + 1 | 0;
     break;
    default:
     break label$10;
    };
   }
   $9_1 = $4_1 + $6_1 | 0;
   $4_1 = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = 0;
   label$12 : {
    label$13 : while (1) {
     $6_1 = $79($3_1 + 8 | 0 | 0, $2_1 + $4_1 | 0 | 0, 4 | 0) | 0;
     $4_1 = (($6_1 | 0) > (1 | 0) ? $6_1 : 1) + $4_1 | 0;
     $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$12
     }
     if (($5_1 | 0) != ($7_1 | 0)) {
      continue label$13
     }
     break label$13;
    };
   }
   label$14 : {
    if (($5_1 | 0) == ($7_1 | 0)) {
     break label$14
    }
    $5_1 = 63;
    if ((HEAPU8[$2_1 >> 0] | 0 | 0) == (58 | 0)) {
     break label$3
    }
    if (!(HEAP32[(0 + 31716 | 0) >> 2] | 0)) {
     break label$3
    }
    $80(HEAP32[$1_1 >> 2] | 0 | 0, 1788 | 0, $9_1 | 0, $8_1 | 0);
    break label$3;
   }
   $4_1 = $2_1 + $4_1 | 0;
   if ((HEAPU8[$4_1 >> 0] | 0 | 0) != (58 | 0)) {
    break label$3
   }
   label$15 : {
    label$16 : {
     $6_1 = $4_1 + 1 | 0;
     if ((HEAPU8[$6_1 >> 0] | 0 | 0) == (58 | 0)) {
      break label$16
     }
     label$17 : {
      if ((HEAP32[(0 + 31712 | 0) >> 2] | 0 | 0) >= ($0_1 | 0)) {
       break label$17
      }
      $4_1 = HEAP32[(0 + 34068 | 0) >> 2] | 0;
      break label$15;
     }
     $5_1 = 58;
     if ((HEAPU8[$2_1 >> 0] | 0 | 0) == (58 | 0)) {
      break label$3
     }
     $5_1 = 63;
     if (!(HEAP32[(0 + 31716 | 0) >> 2] | 0)) {
      break label$3
     }
     $80(HEAP32[$1_1 >> 2] | 0 | 0, 1812 | 0, $9_1 | 0, $8_1 | 0);
     break label$3;
    }
    HEAP32[(0 + 34072 | 0) >> 2] = 0;
    $4_1 = HEAP32[(0 + 34068 | 0) >> 2] | 0;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (58 | 0)) {
     break label$15
    }
    if (!$4_1) {
     break label$3
    }
   }
   $6_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
   HEAP32[(0 + 31712 | 0) >> 2] = $6_1 + 1 | 0;
   HEAP32[(0 + 34072 | 0) >> 2] = (HEAP32[($1_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0) + $4_1 | 0;
   HEAP32[(0 + 34068 | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $82($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $83($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $83($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $9_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$2
    }
    if (!(HEAP32[(0 + 34064 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   $6_1 = 1;
   HEAP32[(0 + 31712 | 0) >> 2] = 1;
   HEAP32[(0 + 34068 | 0) >> 2] = 0;
   HEAP32[(0 + 34064 | 0) >> 2] = 0;
  }
  $7_1 = -1;
  label$3 : {
   if (($6_1 | 0) >= ($0_1 | 0)) {
    break label$3
   }
   $8_1 = HEAP32[($1_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   if (!$8_1) {
    break label$3
   }
   $9_1 = $6_1;
   label$4 : {
    label$5 : {
     switch ((HEAPU8[$2_1 >> 0] | 0) + -43 | 0 | 0) {
     default:
      label$7 : while (1) {
       label$8 : {
        if ((HEAPU8[$8_1 >> 0] | 0 | 0) != (45 | 0)) {
         break label$8
        }
        if (HEAPU8[($8_1 + 1 | 0) >> 0] | 0) {
         break label$4
        }
       }
       $9_1 = $9_1 + 1 | 0;
       if (($9_1 | 0) == ($0_1 | 0)) {
        break label$3
       }
       $8_1 = HEAP32[($1_1 + ($9_1 << 2 | 0) | 0) >> 2] | 0;
       if ($8_1) {
        continue label$7
       }
       break label$3;
      };
     case 0:
     case 2:
      break label$5;
     };
    }
    return $84($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
   }
   HEAP32[(0 + 31712 | 0) >> 2] = $9_1;
   $7_1 = $84($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
   if (($9_1 | 0) <= ($6_1 | 0)) {
    break label$3
   }
   $0_1 = 1;
   label$9 : {
    $8_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
    $9_1 = $8_1 - $9_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$9
    }
    $85($1_1 | 0, $6_1 | 0, $8_1 + -1 | 0 | 0);
    if (($9_1 | 0) == (1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     $85($1_1 | 0, $6_1 | 0, (HEAP32[(0 + 31712 | 0) >> 2] | 0) + -1 | 0 | 0);
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) != ($9_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   HEAP32[(0 + 31712 | 0) >> 2] = $9_1 + $6_1 | 0;
  }
  return $7_1 | 0;
 }
 
 function $84($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $13_1 = 0, $14_1 = 0, $12_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $15_1 = 0, $9_1 = 0, $11_1 = 0, $65_1 = 0;
  HEAP32[(0 + 34072 | 0) >> 2] = 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $6_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
   $7_1 = HEAP32[($1_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (45 | 0)) {
    break label$1
   }
   $8_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
   label$2 : {
    label$3 : {
     if (!$5_1) {
      break label$3
     }
     if ($8_1 & 255 | 0) {
      break label$2
     }
     break label$1;
    }
    $5_1 = $8_1 & 255 | 0;
    $8_1 = 45;
    if (($5_1 | 0) != (45 | 0)) {
     break label$1
    }
    if (!(HEAPU8[($7_1 + 2 | 0) >> 0] | 0)) {
     break label$1
    }
   }
   $5_1 = HEAPU8[$2_1 >> 0] | 0;
   $9_1 = HEAPU8[($2_1 + (($5_1 | 0) == (43 | 0) | ($5_1 | 0) == (45 | 0) | 0) | 0) >> 0] | 0;
   label$4 : {
    label$5 : {
     $5_1 = HEAP32[$3_1 >> 2] | 0;
     if ($5_1) {
      break label$5
     }
     $10_1 = 0;
     break label$4;
    }
    $11_1 = $7_1 + (($8_1 & 255 | 0 | 0) == (45 | 0) ? 2 : 1) | 0;
    $10_1 = 0;
    $12_1 = 0;
    label$6 : {
     label$7 : while (1) {
      $13_1 = $11_1;
      label$8 : {
       label$9 : {
        $14_1 = HEAPU8[$5_1 >> 0] | 0;
        if (!$14_1) {
         break label$9
        }
        label$10 : while (1) {
         label$11 : {
          $65_1 = $14_1 & 255 | 0;
          $14_1 = HEAPU8[$13_1 >> 0] | 0;
          if (($65_1 | 0) == ($14_1 | 0)) {
           break label$11
          }
          $5_1 = 0;
          break label$8;
         }
         $13_1 = $13_1 + 1 | 0;
         $14_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
         if ($14_1) {
          continue label$10
         }
         break label$10;
        };
       }
       $14_1 = HEAPU8[$13_1 >> 0] | 0;
       $5_1 = 1;
      }
      label$12 : {
       label$13 : {
        $14_1 = $14_1 & 255 | 0;
        if (($14_1 | 0) == (61 | 0)) {
         break label$13
        }
        if ($14_1) {
         break label$12
        }
       }
       label$14 : {
        if (!$5_1) {
         break label$14
        }
        $15_1 = $12_1;
        break label$6;
       }
       $10_1 = $10_1 + 1 | 0;
       $15_1 = $12_1;
      }
      $12_1 = $12_1 + 1 | 0;
      $5_1 = HEAP32[($3_1 + ($12_1 << 4 | 0) | 0) >> 2] | 0;
      if ($5_1) {
       continue label$7
      }
      break label$7;
     };
     if (($10_1 | 0) != (1 | 0)) {
      break label$4
     }
    }
    $12_1 = $6_1 + 1 | 0;
    HEAP32[(0 + 31712 | 0) >> 2] = $12_1;
    $5_1 = $3_1 + ($15_1 << 4 | 0) | 0;
    HEAP32[(0 + 34076 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $14_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    label$15 : {
     label$16 : {
      label$17 : {
       if ((HEAPU8[$13_1 >> 0] | 0 | 0) != (61 | 0)) {
        break label$17
       }
       label$18 : {
        if ($14_1) {
         break label$18
        }
        $13_1 = 63;
        if (($9_1 & 255 | 0 | 0) == (58 | 0)) {
         break label$15
        }
        if (!(HEAP32[(0 + 31716 | 0) >> 2] | 0)) {
         break label$15
        }
        $5_1 = HEAP32[$5_1 >> 2] | 0;
        $80(HEAP32[$1_1 >> 2] | 0 | 0, 1844 | 0, $5_1 | 0, $11($5_1 | 0) | 0 | 0);
        return 63 | 0;
       }
       HEAP32[(0 + 34072 | 0) >> 2] = $13_1 + 1 | 0;
       break label$16;
      }
      if (($14_1 | 0) != (1 | 0)) {
       break label$16
      }
      $13_1 = HEAP32[($1_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
      HEAP32[(0 + 34072 | 0) >> 2] = $13_1;
      label$19 : {
       if ($13_1) {
        break label$19
       }
       $13_1 = 58;
       if (($9_1 & 255 | 0 | 0) == (58 | 0)) {
        break label$15
       }
       $13_1 = 63;
       if (!(HEAP32[(0 + 31716 | 0) >> 2] | 0)) {
        break label$15
       }
       $5_1 = HEAP32[$5_1 >> 2] | 0;
       $80(HEAP32[$1_1 >> 2] | 0 | 0, 1881 | 0, $5_1 | 0, $11($5_1 | 0) | 0 | 0);
       return 63 | 0;
      }
      HEAP32[(0 + 31712 | 0) >> 2] = $6_1 + 2 | 0;
     }
     $5_1 = $5_1 + 12 | 0;
     label$20 : {
      if (!$4_1) {
       break label$20
      }
      HEAP32[$4_1 >> 2] = $15_1;
     }
     $13_1 = HEAP32[$5_1 >> 2] | 0;
     $5_1 = HEAP32[(($3_1 + ($15_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$15
     }
     HEAP32[$5_1 >> 2] = $13_1;
     $13_1 = 0;
    }
    return $13_1 | 0;
   }
   if (($8_1 & 255 | 0 | 0) != (45 | 0)) {
    break label$1
   }
   label$21 : {
    if (($9_1 & 255 | 0 | 0) == (58 | 0)) {
     break label$21
    }
    if (!(HEAP32[(0 + 31716 | 0) >> 2] | 0)) {
     break label$21
    }
    $5_1 = $7_1 + 2 | 0;
    $80(HEAP32[$1_1 >> 2] | 0 | 0, ($10_1 ? 1913 : 1937) | 0, $5_1 | 0, $11($5_1 | 0) | 0 | 0);
    $6_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
   }
   HEAP32[(0 + 31712 | 0) >> 2] = $6_1 + 1 | 0;
   return 63 | 0;
  }
  return $81($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $85($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = HEAP32[($0_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) <= ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $15_1 = $0_1 + ($2_1 << 2 | 0) | 0;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[$15_1 >> 2] = HEAP32[($0_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
    if (($2_1 | 0) > ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[($0_1 + ($1_1 << 2 | 0) | 0) >> 2] = $3_1;
 }
 
 function $86($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $62(HEAP32[(0 + 1032 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $87($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $63(HEAP32[(0 + 1032 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $88($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($31($1_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $76($1_1 | 0, $0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    break label$4;
   }
   $2_1 = $76($1_1 | 0, $0_1 | 0) | 0;
  }
  $32($1_1 | 0);
  return $2_1 | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  return $88($0_1 | 0, HEAP32[(0 + 1032 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $90($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (!$5_1) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $91($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $92($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $91($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $93($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = 1961;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $2_1 = ($11($0_1 | 0) | 0) + -1 | 0;
     if ($2_1) {
      break label$3
     }
     $1_1 = 0;
     break label$2;
    }
    label$4 : while (1) {
     label$5 : {
      $3_1 = $0_1 + $2_1 | 0;
      if ((HEAPU8[$3_1 >> 0] | 0 | 0) == (47 | 0)) {
       break label$5
      }
      $1_1 = $2_1;
      break label$2;
     }
     $1_1 = 0;
     HEAP8[$3_1 >> 0] = 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$4
     }
     break label$4;
    };
   }
   label$6 : {
    label$7 : while (1) {
     $2_1 = $1_1;
     if (!$2_1) {
      break label$6
     }
     $1_1 = $2_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $1_1 | 0) >> 0] | 0 | 0) != (47 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   $1_1 = $0_1 + $2_1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $94($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $4($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $95($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $4($4_1 + 8 | 0 | 0, 1968 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $62($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $96($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $4($4_1 + 8 | 0 | 0, 1968 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $63($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $97($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $95($0_1 | 0, 2147483647 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $98($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $96($0_1 | 0, 2147483647 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $99($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $97($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $100($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : while (1) {
   $1_1 = $0_1;
   $0_1 = $1_1 + 1 | 0;
   if ($101(HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  $2_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $5_1 = HEAP8[$1_1 >> 0] | 0;
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
      break label$3;
     case 2:
      break label$4;
     default:
      break label$2;
     };
    }
    $3_1 = 1;
   }
   $5_1 = HEAP8[$0_1 >> 0] | 0;
   $1_1 = $0_1;
   $4_1 = $3_1;
  }
  label$5 : {
   if (!($42($5_1 | 0) | 0)) {
    break label$5
   }
   label$6 : while (1) {
    $2_1 = (Math_imul($2_1, 10) - (HEAP8[$1_1 >> 0] | 0) | 0) + 48 | 0;
    $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($42($0_1 | 0) | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return ($4_1 ? $2_1 : 0 - $2_1 | 0) | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = $0_1 + -3 | 0;
   if ($0_1 >>> 0 > 5 >>> 0) {
    break label$1
   }
   return HEAP32[(($0_1 << 2 | 0) + 2988 | 0) >> 2] | 0 | 0;
  }
  return 1 | 0;
 }
 
 function $104($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $2$hi = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $8$hi = 0, $13$hi = 0;
  i64toi32_i32$0 = $0$hi;
  $3_1 = $0_1;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $2_1 = i64toi32_i32$1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$3 = $0_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_srem($0_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$2;
  $2$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $13$hi = i64toi32_i32$4;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$2 = !(i64toi32_i32$3 | i64toi32_i32$2 | 0);
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$3 = i64toi32_i32$2 ? $3_1 : i64toi32_i32$1;
  i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$3 | 0;
 }
 
 function $105($0_1, $0$hi, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $4_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = 0;
  $4_1 = $103($1_1 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = __wasm_i64_srem($0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
  $0_1 = i64toi32_i32$4;
  $0$hi = i64toi32_i32$5;
  i64toi32_i32$2 = $2_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $15_1 = $3_1;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$0 = $15_1;
  HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $106($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $8$hi = 0, $9$hi = 0, $6_1 = 0, $9_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $7_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $35_1 = 0, $34_1 = 0, $34$hi = 0, $62_1 = 0, $62$hi = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $2$hi;
  $6_1 = ($0_1 + ($1_1 << 2 | 0) | 0) + 176 | 0;
  $105($2_1 | 0, i64toi32_i32$0 | 0, HEAP32[((HEAP32[$6_1 >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0, $5_1 + 16 | 0 | 0);
  label$1 : {
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   $34_1 = i64toi32_i32$1;
   $34$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$1 = $34$hi;
   i64toi32_i32$3 = $34_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $23_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      $24_1 = 0
     } else {
      $24_1 = 1
     }
     $25_1 = $24_1;
    } else {
     $25_1 = 0
    }
    $23_1 = $25_1;
   }
   if ($23_1) {
    break label$1
   }
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$2 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$2;
   $9$hi = i64toi32_i32$0;
   label$2 : while (1) {
    i64toi32_i32$0 = $8$hi;
    HEAP32[((HEAP32[$6_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] = 0;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $8_1 = i64toi32_i32$4;
    $8$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9_1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
     $26_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $27_1 = 0
      } else {
       $27_1 = 1
      }
      $28_1 = $27_1;
     } else {
      $28_1 = 0
     }
     $26_1 = $28_1;
    }
    if ($26_1) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$0 = $2$hi;
  $7_1 = ($3_1 | 0) == (7 | 0) ? 6 : $3_1;
  $105($2_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, $5_1 + 8 | 0 | 0, $5_1 | 0);
  label$3 : {
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $62_1 = i64toi32_i32$5;
   $62$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$5 = $62$hi;
   i64toi32_i32$3 = $62_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break label$3
   }
   $0_1 = ($0_1 + ($1_1 << 2 | 0) | 0) + 192 | 0;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   label$4 : while (1) {
    i64toi32_i32$0 = $8$hi;
    $3_1 = $8_1 << 2 | 0;
    HEAP32[((HEAP32[$6_1 >> 2] | 0) + $3_1 | 0) >> 2] = $7_1;
    label$5 : {
     if (!$4_1) {
      break label$5
     }
     HEAP32[((HEAP32[$0_1 >> 2] | 0) + $3_1 | 0) >> 2] = 1;
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $8_1 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$0 = $8_1;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$5 = $9_1;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
     $32_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $33_1 = 0
      } else {
       $33_1 = 1
      }
      $35_1 = $33_1;
     } else {
      $35_1 = 0
     }
     $32_1 = $35_1;
    }
    if ($32_1) {
     continue label$4
    }
    break label$4;
   };
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $107($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$5 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $4_1 = 0, $5$hi = 0, i64toi32_i32$4 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = $0_1 + ($1_1 << 2 | 0) | 0;
  $0_1 = $3_1 + 160 | 0;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $5($2_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1_1 = $3_1 + 176 | 0;
  $4_1 = $2_1 << 2 | 0;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $5($4_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $3_1 = $3_1 + 192 | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $5($4_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $5_1 = $2_1;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    $2_1 = $6_1;
    HEAP8[((HEAP32[$0_1 >> 2] | 0) + $2_1 | 0) >> 0] = 0;
    $2_1 = $2_1 << 2 | 0;
    HEAP32[((HEAP32[$1_1 >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$3_1 >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = $6_1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + 0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = $5_1;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != ($5$hi | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $108($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $4$hi = 0, i64toi32_i32$4 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $0_1 + ($1_1 << 5 | 0) | 0;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 < 2 >>> 0) {
      break label$3
     }
     $3_1 = 1;
     HEAP32[($2_1 + 16 | 0) >> 2] = ($1_1 | 0) == (3 | 0) ? 1 : 8;
     break label$2;
    }
    $3_1 = $2_1 + 16 | 0;
    label$4 : {
     if (($1_1 | 0) != (1 | 0)) {
      break label$4
     }
     HEAP32[$3_1 >> 2] = 4;
     $3_1 = 0;
     break label$2;
    }
    HEAP32[$3_1 >> 2] = 1;
    $3_1 = 2;
   }
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   $3_1 = $1_1 << 2 | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 2112 | 0) >> 2] | 0;
   $2_1 = 0;
   $3_1 = $0_1 + $3_1 | 0;
   HEAP32[($3_1 + 176 | 0) >> 2] = 0;
   HEAP32[($3_1 + 160 | 0) >> 2] = 0;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (4 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$5 : while (1) {
   label$6 : {
    if ($2_1 >>> 0 < 2 >>> 0) {
     break label$6
    }
    $107($0_1 | 0, $2_1 | 0, HEAP32[(($2_1 << 2 | 0) + 31728 | 0) >> 2] | 0 | 0);
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (4 | 0)) {
    continue label$5
   }
   break label$5;
  };
  $2_1 = $5(147456 | 0) | 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = 0;
  $4_1 = 0;
  $4$hi = i64toi32_i32$0;
  label$7 : while (1) {
   i64toi32_i32$0 = $4$hi;
   $1_1 = $2_1 + Math_imul($4_1, 144) | 0;
   HEAP8[($1_1 + 10 | 0) >> 0] = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 1;
   HEAP8[$1_1 >> 0] = 0;
   HEAP16[($1_1 + 12 | 0) >> 1] = 0;
   HEAP16[($1_1 + 8 | 0) >> 1] = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = $4_1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = 1024;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (0 | 0) | 0) {
    continue label$7
   }
   break label$7;
  };
 }
 
 function $109($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $9$hi = 0, $13$hi = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     $3_1 = $0_1 + ($2_1 << 5 | 0) | 0;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $9$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $11_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $12_1 = 0
       } else {
        $12_1 = 1
       }
       $13_1 = $12_1;
      } else {
       $13_1 = 0
      }
      $11_1 = $13_1;
     }
     if ($11_1) {
      break label$3
     }
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $14_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $15_1 = 0
       } else {
        $15_1 = 1
       }
       $16_1 = $15_1;
      } else {
       $16_1 = 0
      }
      $14_1 = $16_1;
     }
     if ($14_1) {
      break label$1
     }
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != (4 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = 5;
  }
  return $2_1 | 0;
 }
 
 function $110($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $21_1 = 0, $32_1 = 0, $38_1 = 0, $49_1 = 0, $55_1 = 0, $66_1 = 0, $72_1 = 0, $83_1 = 0, $100_1 = 0, $125_1 = 0, $126_1 = 0, $158_1 = 0, $163$hi = 0, $170_1 = 0, $175$hi = 0, $182_1 = 0, $187$hi = 0, $194_1 = 0, $199$hi = 0, $206_1 = 0, $211$hi = 0, $218_1 = 0, $223$hi = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          switch ($4_1 | 0) {
          case 1:
          case 2:
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$2 = (HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0) + $3_1 | 0;
           i64toi32_i32$0 = HEAP8[i64toi32_i32$2 >> 0] | 0;
           i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
           $21_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $0_1;
           HEAP32[i64toi32_i32$0 >> 2] = $21_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           break label$7;
          case 3:
           i64toi32_i32$1 = $3$hi;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
           if (!!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
            break label$6
           }
           $32_1 = HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$2 = 0;
           i64toi32_i32$2 = __wasm_i64_sdiv($3_1 | 0, i64toi32_i32$0 | 0, 2 | 0, i64toi32_i32$2 | 0) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           i64toi32_i32$1 = $32_1 + (i64toi32_i32$2 << 1 | 0) | 0;
           i64toi32_i32$0 = HEAP16[i64toi32_i32$1 >> 1] | 0;
           i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
           $38_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $0_1;
           HEAP32[i64toi32_i32$0 >> 2] = $38_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
           break label$7;
          case 4:
           i64toi32_i32$2 = $3$hi;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 3;
           i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
           if (!!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
            break label$5
           }
           $49_1 = HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$1 = 0;
           i64toi32_i32$1 = __wasm_i64_sdiv($3_1 | 0, i64toi32_i32$0 | 0, 4 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           i64toi32_i32$2 = $49_1 + (i64toi32_i32$1 << 2 | 0) | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
           $55_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $0_1;
           HEAP32[i64toi32_i32$0 >> 2] = $55_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           break label$7;
          case 5:
           i64toi32_i32$1 = $3$hi;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 7;
           i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
           if (!!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
            break label$4
           }
           $66_1 = HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$2 = 0;
           i64toi32_i32$2 = __wasm_i64_sdiv($3_1 | 0, i64toi32_i32$0 | 0, 8 | 0, i64toi32_i32$2 | 0) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           i64toi32_i32$1 = $66_1 + (i64toi32_i32$2 << 3 | 0) | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
           $72_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $0_1;
           HEAP32[i64toi32_i32$0 >> 2] = $72_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
           break label$7;
          case 6:
           i64toi32_i32$2 = $3$hi;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 3;
           i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
           if (!!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
            break label$3
           }
           $83_1 = HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$1 = 0;
           i64toi32_i32$1 = __wasm_i64_sdiv($3_1 | 0, i64toi32_i32$0 | 0, 4 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           HEAPF32[$0_1 >> 2] = Math_fround(HEAPF32[($83_1 + (i64toi32_i32$1 << 2 | 0) | 0) >> 2]);
           break label$7;
          case 8:
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 7;
           i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
           if (!!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
            break label$2
           }
           $100_1 = HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$1 = $3$hi;
           i64toi32_i32$2 = 0;
           i64toi32_i32$2 = __wasm_i64_sdiv($3_1 | 0, i64toi32_i32$1 | 0, 8 | 0, i64toi32_i32$2 | 0) | 0;
           i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
           HEAPF64[$0_1 >> 3] = +HEAPF64[($100_1 + (i64toi32_i32$2 << 3 | 0) | 0) >> 3];
           break label$7;
          case 7:
           i64toi32_i32$1 = $3$hi;
           i64toi32_i32$0 = $3_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 7;
           i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
           if (!!(i64toi32_i32$0 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
            break label$1
           }
           $4_1 = HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$2 = $3$hi;
           i64toi32_i32$0 = 0;
           i64toi32_i32$0 = __wasm_i64_sdiv($3_1 | 0, i64toi32_i32$2 | 0, 4 | 0, i64toi32_i32$0 | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
           HEAPF32[$0_1 >> 2] = Math_fround(HEAPF32[($4_1 + (i64toi32_i32$0 << 2 | 0) | 0) >> 2]);
           $125_1 = $0_1;
           $126_1 = $4_1;
           i64toi32_i32$2 = $3$hi;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 4;
           i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           i64toi32_i32$1 = 0;
           i64toi32_i32$1 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 4 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
           HEAPF32[($125_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($126_1 + (i64toi32_i32$1 << 2 | 0) | 0) >> 2]);
           break label$7;
          default:
           HEAP32[($6_1 + 8 | 0) >> 2] = 384;
           HEAP32[($6_1 + 4 | 0) >> 2] = 2365;
           HEAP32[$6_1 >> 2] = 2308;
           $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
           $64($1_1 | 0, 2273 | 0, $6_1 | 0) | 0;
           $35(2386 | 0, 34 | 0, 1 | 0, $1_1 | 0) | 0;
           fimport$9(1 | 0);
           abort();
          case 0:
           break label$8;
          };
         }
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$5 = 0;
         HEAP32[i64toi32_i32$1 >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
        }
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$5 = $3$hi;
        HEAP32[$5_1 >> 2] = HEAP32[((HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 192 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] | 0;
        global$0 = $6_1 + 112 | 0;
        return;
       }
       $158_1 = $6_1;
       i64toi32_i32$2 = $1_1 + ($2_1 << 5 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $163$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $163$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$0 = i64toi32_i32$2 + $3_1 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + $3$hi | 0;
       if (i64toi32_i32$0 >>> 0 < $3_1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       i64toi32_i32$2 = $158_1;
       HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$4;
       $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2213 | 0, $6_1 + 16 | 0 | 0) | 0;
       fimport$9(1 | 0);
       abort();
      }
      $170_1 = $6_1;
      i64toi32_i32$1 = $1_1 + ($2_1 << 5 | 0) | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $175$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $175$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$5 = i64toi32_i32$1 + $3_1 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + $3$hi | 0;
      if (i64toi32_i32$5 >>> 0 < $3_1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$1 = $170_1;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$5;
      HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
      $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2153 | 0, $6_1 + 32 | 0 | 0) | 0;
      fimport$9(1 | 0);
      abort();
     }
     $182_1 = $6_1;
     i64toi32_i32$2 = $1_1 + ($2_1 << 5 | 0) | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $187$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $187$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $182_1;
     HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$5;
     $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2153 | 0, $6_1 + 48 | 0 | 0) | 0;
     fimport$9(1 | 0);
     abort();
    }
    $194_1 = $6_1;
    i64toi32_i32$1 = $1_1 + ($2_1 << 5 | 0) | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $199$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $199$hi;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 + $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + $3$hi | 0;
    if (i64toi32_i32$0 >>> 0 < $3_1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$1 = $194_1;
    HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$4;
    $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2153 | 0, $6_1 + 64 | 0 | 0) | 0;
    fimport$9(1 | 0);
    abort();
   }
   $206_1 = $6_1;
   i64toi32_i32$2 = $1_1 + ($2_1 << 5 | 0) | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $211$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $211$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$5 = i64toi32_i32$2 + $3_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + $3$hi | 0;
   if (i64toi32_i32$5 >>> 0 < $3_1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   i64toi32_i32$2 = $206_1;
   HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] = i64toi32_i32$5;
   HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] = i64toi32_i32$0;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2153 | 0, $6_1 + 80 | 0 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  $218_1 = $6_1;
  i64toi32_i32$1 = $1_1 + ($2_1 << 5 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $223$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$2 = $223$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$4 = i64toi32_i32$1 + $3_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = $218_1;
  HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = i64toi32_i32$5;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2213 | 0, $6_1 + 96 | 0 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $111($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $8_1 = 0, $10$hi = 0, i64toi32_i32$5 = 0, $9_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $10_1 = 0, $29$hi = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $2$hi;
    $8_1 = $109($1_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
    if ($8_1 >>> 0 < 2 >>> 0) {
     break label$2
    }
    label$3 : {
     $9_1 = $1_1 + ($8_1 << 5 | 0) | 0;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $19_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $20_1 = 0
       } else {
        $20_1 = 1
       }
       $21_1 = $20_1;
      } else {
       $21_1 = 0
      }
      $19_1 = $21_1;
     }
     if ($19_1) {
      break label$3
     }
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
     $29$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     if ((i64toi32_i32$1 | 0) > ($2$hi | 0)) {
      $22_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $23_1 = 0
       } else {
        $23_1 = 1
       }
       $24_1 = $23_1;
      } else {
       $24_1 = 0
      }
      $22_1 = $24_1;
     }
     if ($22_1) {
      break label$1
     }
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 24 | 0) >> 2] = $5_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$3;
    $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2421 | 0, i64toi32_i32$1 + 16 | 0 | 0) | 0;
    fimport$9(1 | 0);
    abort();
   }
   HEAP32[($7_1 + 12 | 0) >> 2] = $6_1;
   HEAP32[($7_1 + 8 | 0) >> 2] = $5_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[i64toi32_i32$1 >> 2] = $2_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2421 | 0, i64toi32_i32$1 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  i64toi32_i32$3 = $2$hi;
  i64toi32_i32$3 = $10$hi;
  i64toi32_i32$3 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
  $110($0_1 | 0, $1_1 | 0, $8_1 | 0, i64toi32_i32$0 - i64toi32_i32$2 | 0 | 0, i64toi32_i32$5 | 0, $3_1 | 0, $4_1 | 0);
  global$0 = $7_1 + 32 | 0;
 }
 
 function $112($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $7_1 = 0, $8_1 = 0, $23_1 = 0, $28_1 = 0, $40_1 = 0, $45_1 = 0, $57_1 = 0, $62_1 = 0, $64_1 = 0, $74_1 = 0, $91_1 = 0, $109_1 = 0, $152_1 = 0, $157$hi = 0, $164_1 = 0, $169$hi = 0, $176_1 = 0, $181$hi = 0, $188_1 = 0, $193$hi = 0, $200_1 = 0, $205$hi = 0, $212_1 = 0, $217$hi = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          switch ($4_1 + -1 | 0 | 0) {
          case 2:
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$2 = $2_1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
           if (!!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
            break label$6
           }
           $23_1 = HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$1 = $2$hi;
           i64toi32_i32$2 = 0;
           i64toi32_i32$2 = __wasm_i64_sdiv($2_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$2 | 0) | 0;
           i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
           $28_1 = $23_1 + (i64toi32_i32$2 << 1 | 0) | 0;
           i64toi32_i32$0 = $3_1;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           HEAP16[$28_1 >> 1] = i64toi32_i32$1;
           break label$7;
          case 3:
           i64toi32_i32$2 = $2$hi;
           i64toi32_i32$0 = $2_1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 3;
           i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
           if (!!(i64toi32_i32$0 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
            break label$5
           }
           $40_1 = HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$1 = $2$hi;
           i64toi32_i32$0 = 0;
           i64toi32_i32$0 = __wasm_i64_sdiv($2_1 | 0, i64toi32_i32$1 | 0, 4 | 0, i64toi32_i32$0 | 0) | 0;
           i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
           $45_1 = $40_1 + (i64toi32_i32$0 << 2 | 0) | 0;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           HEAP32[$45_1 >> 2] = i64toi32_i32$1;
           break label$7;
          case 4:
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$2 = $2_1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 7;
           i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
           if (!!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
            break label$4
           }
           $57_1 = HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$1 = $2$hi;
           i64toi32_i32$2 = 0;
           i64toi32_i32$2 = __wasm_i64_sdiv($2_1 | 0, i64toi32_i32$1 | 0, 8 | 0, i64toi32_i32$2 | 0) | 0;
           i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
           $62_1 = $57_1 + (i64toi32_i32$2 << 3 | 0) | 0;
           i64toi32_i32$0 = $3_1;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $64_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $62_1;
           HEAP32[i64toi32_i32$1 >> 2] = $64_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           break label$7;
          case 5:
           i64toi32_i32$2 = $2$hi;
           i64toi32_i32$0 = $2_1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 3;
           i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
           if (!!(i64toi32_i32$0 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
            break label$3
           }
           $74_1 = HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$1 = $2$hi;
           i64toi32_i32$0 = 0;
           i64toi32_i32$0 = __wasm_i64_sdiv($2_1 | 0, i64toi32_i32$1 | 0, 4 | 0, i64toi32_i32$0 | 0) | 0;
           i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
           HEAPF32[($74_1 + (i64toi32_i32$0 << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[$3_1 >> 2]);
           break label$7;
          case 7:
           i64toi32_i32$1 = $2$hi;
           i64toi32_i32$2 = $2_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 7;
           i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
           if (!!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
            break label$2
           }
           $91_1 = HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0;
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$2 = 0;
           i64toi32_i32$2 = __wasm_i64_sdiv($2_1 | 0, i64toi32_i32$0 | 0, 8 | 0, i64toi32_i32$2 | 0) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           HEAPF64[($91_1 + (i64toi32_i32$2 << 3 | 0) | 0) >> 3] = +HEAPF64[$3_1 >> 3];
           break label$7;
          case 6:
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$1 = $2_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 7;
           i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
           if (!!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
            break label$1
           }
           $7_1 = ($0_1 + ($1_1 << 2 | 0) | 0) + 160 | 0;
           $109_1 = HEAP32[$7_1 >> 2] | 0;
           i64toi32_i32$2 = $2$hi;
           i64toi32_i32$1 = 0;
           i64toi32_i32$1 = __wasm_i64_sdiv($2_1 | 0, i64toi32_i32$2 | 0, 4 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
           $8_1 = i64toi32_i32$1 << 2 | 0;
           HEAPF32[($109_1 + $8_1 | 0) >> 2] = Math_fround(HEAPF32[$3_1 >> 2]);
           HEAPF32[(($8_1 + (HEAP32[$7_1 >> 2] | 0) | 0) + 4 | 0) >> 2] = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
           break label$7;
          default:
           HEAP32[($6_1 + 8 | 0) >> 2] = 503;
           HEAP32[($6_1 + 4 | 0) >> 2] = 2558;
           HEAP32[$6_1 >> 2] = 2308;
           $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
           $64($1_1 | 0, 2273 | 0, $6_1 | 0) | 0;
           $35(2583 | 0, 36 | 0, 1 | 0, $1_1 | 0) | 0;
           fimport$9(1 | 0);
           abort();
          case 0:
          case 1:
           break label$8;
          };
         }
         i64toi32_i32$2 = $2$hi;
         i64toi32_i32$0 = $3_1;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         HEAP8[((HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 160 | 0) >> 2] | 0) + $2_1 | 0) >> 0] = i64toi32_i32$2;
        }
        i64toi32_i32$1 = $2$hi;
        $106($0_1 | 0, $1_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, $5_1 | 0);
        global$0 = $6_1 + 112 | 0;
        return;
       }
       $152_1 = $6_1;
       i64toi32_i32$0 = $0_1 + ($1_1 << 5 | 0) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $157$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $157$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$4 = i64toi32_i32$0 + $2_1 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < $2_1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$0 = $152_1;
       HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
       $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2496 | 0, $6_1 + 16 | 0 | 0) | 0;
       fimport$9(1 | 0);
       abort();
      }
      $164_1 = $6_1;
      i64toi32_i32$2 = $0_1 + ($1_1 << 5 | 0) | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $169$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $169$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = i64toi32_i32$2 + $2_1 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + $2$hi | 0;
      if (i64toi32_i32$1 >>> 0 < $2_1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = $164_1;
      HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] = i64toi32_i32$4;
      $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2496 | 0, $6_1 + 32 | 0 | 0) | 0;
      fimport$9(1 | 0);
      abort();
     }
     $176_1 = $6_1;
     i64toi32_i32$0 = $0_1 + ($1_1 << 5 | 0) | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $181$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $181$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$0 + $2_1 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + $2$hi | 0;
     if (i64toi32_i32$5 >>> 0 < $2_1 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$0 = $176_1;
     HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$5;
     HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
     $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2496 | 0, $6_1 + 48 | 0 | 0) | 0;
     fimport$9(1 | 0);
     abort();
    }
    $188_1 = $6_1;
    i64toi32_i32$2 = $0_1 + ($1_1 << 5 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $193$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $193$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$4 = i64toi32_i32$2 + $2_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < $2_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $188_1;
    HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] = i64toi32_i32$5;
    $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2496 | 0, $6_1 + 64 | 0 | 0) | 0;
    fimport$9(1 | 0);
    abort();
   }
   $200_1 = $6_1;
   i64toi32_i32$0 = $0_1 + ($1_1 << 5 | 0) | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $205$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $205$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$0 + $2_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + $2$hi | 0;
   if (i64toi32_i32$1 >>> 0 < $2_1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$0 = $200_1;
   HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] = i64toi32_i32$4;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2496 | 0, $6_1 + 80 | 0 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  $212_1 = $6_1;
  i64toi32_i32$2 = $0_1 + ($1_1 << 5 | 0) | 0;
  i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $217$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $217$hi;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$5 = i64toi32_i32$2 + $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 + $2$hi | 0;
  if (i64toi32_i32$5 >>> 0 < $2_1 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$2 = $212_1;
  HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] = i64toi32_i32$1;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2496 | 0, $6_1 + 96 | 0 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $113($0_1, $1_1, $1$hi, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $6_1 = 0, $8$hi = 0, $7_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $8_1 = 0, $27$hi = 0, $52_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    $6_1 = $109($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
    if ($6_1 >>> 0 < 2 >>> 0) {
     break label$2
    }
    label$3 : {
     $7_1 = $0_1 + ($6_1 << 5 | 0) | 0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $8_1 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $18_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $19_1 = 0
       } else {
        $19_1 = 1
       }
       $20_1 = $19_1;
      } else {
       $20_1 = 0
      }
      $18_1 = $20_1;
     }
     if ($18_1) {
      break label$3
     }
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
     $27$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     if ((i64toi32_i32$1 | 0) > ($1$hi | 0)) {
      $21_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $22_1 = 0
       } else {
        $22_1 = 1
       }
       $23_1 = $22_1;
      } else {
       $23_1 = 0
      }
      $21_1 = $23_1;
     }
     if ($21_1) {
      break label$1
     }
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 541;
    HEAP32[($5_1 + 24 | 0) >> 2] = 2308;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $5_1;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$3;
    $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2620 | 0, i64toi32_i32$1 + 16 | 0 | 0) | 0;
    fimport$9(1 | 0);
    abort();
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $5_1;
   HEAP32[i64toi32_i32$1 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2697 | 0, i64toi32_i32$1 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$3 = $8$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = $1$hi - i64toi32_i32$5 | 0;
  $1_1 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
  $1$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$5 = $1$hi;
  $114($0_1 | 0, $6_1 | 0, $1_1 | 0, $1$hi | 0, $3_1 | 0);
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$5;
  i64toi32_i32$5 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $52_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $1$hi;
  $112($0_1 | 0, $6_1 | 0, $1_1 | 0, $1$hi | 0, $5_1 + 40 | 0 | 0, $3_1 | 0, $4_1 | 0);
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $1$hi;
  $114($0_1 | 0, $6_1 | 0, $1_1 | 0, $1$hi | 0, $3_1 | 0);
  global$0 = $5_1 + 48 | 0;
 }
 
 function $114($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = $2$hi;
  $105($2_1 | 0, i64toi32_i32$0 | 0, HEAP32[((HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 176 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0, $4_1 + 24 | 0 | 0, $4_1 + 16 | 0 | 0);
  $105($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $4_1 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $115($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $18_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = $3$hi & i64toi32_i32$1 | 0;
   if (!(i64toi32_i32$2 & 3 | 0 | i64toi32_i32$1 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $4_1;
   HEAP32[i64toi32_i32$2 >> 2] = $3_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2758 | 0, i64toi32_i32$2 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  $18_1 = HEAP32[($1_1 + 208 | 0) >> 2] | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_i64_sdiv($3_1 | 0, i64toi32_i32$1 | 0, 4 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $4($0_1 | 0, $18_1 + Math_imul(i64toi32_i32$2, 144) | 0 | 0, 144 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $116($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $18_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   i64toi32_i32$0 = $2$hi;
   if (($109($1_1 | 0, $2_1 | 0, $2$hi | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   i64toi32_i32$3 = $18_1;
   i64toi32_i32$5 = ($2_1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = $2$hi - i64toi32_i32$5 | 0;
   $115($0_1 | 0, $1_1 | 0, $1_1 | 0, $2_1 - i64toi32_i32$3 | 0 | 0, i64toi32_i32$5 | 0);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = $2$hi;
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2$hi;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2829 | 0, $5_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $117($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = $2$hi & i64toi32_i32$1 | 0;
   if (!(i64toi32_i32$2 & 3 | 0 | i64toi32_i32$1 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = $4_1;
   HEAP32[i64toi32_i32$2 >> 2] = $2_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 2912 | 0, i64toi32_i32$2 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  $17_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_i64_sdiv($2_1 | 0, i64toi32_i32$1 | 0, 4 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $4($17_1 + Math_imul(i64toi32_i32$2, 144) | 0 | 0, $3_1 | 0, 144 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $118($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 ^ $0_1 | 0) & 3 | 0) {
      break label$3
     }
     $3_1 = ($2_1 | 0) != (0 | 0);
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      if (!($1_1 & 3 | 0)) {
       break label$4
      }
      label$5 : while (1) {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       if (!$3_1) {
        break label$1
       }
       $0_1 = $0_1 + 1 | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = ($2_1 | 0) != (0 | 0);
       if (!$2_1) {
        break label$4
       }
       if ($1_1 & 3 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3_1) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     label$6 : while (1) {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$3
      }
      HEAP32[$0_1 >> 2] = $3_1;
      $0_1 = $0_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$2
    }
    label$7 : while (1) {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     HEAP8[$0_1 >> 0] = $3_1;
     if (!$3_1) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$7
     }
     break label$7;
    };
   }
   $2_1 = 0;
  }
  $3($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $119($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $118($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  return ($121($0_1 | 0) | 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $124($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($123($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $125($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21_1 = $3_1 + $1_1 | 0;
  $22_1 = $2_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15_1 = 0
    } else {
     $15_1 = 1
    }
    $16_1 = $15_1;
   } else {
    $16_1 = 0
   }
   $14_1 = $16_1;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17_1 + 104 | 0) >> 2] = ($1_1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14_1 ? $21_1 : $22_1) : $2_1;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $11$hi = 0, $30_1 = 0, $30$hi = 0, $38_1 = 0, $38$hi = 0, $50_1 = 0, $52_1 = 0, $52$hi = 0, $57_1 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$2
     }
    }
    $1_1 = $124($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$4 : {
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $3_1 = $2_1;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$5;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2_1 - $4_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38_1 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   if ($26_1) {
    break label$4
   }
   i64toi32_i32$0 = $5$hi;
   $3_1 = $4_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $50_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57_1 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50_1;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $48($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $48($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $129($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $15$hi = 0, $12_1 = 0, $6_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $16$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $244_1 = 0, $246_1 = 0, $248_1 = 0, $249_1 = 0, $251_1 = 0, $252_1 = 0, $254_1 = 0, $256_1 = 0, $20_1 = 0, $257_1 = 0, $258_1 = 0, $21_1 = 0, $22_1 = 0, $259_1 = 0, $24_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $278_1 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150_1 = 0, $150$hi = 0, $155$hi = 0, $162_1 = 0, $163_1 = 0, $163$hi = 0, $164_1 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $194_1 = 0, $194$hi = 0, $196$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $222_1 = 0, $222$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $243_1 = 0, $243$hi = 0, $245_1 = 0, $245$hi = 0, $247_1 = 0, $247$hi = 0, $250_1 = 0, $252$hi = 0, $253_1 = 0, $253$hi = 0, $255_1 = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $269_1 = 0, $269$hi = 0, $277_1 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $315_1 = 0, $316$hi = 0, $319_1 = 0, $320$hi = 0, $321$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $338_1 = 0, $338$hi = 0, $344_1 = 0, $344$hi = 0, $346$hi = 0, $347_1 = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $349_1 = 0, $349$hi = 0, $351$hi = 0, $355_1 = 0, $356$hi = 0, $357_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $363 = 0, $364$hi = 0, $367 = 0, $368$hi = 0, $369$hi = 0, $372 = 0, $373$hi = 0, $375$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382 = 0, $382$hi = 0, $383 = 0, $383$hi = 0, $386 = 0, $387$hi = 0, $390 = 0, $391$hi = 0, $392$hi = 0, $396 = 0, $397$hi = 0, $407 = 0, $407$hi = 0, $409$hi = 0, $412 = 0, $412$hi = 0, $414$hi = 0, $418 = 0, $418$hi = 0, $420$hi = 0, $454 = 0, $454$hi = 0, $456 = 0, $456$hi = 0, $457 = 0, $457$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $465 = 0, $466$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $484$hi = 0, $486 = 0, $486$hi = 0, $492 = 0, $498 = 0, $498$hi = 0, $503 = 0, $504$hi = 0, $508 = 0, $508$hi = 0, $512 = 0, $512$hi = 0, $515 = 0, $515$hi = 0, $519 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228_1;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230_1;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232_1;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $234_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129_1 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $130_1 = $15_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239_1 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $48($128_1 | 0, $129_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150_1 = $240_1;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150_1;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $242_1;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163_1 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164_1 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244_1 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $48($162_1 | 0, $163_1 | 0, i64toi32_i32$2 | 0, $164_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186_1 = $246_1;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194_1 = $249_1;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $252_1;
    $17$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207_1 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256_1;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222_1 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 0;
   $227_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$5 = $15_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $15_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $15$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243_1 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   $245_1 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247_1 = $257_1;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19_1;
   $250_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247_1;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245_1;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255_1 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$4 = $16_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264_1 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269_1 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$0 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277_1 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $17_1 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255_1;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296_1 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301_1 = $300_1;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305_1 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $309_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301_1;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312_1 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$5 = $18_1;
     $319_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312_1;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311_1;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330_1 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331_1 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338_1 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344_1 = $260_1;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344_1;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348_1 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349_1 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $355_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348_1;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358_1 = $1_1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360 = $263_1;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $16_1;
     $367 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $372 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358_1;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357_1;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383 = $3_1;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $386 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $396 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $266_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407 = $267_1;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $270_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $270_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $412 = $270_1;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $11_1 = $272_1;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $48($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $48($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $49($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $49($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274_1;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $11$hi;
    $492 = !($11_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276_1 = 0
      } else {
       $276_1 = 1
      }
      $278_1 = $276_1;
     } else {
      $278_1 = 0
     }
     $275_1 = $278_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492 : $275_1) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $503 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $14$hi;
   $512 = $14_1;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $519 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $130() {
  return 0 | 0;
 }
 
 function $131() {
  return 0 | 0;
 }
 
 function $132($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $12_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $354_1 = 0, $354$hi = 0, $356_1 = 0, $356$hi = 0, $360 = 0, $360$hi = 0, $362 = 0, $363$hi = 0, $369 = 0, $369$hi = 0, $371$hi = 0, $375$hi = 0, $377 = 0, $377$hi = 0, $380$hi = 0, $386 = 0, $386$hi = 0, $390$hi = 0, $394 = 0, $395$hi = 0, $400 = 0, $400$hi = 0, $408 = 0, $409$hi = 0, $411 = 0, $411$hi = 0, $417 = 0, $418$hi = 0, $422 = 0, $423$hi = 0, $426 = 0, $426$hi = 0, $432 = 0, $433$hi = 0, $437 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $121_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $135_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $135_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $135_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $136_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $136_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $136_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $137_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $137_1 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $137_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $48($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185_1 = $4_1;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $4_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138_1 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $138_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    $48($183_1 | 0, $184_1 | 0, i64toi32_i32$4 | 0, $185_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $139_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $139_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208_1 = $139_1;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $140_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $140_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208_1;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $140_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $141_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $141_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214_1 = $141_1;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $142_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $142_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214_1;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $142_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $143_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $143_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$1;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $48($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $49($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $144_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $144_1;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $145_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $146_1 = 0
       } else {
        $146_1 = 1
       }
       $147_1 = $146_1;
      } else {
       $147_1 = 0
      }
      $145_1 = $147_1;
     }
     if ($145_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284_1 = $4_1;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $4_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $148_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $148_1 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $148_1;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     $48($282_1 | 0, $283_1 | 0, i64toi32_i32$3 | 0, $284_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309_1;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $149_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $149_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322_1 = $149_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $150_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $150_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $150_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325_1;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $154_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $154_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $154_1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    $48($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $49($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354_1 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356_1 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356_1;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354_1;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $155_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $155_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $369 = $155_1;
   $369$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $156_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $156_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $371$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $369$hi;
   i64toi32_i32$3 = $369;
   i64toi32_i32$2 = $371$hi;
   i64toi32_i32$5 = $156_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $157_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $157_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $157_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $375$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $375$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $377 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $377$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $380$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $377$hi;
   i64toi32_i32$2 = $377;
   i64toi32_i32$4 = $380$hi;
   i64toi32_i32$5 = $158_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($130() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386 = $4_1;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1_1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400 = $4_1;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3_1 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2_1;
       $408 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411 = $4_1;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $422 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426 = $4_1;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432 = !($2_1 | i64toi32_i32$2 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $437 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $131() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $48($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $134($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $135($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $137($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $48($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $139($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $17_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $132($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $140($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $129($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $129($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $129($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $129($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $129($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $141($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $142($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15$hi = 0, $13$hi = 0, $15_1 = 0, $16$hi = 0, $13_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $18$hi = 0, $19$hi = 0, $17$hi = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $11$hi = 0, $17_1 = 0, $12$hi = 0, $20$hi = 0, $11_1 = 0, $12_1 = 0, $20_1 = 0, $10$hi = 0, $10_1 = 0, $8_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $7_1 = 0, $21$hi = 0, $9_1 = 0, $470 = 0, $471 = 0, $475 = 0, $476 = 0, $478 = 0, $479 = 0, $480 = 0, $481 = 0, $482 = 0, $484 = 0, $485 = 0, $486 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $507 = 0, $508 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $530 = 0, $21_1 = 0, $531 = 0, $532 = 0, $533 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $560 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $572 = 0, $573 = 0, $575 = 0, $576 = 0, $48_1 = 0, $52_1 = 0, $59_1 = 0, $63_1 = 0, $72_1 = 0, $72$hi = 0, $77_1 = 0, $77$hi = 0, $85_1 = 0, $85$hi = 0, $101_1 = 0, $102_1 = 0, $102$hi = 0, $103_1 = 0, $103$hi = 0, $110$hi = 0, $113$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $155_1 = 0, $157_1 = 0, $157$hi = 0, $161$hi = 0, $172_1 = 0, $172$hi = 0, $173$hi = 0, $176_1 = 0, $179_1 = 0, $179$hi = 0, $184$hi = 0, $194_1 = 0, $194$hi = 0, $195$hi = 0, $197_1 = 0, $200_1 = 0, $200$hi = 0, $205$hi = 0, $215_1 = 0, $215$hi = 0, $216$hi = 0, $218_1 = 0, $221_1 = 0, $221$hi = 0, $226$hi = 0, $236_1 = 0, $236$hi = 0, $237$hi = 0, $239_1 = 0, $242_1 = 0, $242$hi = 0, $247$hi = 0, $256_1 = 0, $256$hi = 0, $257$hi = 0, $265_1 = 0, $265$hi = 0, $269$hi = 0, $274_1 = 0, $274$hi = 0, $279_1 = 0, $279$hi = 0, $286_1 = 0, $286$hi = 0, $289_1 = 0, $289$hi = 0, $292_1 = 0, $294$hi = 0, $295_1 = 0, $295$hi = 0, $298_1 = 0, $298$hi = 0, $299_1 = 0, $299$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $325_1 = 0, $325$hi = 0, $332_1 = 0, $332$hi = 0, $333$hi = 0, $335_1 = 0, $336_1 = 0, $336$hi = 0, $338_1 = 0, $338$hi = 0, $341_1 = 0, $343$hi = 0, $344_1 = 0, $344$hi = 0, $347_1 = 0, $347$hi = 0, $348$hi = 0, $349$hi = 0, $353_1 = 0, $354$hi = 0, $355$hi = 0, $357_1 = 0, $358$hi = 0, $359$hi = 0, $366 = 0, $366$hi = 0, $370 = 0, $370$hi = 0, $371 = 0, $371$hi = 0, $375 = 0, $375$hi = 0, $378$hi = 0, $383 = 0, $383$hi = 0, $385 = 0, $385$hi = 0, $388 = 0, $390$hi = 0, $391 = 0, $391$hi = 0, $394 = 0, $394$hi = 0, $395$hi = 0, $396 = 0, $396$hi = 0, $397 = 0, $397$hi = 0, $410 = 0, $410$hi = 0, $417 = 0, $417$hi = 0, $418$hi = 0, $420 = 0, $421 = 0, $421$hi = 0, $423 = 0, $423$hi = 0, $426 = 0, $428$hi = 0, $429 = 0, $429$hi = 0, $432 = 0, $432$hi = 0, $433$hi = 0, $434$hi = 0, $438 = 0, $439$hi = 0, $440 = 0, $440$hi = 0, $445 = 0, $446$hi = 0, $451 = 0, $451$hi = 0, $453 = 0, $453$hi = 0, $455$hi = 0, $460 = 0, $460$hi = 0, $464 = 0, $464$hi = 0, $468 = 0, $468$hi = 0, $472 = 0, $473 = 0, $473$hi = 0, $474 = 0, $474$hi = 0, $477 = 0, $477$hi = 0, $483 = 0, $483$hi = 0, $487 = 0, $488$hi = 0, $489$hi = 0, $492 = 0, $492$hi = 0, $493 = 0, $493$hi = 0, $500 = 0, $500$hi = 0, $506 = 0, $506$hi = 0, $508$hi = 0, $509 = 0, $509$hi = 0, $510 = 0, $510$hi = 0, $511 = 0, $511$hi = 0, $513$hi = 0, $517 = 0, $518$hi = 0, $519 = 0, $519$hi = 0, $520 = 0, $520$hi = 0, $529 = 0, $529$hi = 0, $534 = 0, $534$hi = 0, $535 = 0, $535$hi = 0, $536 = 0, $536$hi = 0, $541 = 0, $541$hi = 0, $545 = 0, $546$hi = 0, $547$hi = 0, $551 = 0, $552$hi = 0, $553 = 0, $553$hi = 0, $554 = 0, $554$hi = 0, $561 = 0, $561$hi = 0, $566 = 0, $566$hi = 0, $571 = 0, $571$hi = 0, $574 = 0, $574$hi = 0, $577 = 0, $578$hi = 0, $581 = 0, $582$hi = 0, $583$hi = 0, $586 = 0, $587$hi = 0, $589$hi = 0, $590 = 0, $590$hi = 0, $594 = 0, $595$hi = 0, $596 = 0, $596$hi = 0, $597 = 0, $597$hi = 0, $598 = 0, $598$hi = 0, $605 = 0, $605$hi = 0, $608 = 0, $608$hi = 0, $611 = 0, $613$hi = 0, $614 = 0, $614$hi = 0, $618 = 0, $619 = 0, $619$hi = 0, $620 = 0, $620$hi = 0, $622$hi = 0, $623$hi = 0, $625 = 0, $626$hi = 0, $627$hi = 0, $631 = 0, $632$hi = 0, $637$hi = 0, $646 = 0, $647$hi = 0, $648 = 0, $648$hi = 0, $651 = 0, $651$hi = 0, $657 = 0, $657$hi = 0, $658 = 0, $658$hi = 0, $662 = 0, $662$hi = 0, $667 = 0, $668$hi = 0, $669 = 0, $669$hi = 0, $670 = 0, $670$hi = 0, $672$hi = 0, $673 = 0, $673$hi = 0, $674 = 0, $674$hi = 0, $676$hi = 0, $677 = 0, $677$hi = 0, $678$hi = 0, $681 = 0, $681$hi = 0, $682$hi = 0, $685 = 0, $685$hi = 0, $687 = 0, $687$hi = 0, $689$hi = 0, $578 = 0, $691 = 0, $691$hi = 0, $694 = 0, $694$hi = 0, $695 = 0, $695$hi = 0, $696$hi = 0, $699 = 0, $699$hi = 0, $700 = 0, $700$hi = 0, $702 = 0, $702$hi = 0, $705 = 0, $707$hi = 0, $708 = 0, $708$hi = 0, $709$hi = 0, $710$hi = 0, $720 = 0, $720$hi = 0, $722 = 0, $722$hi = 0, $724$hi = 0, $734 = 0, $735$hi = 0, $736 = 0, $736$hi = 0, $739 = 0, $739$hi = 0, $740 = 0, $740$hi = 0, $745 = 0, $745$hi = 0, $746 = 0, $746$hi = 0, $748$hi = 0, $754 = 0, $754$hi = 0, $759 = 0, $760$hi = 0, $761 = 0, $761$hi = 0, $762 = 0, $762$hi = 0, $764$hi = 0, $765 = 0, $765$hi = 0, $766 = 0, $766$hi = 0, $768$hi = 0, $769 = 0, $769$hi = 0, $770 = 0, $770$hi = 0, $775 = 0, $775$hi = 0, $776$hi = 0, $779 = 0, $779$hi = 0, $781 = 0, $781$hi = 0, $784 = 0, $784$hi = 0, $786$hi = 0, $579 = 0, $788 = 0, $788$hi = 0, $789$hi = 0, $792 = 0, $792$hi = 0, $793 = 0, $793$hi = 0, $794 = 0, $794$hi = 0, $796 = 0, $796$hi = 0, $799 = 0, $801$hi = 0, $802 = 0, $802$hi = 0, $803$hi = 0, $804$hi = 0, $820 = 0, $820$hi = 0, $821 = 0, $821$hi = 0, $823$hi = 0, $825 = 0, $827 = 0, $827$hi = 0, $829$hi = 0, $833 = 0, $837 = 0, $838$hi = 0, $842 = 0, $843$hi = 0, $852 = 0, $852$hi = 0, $853 = 0, $853$hi = 0, $855$hi = 0, $857 = 0, $859 = 0, $859$hi = 0, $861$hi = 0, $865 = 0, $869 = 0, $870$hi = 0, $874 = 0, $875$hi = 0, $876 = 0, $876$hi = 0, $879$hi = 0, $880$hi = 0, $896 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $470 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $470 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $470 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $471 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $471 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $471 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$3
      }
     }
     label$5 : {
      i64toi32_i32$0 = $1$hi;
      $48_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $52_1) {
       break label$5
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12$hi = i64toi32_i32$0;
      break label$2;
     }
     label$6 : {
      i64toi32_i32$0 = $3$hi;
      $59_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $63_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $59_1 : $63_1) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$2;
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $72_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$2 = $72_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$7
      }
      label$8 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$0 = $77_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$8
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $12_1 = 0;
       $12$hi = i64toi32_i32$2;
       break label$2;
      }
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$2;
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $85_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $85$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $85$hi;
      i64toi32_i32$0 = $85_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$9
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$2;
     }
     $8_1 = 0;
     label$11 : {
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$11
      }
      $101_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $102_1 = $1_1;
      $102$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      $103_1 = $11_1;
      $103$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $11$hi;
      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $11_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $475 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $475 = i64toi32_i32$1
      }
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $113$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $110$hi;
      i64toi32_i32$0 = $475;
      i64toi32_i32$3 = $113$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $102$hi;
      i64toi32_i32$0 = $103$hi;
      $48($101_1 | 0, $102_1 | 0, i64toi32_i32$5 | 0, $103_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     $128_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $129_1 = $3_1;
     $129$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     $130_1 = $10_1;
     $130$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $10$hi;
     $9_1 = !($10_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $10_1;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476 = i64toi32_i32$4
     }
     $137$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $140$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $137$hi;
     i64toi32_i32$5 = $476;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$4 = $9_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $129$hi;
     i64toi32_i32$5 = $130$hi;
     $48($128_1 | 0, $129_1 | 0, i64toi32_i32$2 | 0, $130_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$0 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $155_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $478 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $478 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $157_1 = $478;
    $157$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $14$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $479 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $479 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $161$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $157$hi;
    i64toi32_i32$3 = $157_1;
    i64toi32_i32$2 = $161$hi;
    i64toi32_i32$4 = $479;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    $141($155_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $172_1 = i64toi32_i32$4;
    $172$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $172$hi;
    i64toi32_i32$0 = $172_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $173$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $173$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    $141($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $176_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $480 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $480 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $179_1 = $480;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $481 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $481 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $179$hi;
    i64toi32_i32$5 = $179_1;
    i64toi32_i32$2 = $184$hi;
    i64toi32_i32$1 = $481;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    $141($176_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $194_1 = i64toi32_i32$1;
    $194$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $194$hi;
    i64toi32_i32$2 = $194_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$2 = 0;
    $141($5_1 + 96 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $197_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $482 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $482 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $200_1 = $482;
    $200$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $484 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $484 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $205$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $200$hi;
    i64toi32_i32$5 = $200_1;
    i64toi32_i32$0 = $205$hi;
    i64toi32_i32$3 = $484;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    $141($197_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215_1 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $216$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $216$hi;
    i64toi32_i32$0 = 0;
    $141($5_1 + 64 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $218_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $485 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $485 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $221_1 = $485;
    $221$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $486 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $486 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $226$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $221$hi;
    i64toi32_i32$5 = $221_1;
    i64toi32_i32$2 = $226$hi;
    i64toi32_i32$4 = $486;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    $141($218_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$4;
    $236$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $236$hi;
    i64toi32_i32$2 = $236_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = 0;
    $141($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $239_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $488 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $488 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $242_1 = $488;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $489 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $489 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $247$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$0 = $247$hi;
    i64toi32_i32$1 = $489;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    $141($239_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $256_1 = i64toi32_i32$1;
    $256$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $256$hi;
    i64toi32_i32$0 = $256_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $257$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $257$hi;
    i64toi32_i32$0 = 0;
    $141($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$12 : {
     label$13 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $490 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $490 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $265_1 = $490;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $491 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $491 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $265$hi;
      i64toi32_i32$5 = $265_1;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$3 = $491;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $274_1 = $4_1;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $494 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $494 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $15_1 = $494;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($274_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      $279_1 = i64toi32_i32$4;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $495 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $495 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $13_1 = $495;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $17_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $286_1 = i64toi32_i32$2;
      $286$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$4 = $279_1;
      i64toi32_i32$2 = $286$hi;
      i64toi32_i32$3 = $286_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $496 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $289_1 = $496;
      $289$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $292_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $292_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $497 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $294$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $289$hi;
      i64toi32_i32$1 = $289_1;
      i64toi32_i32$3 = $294$hi;
      i64toi32_i32$0 = $497;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $295_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $295$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $298_1 = i64toi32_i32$1;
      $298$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $295$hi;
      i64toi32_i32$4 = $295_1;
      i64toi32_i32$1 = $298$hi;
      i64toi32_i32$0 = $298_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $299_1 = i64toi32_i32$2;
      $299$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $498 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $498 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $15_1 = $498;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $305_1 = i64toi32_i32$3;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$3 = $305$hi;
      i64toi32_i32$0 = $305_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $309_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $310$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $299$hi;
      i64toi32_i32$0 = $299_1;
      i64toi32_i32$2 = $310$hi;
      i64toi32_i32$5 = $309_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $311_1 = i64toi32_i32$3;
      $311$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      $312_1 = $2_1;
      $312$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $313_1 = $4_1;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 17;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $499 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $499 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      i64toi32_i32$1 = $499;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $313$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($313_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      $319_1 = i64toi32_i32$1;
      $319$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $13$hi;
      $320_1 = $13_1;
      $320$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 15;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $501 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $501 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      i64toi32_i32$4 = $501;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -32768;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $320$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $325_1 = i64toi32_i32$4;
      $325$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $319$hi;
      i64toi32_i32$1 = $319_1;
      i64toi32_i32$4 = $325$hi;
      i64toi32_i32$5 = $325_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $502 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $502 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $19_1 = $502;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332_1 = i64toi32_i32$0;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$0 = $332$hi;
      i64toi32_i32$5 = $332_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $333$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $333$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $335_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $336_1 = $335_1;
      $336$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $503 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $503 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $338_1 = $503;
      $338$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = $17_1;
      $341_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $341_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $504 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $504 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $343$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $338$hi;
      i64toi32_i32$1 = $338_1;
      i64toi32_i32$3 = $343$hi;
      i64toi32_i32$5 = $504;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $344_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $344$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $347_1 = i64toi32_i32$1;
      $347$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $344$hi;
      i64toi32_i32$2 = $344_1;
      i64toi32_i32$1 = $347$hi;
      i64toi32_i32$5 = $347_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $348$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $336$hi;
      i64toi32_i32$3 = $336_1;
      i64toi32_i32$2 = $348$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $349$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $312$hi;
      i64toi32_i32$4 = $312_1;
      i64toi32_i32$3 = $349$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2_1;
      $353_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $354$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $311$hi;
      i64toi32_i32$5 = $311_1;
      i64toi32_i32$1 = $354$hi;
      i64toi32_i32$4 = $353_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      $357_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = 0;
      $358$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $355$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $358$hi;
      i64toi32_i32$5 = $357_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $359$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $359$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$0;
      $366 = i64toi32_i32$3;
      $366$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $370 = i64toi32_i32$3;
      $370$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $371 = $4_1;
      $371$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $505 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $505 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $19_1 = $505;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $371$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($371 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $375 = i64toi32_i32$1;
      $375$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $370$hi;
      i64toi32_i32$0 = $370;
      i64toi32_i32$1 = $375$hi;
      i64toi32_i32$5 = $375;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $507 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $507 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $378$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $366$hi;
      i64toi32_i32$2 = $366;
      i64toi32_i32$3 = $378$hi;
      i64toi32_i32$5 = $507;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$0 = 0;
      $383 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $383$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $508 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $385 = $508;
      $385$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $388 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $388;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $512 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
       $512 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $390$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$0 = $385;
      i64toi32_i32$2 = $390$hi;
      i64toi32_i32$5 = $512;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $391 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $391$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $394 = i64toi32_i32$0;
      $394$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $391$hi;
      i64toi32_i32$4 = $391;
      i64toi32_i32$0 = $394$hi;
      i64toi32_i32$5 = $394;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $395$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $383$hi;
      i64toi32_i32$2 = $383;
      i64toi32_i32$4 = $395$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $396 = i64toi32_i32$0;
      $396$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      $397 = $16_1;
      $397$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $513 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $513 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $15_1 = $513;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $18_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $410 = i64toi32_i32$0;
      $410$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$0 = $410$hi;
      i64toi32_i32$5 = $410;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $514 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $514 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $19_1 = $514;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $417 = i64toi32_i32$3;
      $417$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$4 = $19_1;
      i64toi32_i32$3 = $417$hi;
      i64toi32_i32$5 = $417;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $418$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $418$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $420 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $421 = $420;
      $421$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $515 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       $515 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $423 = $515;
      $423$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      $426 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = $426;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
       $516 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
       $516 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $428$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $423$hi;
      i64toi32_i32$1 = $423;
      i64toi32_i32$4 = $428$hi;
      i64toi32_i32$5 = $516;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $429 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $429$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $432 = i64toi32_i32$1;
      $432$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $429$hi;
      i64toi32_i32$2 = $429;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $432;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $433$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $421$hi;
      i64toi32_i32$4 = $421;
      i64toi32_i32$2 = $433$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $397$hi;
      i64toi32_i32$0 = $397;
      i64toi32_i32$4 = $434$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $16_1;
      $438 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $439$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $396$hi;
      i64toi32_i32$5 = $396;
      i64toi32_i32$1 = $439$hi;
      i64toi32_i32$0 = $438;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $440 = i64toi32_i32$4;
      $440$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = -2;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $445 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $446$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $440$hi;
      i64toi32_i32$0 = $440;
      i64toi32_i32$4 = $446$hi;
      i64toi32_i32$3 = $445;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $15_1 = i64toi32_i32$4;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$2;
      $451 = $2_1;
      $451$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 62;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $518 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $518 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $453 = $518;
      $453$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 2;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $521 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $521 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $453$hi;
      i64toi32_i32$1 = $453;
      i64toi32_i32$2 = $455$hi;
      i64toi32_i32$3 = $521;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $451$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = __wasm_i64_mul($451 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$1;
      $460 = i64toi32_i32$5;
      $460$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 30;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $522 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $522 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      i64toi32_i32$1 = $522;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $13_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$2;
      $464 = $13_1;
      $464$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $523 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $523 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $523;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $464$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = __wasm_i64_mul($464 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $468 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$2 = $460;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$3 = $468;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $472 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $473 = $472;
      $473$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $474 = i64toi32_i32$0;
      $474$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $524 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $524 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16_1 = $524;
      $16$hi = i64toi32_i32$4;
      $477 = $16_1;
      $477$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $11_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 30;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $525 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $525 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$4 = $525;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = -262145;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 262144;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $477$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($477 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $483 = i64toi32_i32$3;
      $483$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $474$hi;
      i64toi32_i32$1 = $474;
      i64toi32_i32$3 = $483$hi;
      i64toi32_i32$2 = $483;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $487 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $488$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $473$hi;
      i64toi32_i32$2 = $473;
      i64toi32_i32$0 = $488$hi;
      i64toi32_i32$1 = $487;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $489$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $492 = i64toi32_i32$2;
      $492$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $489$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $492$hi;
      i64toi32_i32$1 = $492;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $493 = i64toi32_i32$0;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $500 = i64toi32_i32$4;
      $500$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$5 = $20_1;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$1 = $500;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $526 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $526 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $506 = $526;
      $506$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $527 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $527 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $508$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $506$hi;
      i64toi32_i32$0 = $506;
      i64toi32_i32$3 = $508$hi;
      i64toi32_i32$5 = $527;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $509 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $509$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $493$hi;
      i64toi32_i32$1 = $493;
      i64toi32_i32$0 = $509$hi;
      i64toi32_i32$5 = $509;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $510 = i64toi32_i32$4;
      $510$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      $511 = $19_1;
      $511$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $528 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $528 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $511$hi;
      i64toi32_i32$2 = $511;
      i64toi32_i32$3 = $513$hi;
      i64toi32_i32$5 = $528;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $517 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $518$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $510$hi;
      i64toi32_i32$5 = $510;
      i64toi32_i32$4 = $518$hi;
      i64toi32_i32$2 = $517;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $519 = i64toi32_i32$3;
      $519$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      $520 = $18_1;
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $17_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $529 = i64toi32_i32$1;
      $529$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $20_1;
      i64toi32_i32$1 = $529$hi;
      i64toi32_i32$2 = $529;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$5 = 0;
      $534 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      $534$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$3;
      $535 = i64toi32_i32$4;
      $535$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $2$hi;
      $536 = $2_1;
      $536$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $530 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $530 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      i64toi32_i32$5 = $530;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = -4;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $20_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $536$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($536 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $541 = i64toi32_i32$5;
      $541$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $535$hi;
      i64toi32_i32$3 = $535;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$0 = $541;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $19_1;
      $545 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $546$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $534$hi;
      i64toi32_i32$0 = $534;
      i64toi32_i32$4 = $546$hi;
      i64toi32_i32$3 = $545;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $547$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $520$hi;
      i64toi32_i32$2 = $520;
      i64toi32_i32$0 = $547$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $551 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $552$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $519$hi;
      i64toi32_i32$3 = $519;
      i64toi32_i32$5 = $552$hi;
      i64toi32_i32$2 = $551;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $553 = i64toi32_i32$0;
      $553$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      $554 = $19_1;
      $554$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $561 = i64toi32_i32$3;
      $561$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$3 = $561$hi;
      i64toi32_i32$2 = $561;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $566 = i64toi32_i32$1;
      $566$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $566$hi;
      i64toi32_i32$2 = $566;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $571 = i64toi32_i32$4;
      $571$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$4 = $571$hi;
      i64toi32_i32$2 = $571;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $531 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $574 = $531;
      $574$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $577 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $15_1;
      $581 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $582$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $577;
      i64toi32_i32$3 = $582$hi;
      i64toi32_i32$0 = $581;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $583$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $586 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $587$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $583$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $587$hi;
      i64toi32_i32$5 = $586;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $532 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $532 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $589$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $574$hi;
      i64toi32_i32$4 = $574;
      i64toi32_i32$2 = $589$hi;
      i64toi32_i32$5 = $532;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $590 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $590$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $554$hi;
      i64toi32_i32$0 = $554;
      i64toi32_i32$4 = $590$hi;
      i64toi32_i32$5 = $590;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $594 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $595$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$5 = $553;
      i64toi32_i32$3 = $595$hi;
      i64toi32_i32$0 = $594;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $596 = i64toi32_i32$4;
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      $597 = $15_1;
      $597$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $598 = $21_1;
      $598$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $605 = i64toi32_i32$5;
      $605$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $605$hi;
      i64toi32_i32$0 = $605;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$3;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $533 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $533 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      $608 = $533;
      $608$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $611 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $611;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
       $537 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
       $537 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $613$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $608$hi;
      i64toi32_i32$4 = $608;
      i64toi32_i32$0 = $613$hi;
      i64toi32_i32$1 = $537;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $614 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $614$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $598$hi;
      i64toi32_i32$2 = $598;
      i64toi32_i32$4 = $614$hi;
      i64toi32_i32$1 = $614;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $21_1;
      $618 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $619 = $618;
      $619$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$3;
      $620 = i64toi32_i32$5;
      $620$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $538 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $538 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $622$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $620$hi;
      i64toi32_i32$0 = $620;
      i64toi32_i32$1 = $622$hi;
      i64toi32_i32$2 = $538;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $623$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $623$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $625 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $626$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $619$hi;
      i64toi32_i32$2 = $619;
      i64toi32_i32$5 = $626$hi;
      i64toi32_i32$0 = $625;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $597$hi;
      i64toi32_i32$3 = $597;
      i64toi32_i32$2 = $627$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $631 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $632$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $596$hi;
      i64toi32_i32$0 = $596;
      i64toi32_i32$1 = $632$hi;
      i64toi32_i32$3 = $631;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 131071;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 49;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $539 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $539 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $637$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $1_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $1$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 0;
      $646 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = 0;
      $647$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $637$hi;
      i64toi32_i32$0 = $539;
      i64toi32_i32$4 = $647$hi;
      i64toi32_i32$5 = $646;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $648 = i64toi32_i32$1;
      $648$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $17_1 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$1;
      $651 = i64toi32_i32$4;
      $651$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $540 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $540 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $540;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$3;
      $657 = i64toi32_i32$2;
      $657$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      $658 = $1_1;
      $658$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $542 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       $542 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $16_1 = $542;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $658$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($658 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $662 = i64toi32_i32$1;
      $662$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $657$hi;
      i64toi32_i32$3 = $657;
      i64toi32_i32$1 = $662$hi;
      i64toi32_i32$5 = $662;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $543 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $543 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $19_1 = $543;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $651$hi;
      i64toi32_i32$4 = $651;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $667 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $668$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $648$hi;
      i64toi32_i32$5 = $648;
      i64toi32_i32$3 = $668$hi;
      i64toi32_i32$2 = $667;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $669 = i64toi32_i32$1;
      $669$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $670 = $4_1;
      $670$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $544 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $544 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $672$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $670$hi;
      i64toi32_i32$4 = $672$hi;
      i64toi32_i32$4 = __wasm_i64_mul($670 | 0, i64toi32_i32$5 | 0, $544 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $673 = i64toi32_i32$4;
      $673$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $3$hi;
      $674 = $3_1;
      $674$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $546 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       $546 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $676$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $674$hi;
      i64toi32_i32$0 = $676$hi;
      i64toi32_i32$0 = __wasm_i64_mul($674 | 0, i64toi32_i32$4 | 0, $546 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $677 = i64toi32_i32$0;
      $677$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $673$hi;
      i64toi32_i32$5 = $673;
      i64toi32_i32$0 = $677$hi;
      i64toi32_i32$2 = $677;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $678$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $681 = i64toi32_i32$5;
      $681$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $678$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$5 = $681$hi;
      i64toi32_i32$2 = $681;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $682$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$4 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $685 = i64toi32_i32$4;
      $685$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $682$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $685$hi;
      i64toi32_i32$2 = $685;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $547 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $547 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $687 = $547;
      $687$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $689$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $689$hi;
      $578 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($578 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $691 = i64toi32_i32$0;
      $691$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $694 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $694$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $694$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $694 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $695 = i64toi32_i32$1;
      $695$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $691$hi;
      i64toi32_i32$3 = $691;
      i64toi32_i32$1 = $695$hi;
      i64toi32_i32$2 = $695;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $696$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $699 = i64toi32_i32$3;
      $699$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = $699$hi;
      i64toi32_i32$2 = $699;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $700 = i64toi32_i32$1;
      $700$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $548 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $548 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $702 = $548;
      $702$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $705 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = $705;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $549 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $707$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $702$hi;
      i64toi32_i32$4 = $702;
      i64toi32_i32$2 = $707$hi;
      i64toi32_i32$5 = $549;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $708 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $708$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $700$hi;
      i64toi32_i32$0 = $700;
      i64toi32_i32$4 = $708$hi;
      i64toi32_i32$5 = $708;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $709$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $687$hi;
      i64toi32_i32$2 = $687;
      i64toi32_i32$0 = $709$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $669$hi;
      i64toi32_i32$1 = $669;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      $6_1 = $6_1 + -1 | 0;
      break label$12;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $550 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      $550 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $550;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 48;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $552 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $552 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $720 = $552;
     $720$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $555 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $555 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $722 = $555;
     $722$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $556 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $556 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $724$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $722$hi;
     i64toi32_i32$0 = $722;
     i64toi32_i32$4 = $724$hi;
     i64toi32_i32$5 = $556;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
     $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $15_1 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 0;
     $734 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $735$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $720$hi;
     i64toi32_i32$5 = $720;
     i64toi32_i32$3 = $735$hi;
     i64toi32_i32$4 = $734;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     $736 = i64toi32_i32$1;
     $736$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$1;
     $739 = i64toi32_i32$3;
     $739$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $740 = $1_1;
     $740$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $557 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $557 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $15_1 = $557;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $740$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = __wasm_i64_mul($740 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$0;
     $745 = i64toi32_i32$2;
     $745$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $746 = $16_1;
     $746$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 31;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $558 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $558 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $748$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $746$hi;
     i64toi32_i32$0 = $746;
     i64toi32_i32$1 = $748$hi;
     i64toi32_i32$4 = $558;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $18_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $754 = i64toi32_i32$2;
     $754$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $745$hi;
     i64toi32_i32$1 = $745;
     i64toi32_i32$2 = $754$hi;
     i64toi32_i32$4 = $754;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $559 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $559 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $20_1 = $559;
     $20$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $739$hi;
     i64toi32_i32$3 = $739;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $759 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $760$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $736$hi;
     i64toi32_i32$4 = $736;
     i64toi32_i32$1 = $760$hi;
     i64toi32_i32$0 = $759;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $761 = i64toi32_i32$2;
     $761$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $762 = $4_1;
     $762$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $560 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $560 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $764$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $762$hi;
     i64toi32_i32$3 = $764$hi;
     i64toi32_i32$3 = __wasm_i64_mul($762 | 0, i64toi32_i32$4 | 0, $560 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $765 = i64toi32_i32$3;
     $765$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $766 = $3_1;
     $766$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $562 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $562 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $768$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $766$hi;
     i64toi32_i32$5 = $768$hi;
     i64toi32_i32$5 = __wasm_i64_mul($766 | 0, i64toi32_i32$3 | 0, $562 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $769 = i64toi32_i32$5;
     $769$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $765$hi;
     i64toi32_i32$4 = $765;
     i64toi32_i32$5 = $769$hi;
     i64toi32_i32$0 = $769;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $770 = i64toi32_i32$1;
     $770$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $563 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $563 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
     }
     $2_1 = $563;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $775 = i64toi32_i32$3;
     $775$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $770$hi;
     i64toi32_i32$2 = $770;
     i64toi32_i32$3 = $775$hi;
     i64toi32_i32$0 = $775;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $776$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $779 = i64toi32_i32$2;
     $779$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $776$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$2 = $779$hi;
     i64toi32_i32$0 = $779;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $564 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $564 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $781 = $564;
     $781$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $784 = i64toi32_i32$1;
     $784$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $786$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $786$hi;
     $579 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($579 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $788 = i64toi32_i32$5;
     $788$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $784$hi;
     i64toi32_i32$4 = $784;
     i64toi32_i32$5 = $788$hi;
     i64toi32_i32$0 = $788;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $789$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $792 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $792$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = $792$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $792 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $793 = i64toi32_i32$1;
     $793$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $789$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$0 = $793;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $794 = i64toi32_i32$5;
     $794$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $565 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $565 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $796 = $565;
     $796$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $799 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = $799;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $567 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $567 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $801$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $796$hi;
     i64toi32_i32$2 = $796;
     i64toi32_i32$0 = $801$hi;
     i64toi32_i32$4 = $567;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $802 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $802$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $794$hi;
     i64toi32_i32$3 = $794;
     i64toi32_i32$2 = $802$hi;
     i64toi32_i32$4 = $802;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $803$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $781$hi;
     i64toi32_i32$0 = $781;
     i64toi32_i32$3 = $803$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $804$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761;
     i64toi32_i32$0 = $804$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$4 = $20_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     $2$hi = i64toi32_i32$3;
    }
    label$14 : {
     if (($6_1 | 0) < (16384 | 0)) {
      break label$14
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    $7_1 = $6_1 + 16383 | 0;
    label$15 : {
     if (($6_1 | 0) > (-16383 | 0)) {
      break label$15
     }
     label$16 : {
      if ($7_1) {
       break label$16
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 65535;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $820 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $820$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      $821 = $4_1;
      $821$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $568 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $568 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      $823$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $823$hi;
      i64toi32_i32$2 = $568;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      $825 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $569 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $569 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $827 = $569;
      $827$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $570 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       $570 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $829$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $827$hi;
      i64toi32_i32$3 = $827;
      i64toi32_i32$2 = $829$hi;
      i64toi32_i32$1 = $570;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$1 = $14_1;
      $833 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = $14_1;
      $837 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $825 : $833;
      i64toi32_i32$1 = 0;
      $838$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $821$hi;
      i64toi32_i32$3 = $821;
      i64toi32_i32$4 = $838$hi;
      i64toi32_i32$2 = $837;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $842 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $843$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $820$hi;
      i64toi32_i32$2 = $820;
      i64toi32_i32$0 = $843$hi;
      i64toi32_i32$3 = $842;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3_1 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
       break label$16
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $852 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $852$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $853 = $4_1;
    $853$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $572 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $572 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $855$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $855$hi;
    i64toi32_i32$5 = $572;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $857 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$3 = $13_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $573 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $573 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $859 = $573;
    $859$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $575 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $575 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $861$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $859$hi;
    i64toi32_i32$2 = $859;
    i64toi32_i32$5 = $861$hi;
    i64toi32_i32$1 = $575;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$1 = $14_1;
    $865 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $14_1;
    $869 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $857 : $865;
    i64toi32_i32$1 = 0;
    $870$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $853$hi;
    i64toi32_i32$2 = $853;
    i64toi32_i32$3 = $870$hi;
    i64toi32_i32$5 = $869;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    $874 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $875$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $852$hi;
    i64toi32_i32$5 = $852;
    i64toi32_i32$4 = $875$hi;
    i64toi32_i32$2 = $874;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $876 = i64toi32_i32$3;
    $876$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $576 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $576 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $879$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $876$hi;
    i64toi32_i32$0 = $876;
    i64toi32_i32$1 = $879$hi;
    i64toi32_i32$2 = $576;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $880$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$3 = $880$hi;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $12_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $12$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $0_1;
   HEAP32[i64toi32_i32$5 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $12_1;
   HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
   global$0 = $5_1 + 192 | 0;
   return;
  }
  i64toi32_i32$5 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$5 >> 2] = 0;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
  i64toi32_i32$1 = !(i64toi32_i32$3 | i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0);
  i64toi32_i32$5 = 2147450880;
  i64toi32_i32$3 = $12$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ? 0 : $12_1;
  i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$3;
  $896 = i64toi32_i32$2;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $896;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 192 | 0;
 }
 
 function $143($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $144($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64_1 = 0, $7_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $156_1 = 0, $156$hi = 0, $158$hi = 0, $161_1 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178_1 = 0, $179$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $219_1 = 0, $220_1 = 0, $220$hi = 0, $222_1 = 0, $222$hi = 0, $228$hi = 0, $229_1 = 0, $229$hi = 0, $236_1 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($134($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $143($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $129($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $142($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($134($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($134($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $129($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $129($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $129($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $129($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156_1 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156_1;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161_1 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161_1;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178_1 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $129($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208_1 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208_1;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219_1 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220_1 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222_1;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $129($219_1 | 0, $220_1 | 0, i64toi32_i32$0 | 0, $229_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8_1 | $6_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $145($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $146($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 3100 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 3088 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $126($1_1 | 0) | 0;
     }
     if ($101($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $126($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 3016 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $126($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $127($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 3025 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $126($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $126($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $147($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $148($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $126($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $126($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $125($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $147($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $258$hi = 0, $265$hi = 0, $274_1 = 0, $274$hi = 0, $278_1 = 0, $278$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $296_1 = 0, $296$hi = 0, $313_1 = 0, $313$hi = 0, $317_1 = 0, $317$hi = 0, $322_1 = 0, $322$hi = 0, $324_1 = 0, $324$hi = 0, $342$hi = 0, $350_1 = 0, $351_1 = 0, $354$hi = 0, $378 = 0, $378$hi = 0, $382 = 0, $382$hi = 0, $416 = 0, $416$hi = 0, $420 = 0, $420$hi = 0, $424 = 0, $424$hi = 0, $428 = 0, $428$hi = 0, $435 = 0, $435$hi = 0, $438 = 0, $438$hi = 0, $444 = 0, $444$hi = 0, $448 = 0, $448$hi = 0, $450 = 0, $450$hi = 0, $454 = 0, $454$hi = 0, $458 = 0, $458$hi = 0, $462 = 0, $462$hi = 0, $492 = 0, $492$hi = 0, $496 = 0, $496$hi = 0, $500 = 0, $500$hi = 0, $504 = 0, $504$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $126($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $126($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $126($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $126($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$16
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $106_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $107_1 = 0
         } else {
          $107_1 = 1
         }
         $108_1 = $107_1;
        } else {
         $108_1 = 0
        }
        $106_1 = $108_1;
       }
       if ($106_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$19
       }
       $128($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $129($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $133_1 = i64toi32_i32$5;
       $133$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$2;
       $137$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = $133$hi;
       i64toi32_i32$3 = $137$hi;
       $129($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $142_1 = i64toi32_i32$3;
       $142$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $146_1 = i64toi32_i32$0;
       $146$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $142$hi;
       i64toi32_i32$5 = $146$hi;
       $132($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if ($11_1) {
       break label$17
      }
      if (!$7_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $129($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$3;
      $164$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168_1 = i64toi32_i32$0;
      $168$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $164$hi;
      i64toi32_i32$5 = $168$hi;
      $132($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $126($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    label$23 : {
     label$24 : {
      if ($9_1) {
       break label$24
      }
      label$25 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$25
       }
       if ($5_1) {
        break label$22
       }
       break label$23;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$22
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$22;
     }
     label$26 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$26
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$27 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$27
       }
       break label$27;
      };
     }
     label$28 : {
      label$29 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$29
       }
       i64toi32_i32$5 = $149($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$28
       }
       label$30 : {
        if (!$5_1) {
         break label$30
        }
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$28
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$28;
       }
       i64toi32_i32$0 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $125($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$0;
       break label$21;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$28
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$31 : {
      if ($10_1) {
       break label$31
      }
      $133($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$21;
     }
     label$32 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $258$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $258$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $265$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $265$hi;
      i64toi32_i32$0 = 0 - $3_1 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$32
      }
      (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $128($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $274_1 = i64toi32_i32$2;
      $274$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $278_1 = i64toi32_i32$1;
      $278$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$1 = $278$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $129($6_1 + 144 | 0 | 0, $274_1 | 0, i64toi32_i32$2 | 0, $278_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $282_1 = i64toi32_i32$5;
      $282$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $286_1 = i64toi32_i32$0;
      $286$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $282$hi;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $129($6_1 + 128 | 0 | 0, $282_1 | 0, i64toi32_i32$5 | 0, $286_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$2;
      break label$21;
     }
     label$33 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $296_1 = i64toi32_i32$1;
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $296$hi;
      i64toi32_i32$5 = $296_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$33
      }
      label$34 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$34
       }
       label$35 : while (1) {
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $132($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $135($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $313_1 = i64toi32_i32$0;
        $313$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $313$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $313_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $317_1 = i64toi32_i32$1;
        $317$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $322_1 = i64toi32_i32$5;
        $322$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$5 = $322$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $322_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $324_1 = i64toi32_i32$2;
        $324$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $317$hi;
        i64toi32_i32$1 = $324$hi;
        $132($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $317_1 | 0, i64toi32_i32$0 | 0, $324_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$35
        }
        break label$35;
       };
      }
      label$36 : {
       label$37 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $342$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = $342$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $14_1 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $350_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $351_1 = $2_1;
        i64toi32_i32$0 = 0;
        $354$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $354$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $350_1 : $351_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$37
        }
        $128($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        break label$36;
       }
       $133($6_1 + 352 | 0 | 0, +(+$136(+(1.0), 144 - $7_1 | 0 | 0)));
       $128($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $378 = i64toi32_i32$5;
       $378$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $382 = i64toi32_i32$0;
       $382$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $378$hi;
       i64toi32_i32$0 = $382$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $137($6_1 + 368 | 0 | 0, $378 | 0, i64toi32_i32$5 | 0, $382 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = !($10_1 & 1 | 0) & (($134($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7_1 | 0) < (32 | 0) | 0) | 0;
      $138($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $416 = i64toi32_i32$5;
      $416$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $420 = i64toi32_i32$0;
      $420$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $416$hi;
      i64toi32_i32$4 = $420$hi;
      $129($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0, $416 | 0, i64toi32_i32$3 | 0, $420 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $424 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $428 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      $132($6_1 + 272 | 0 | 0, $424 | 0, i64toi32_i32$4 | 0, $428 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $435 = i64toi32_i32$4;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $438 = i64toi32_i32$5;
      $438$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $435$hi;
      i64toi32_i32$5 = $438$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      $129($6_1 + 288 | 0 | 0, $435 | 0, i64toi32_i32$1 | 0, $438 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $444 = i64toi32_i32$3;
      $444$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $448 = i64toi32_i32$0;
      $448$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $450 = i64toi32_i32$3;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $454 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $444$hi;
      i64toi32_i32$0 = $448$hi;
      i64toi32_i32$5 = $450$hi;
      i64toi32_i32$1 = $454$hi;
      $132($6_1 + 256 | 0 | 0, $444 | 0, i64toi32_i32$3 | 0, $448 | 0, i64toi32_i32$0 | 0, $450 | 0, i64toi32_i32$5 | 0, $454 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $458 = i64toi32_i32$1;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $462 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $458$hi;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      $139($6_1 + 240 | 0 | 0, $458 | 0, i64toi32_i32$1 | 0, $462 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
      label$38 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$3;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($134($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$38
       }
       (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $140($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      break label$21;
     }
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $128($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $492 = i64toi32_i32$5;
     $492$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $496 = i64toi32_i32$1;
     $496$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$1 = $496$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $129($6_1 + 192 | 0 | 0, $492 | 0, i64toi32_i32$5 | 0, $496 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $500 = i64toi32_i32$3;
     $500$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $504 = i64toi32_i32$0;
     $504$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $500$hi;
     i64toi32_i32$0 = $504$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $129($6_1 + 176 | 0 | 0, $500 | 0, i64toi32_i32$3 | 0, $504 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     break label$21;
    }
    i64toi32_i32$5 = 0;
    $125($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $133($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $148($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, $19_1 = 0, $14_1 = 0, $20$hi = 0, $13_1 = 0, i64toi32_i32$0 = 0, $20_1 = 0, $8_1 = 0, $11_1 = 0, $15_1 = 0, $22$hi = 0, $16_1 = 0, $21$hi = 0, $22_1 = 0, $21_1 = 0, $12_1 = 0, $17_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $9_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $127_1 = 0, $233_1 = 0, $233$hi = 0, $237_1 = 0, $237$hi = 0, $239_1 = 0, $239$hi = 0, $243_1 = 0, $243$hi = 0, $253$hi = 0, $262_1 = 0, $262$hi = 0, $266_1 = 0, $266$hi = 0, $270_1 = 0, $270$hi = 0, $274_1 = 0, $274$hi = 0, $284_1 = 0, $284$hi = 0, $293_1 = 0, $293$hi = 0, $297_1 = 0, $297$hi = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $354_1 = 0, $354$hi = 0, $358_1 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $364 = 0, $364$hi = 0, $383 = 0, $383$hi = 0, $387 = 0, $387$hi = 0, $389 = 0, $389$hi = 0, $393 = 0, $393$hi = 0, $404 = 0, $404$hi = 0, $408 = 0, $408$hi = 0, $410 = 0, $410$hi = 0, $414 = 0, $414$hi = 0, $442 = 0, $442$hi = 0, $446 = 0, $446$hi = 0, $448 = 0, $448$hi = 0, $452 = 0, $452$hi = 0, $462 = 0, $462$hi = 0, $466 = 0, $466$hi = 0, $468 = 0, $468$hi = 0, $472 = 0, $472$hi = 0, $511 = 0, $589$hi = 0, $591$hi = 0, $599 = 0, $599$hi = 0, $740 = 0, $740$hi = 0, $744 = 0, $744$hi = 0, $746 = 0, $746$hi = 0, $750 = 0, $750$hi = 0, $769 = 0, $769$hi = 0, $773 = 0, $773$hi = 0, $815 = 0, $877 = 0, $877$hi = 0, $881 = 0, $881$hi = 0, $898 = 0, $898$hi = 0, $902 = 0, $902$hi = 0, $918 = 0, $918$hi = 0, $922 = 0, $922$hi = 0, $959 = 0, $959$hi = 0, $963 = 0, $963$hi = 0, $982 = 0, $982$hi = 0, $986 = 0, $986$hi = 0, $1009 = 0, $1009$hi = 0, $1013 = 0, $1013$hi = 0, $1029 = 0, $1029$hi = 0, $1033 = 0, $1033$hi = 0, $1047 = 0, $1047$hi = 0, $1049 = 0, $1049$hi = 0, $1069 = 0, $1069$hi = 0, $1073 = 0, $1073$hi = 0, $1096 = 0, $1096$hi = 0, $1098 = 0, $1098$hi = 0, $1104 = 0, $1104$hi = 0, $1111 = 0, $1111$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $126($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $126($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $126($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          break label$16
         }
         i64toi32_i32$5 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$5;
         if ($13_1 >>> 0 <= 9 >>> 0) {
          break label$16
         }
         $15_1 = 0;
         $16_1 = 0;
         break label$15;
        }
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        $16_1 = 0;
        $15_1 = 0;
        $12_1 = 0;
        label$17 : while (1) {
         label$18 : {
          label$19 : {
           if (!($14_1 & 1 | 0)) {
            break label$19
           }
           label$20 : {
            if ($8_1) {
             break label$20
            }
            i64toi32_i32$5 = $20$hi;
            $19_1 = $20_1;
            $19$hi = i64toi32_i32$5;
            $8_1 = 1;
            break label$18;
           }
           $14_1 = !$11_1;
           break label$14;
          }
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$0 = $20_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $20_1 = i64toi32_i32$1;
          $20$hi = i64toi32_i32$4;
          label$21 : {
           if (($15_1 | 0) > (2044 | 0)) {
            break label$21
           }
           $11_1 = ($2_1 | 0) == (48 | 0);
           i64toi32_i32$4 = $20$hi;
           $17_1 = $20_1;
           $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
           label$22 : {
            if (!$16_1) {
             break label$22
            }
            $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $12_1 = $11_1 ? $12_1 : $17_1;
           HEAP32[$14_1 >> 2] = $13_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $127_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $127_1;
           $15_1 = $15_1 + $2_1 | 0;
           break label$18;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break label$18
          }
          HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $12_1 = 18396;
         }
         label$23 : {
          label$24 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$24
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break label$23;
          }
          $2_1 = $126($1_1 | 0) | 0;
         }
         $13_1 = $2_1 + -48 | 0;
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          continue label$17
         }
         if ($13_1 >>> 0 < 10 >>> 0) {
          continue label$17
         }
         break label$17;
        };
       }
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$0 = $20$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $19_1 = i64toi32_i32$3;
       $19$hi = i64toi32_i32$5;
       label$25 : {
        if (!$11_1) {
         break label$25
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break label$25
        }
        label$26 : {
         i64toi32_i32$5 = $149($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $21_1 = i64toi32_i32$5;
         $21$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$26
         }
         if (!$6_1) {
          break label$12
         }
         i64toi32_i32$2 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$2;
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$26
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$4 = $21_1;
        i64toi32_i32$3 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$1;
        break label$11;
       }
       $14_1 = !$11_1;
       if (($2_1 | 0) < (0 | 0)) {
        break label$13
       }
      }
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$13
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$14_1) {
      break label$11
     }
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $125($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$27 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$27
    }
    $133($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$28 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$28
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$4 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$28
    }
    label$29 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$29
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$28
     }
    }
    $128($7_1 + 48 | 0 | 0, $5_1 | 0);
    $138($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
    $233_1 = i64toi32_i32$5;
    $233$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $237_1 = i64toi32_i32$2;
    $237$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$5;
    $239$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $243_1 = i64toi32_i32$2;
    $243$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $233$hi;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$4 = $239$hi;
    i64toi32_i32$1 = $243$hi;
    $129($7_1 + 16 | 0 | 0, $233_1 | 0, i64toi32_i32$5 | 0, $237_1 | 0, i64toi32_i32$2 | 0, $239_1 | 0, i64toi32_i32$4 | 0, $243_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $253$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$4 = $253$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $171_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $172_1 = 0
      } else {
       $172_1 = 1
      }
      $173_1 = $172_1;
     } else {
      $173_1 = 0
     }
     $171_1 = $173_1;
    }
    if ($171_1) {
     break label$30
    }
    (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $128($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    $262_1 = i64toi32_i32$2;
    $262$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $266_1 = i64toi32_i32$1;
    $266$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $262$hi;
    i64toi32_i32$1 = $266$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $129($7_1 + 80 | 0 | 0, $262_1 | 0, i64toi32_i32$2 | 0, $266_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $270_1 = i64toi32_i32$4;
    $270$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $274_1 = i64toi32_i32$5;
    $274$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $270$hi;
    i64toi32_i32$5 = $274$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $129($7_1 + 64 | 0 | 0, $270_1 | 0, i64toi32_i32$4 | 0, $274_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $284_1 = i64toi32_i32$1;
    $284$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $284$hi;
    i64toi32_i32$4 = $284_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $174_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $175_1 = 0
      } else {
       $175_1 = 1
      }
      $176_1 = $175_1;
     } else {
      $176_1 = 0
     }
     $174_1 = $176_1;
    }
    if ($174_1) {
     break label$31
    }
    (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $128($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
    $293_1 = i64toi32_i32$5;
    $293$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $297_1 = i64toi32_i32$2;
    $297$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $293$hi;
    i64toi32_i32$2 = $297$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $129($7_1 + 128 | 0 | 0, $293_1 | 0, i64toi32_i32$5 | 0, $297_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $301_1 = i64toi32_i32$1;
    $301$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $305_1 = i64toi32_i32$4;
    $305$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $301$hi;
    i64toi32_i32$4 = $305$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $129($7_1 + 112 | 0 | 0, $301_1 | 0, i64toi32_i32$1 | 0, $305_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$10;
   }
   label$32 : {
    if (!$16_1) {
     break label$32
    }
    label$33 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$33
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$34 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$35 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$35
    }
    if (($12_1 | 0) > ($8_1 | 0)) {
     break label$35
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$35
    }
    label$36 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$36
     }
     $128($7_1 + 192 | 0 | 0, $5_1 | 0);
     $138($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 196 | 0) >> 2] | 0;
     $354_1 = i64toi32_i32$5;
     $354$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $358_1 = i64toi32_i32$2;
     $358$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
     $360 = i64toi32_i32$5;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $364 = i64toi32_i32$2;
     $364$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $354$hi;
     i64toi32_i32$2 = $358$hi;
     i64toi32_i32$4 = $360$hi;
     i64toi32_i32$1 = $364$hi;
     $129($7_1 + 160 | 0 | 0, $354_1 | 0, i64toi32_i32$5 | 0, $358_1 | 0, i64toi32_i32$2 | 0, $360 | 0, i64toi32_i32$4 | 0, $364 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    label$37 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$37
     }
     $128($7_1 + 272 | 0 | 0, $5_1 | 0);
     $138($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $383 = i64toi32_i32$1;
     $383$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $387 = i64toi32_i32$4;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $389 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $393 = i64toi32_i32$4;
     $393$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $383$hi;
     i64toi32_i32$4 = $387$hi;
     i64toi32_i32$2 = $389$hi;
     i64toi32_i32$5 = $393$hi;
     $129($7_1 + 240 | 0 | 0, $383 | 0, i64toi32_i32$1 | 0, $387 | 0, i64toi32_i32$4 | 0, $389 | 0, i64toi32_i32$2 | 0, $393 | 0, i64toi32_i32$5 | 0);
     $128($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 3056 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $404 = i64toi32_i32$5;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $408 = i64toi32_i32$2;
     $408$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
     $410 = i64toi32_i32$5;
     $410$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $414 = i64toi32_i32$2;
     $414$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $404$hi;
     i64toi32_i32$2 = $408$hi;
     i64toi32_i32$4 = $410$hi;
     i64toi32_i32$1 = $414$hi;
     $142($7_1 + 208 | 0 | 0, $404 | 0, i64toi32_i32$5 | 0, $408 | 0, i64toi32_i32$2 | 0, $410 | 0, i64toi32_i32$4 | 0, $414 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$38 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$38
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$35
     }
    }
    $128($7_1 + 352 | 0 | 0, $5_1 | 0);
    $138($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $442 = i64toi32_i32$1;
    $442$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $446 = i64toi32_i32$4;
    $446$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $448 = i64toi32_i32$1;
    $448$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $452 = i64toi32_i32$4;
    $452$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $442$hi;
    i64toi32_i32$4 = $446$hi;
    i64toi32_i32$2 = $448$hi;
    i64toi32_i32$5 = $452$hi;
    $129($7_1 + 320 | 0 | 0, $442 | 0, i64toi32_i32$1 | 0, $446 | 0, i64toi32_i32$4 | 0, $448 | 0, i64toi32_i32$2 | 0, $452 | 0, i64toi32_i32$5 | 0);
    $128($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 3016 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 324 | 0) >> 2] | 0;
    $462 = i64toi32_i32$5;
    $462$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $466 = i64toi32_i32$2;
    $466$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $468 = i64toi32_i32$5;
    $468$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $472 = i64toi32_i32$2;
    $472$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $462$hi;
    i64toi32_i32$2 = $466$hi;
    i64toi32_i32$4 = $468$hi;
    i64toi32_i32$1 = $472$hi;
    $129($7_1 + 288 | 0 | 0, $462 | 0, i64toi32_i32$5 | 0, $466 | 0, i64toi32_i32$2 | 0, $468 | 0, i64toi32_i32$4 | 0, $472 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$39 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$39
    }
    break label$39;
   };
   $16_1 = 0;
   label$40 : {
    label$41 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$41
     }
     $14_1 = 0;
     break label$40;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$42 : {
     label$43 : {
      if ($2_1) {
       break label$43
      }
      $14_1 = 0;
      $2_1 = 0;
      break label$42;
     }
     $11_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 3056 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $13_1 = 0;
     $1_1 = 0;
     $14_1 = 0;
     label$44 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $511 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $12_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $13_1 = $12_1 + $13_1 | 0;
      HEAP32[$511 >> 2] = $13_1;
      $13_1 = ($1_1 | 0) == ($14_1 | 0) & !$13_1 | 0;
      $14_1 = $13_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
      $8_1 = $13_1 ? $8_1 + -9 | 0 : $8_1;
      $13_1 = Math_imul($17_1, $15_1 - Math_imul($12_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$44
      }
      break label$44;
     };
     if (!$13_1) {
      break label$42
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$45 : while (1) {
    $12_1 = ($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
    label$46 : {
     label$47 : while (1) {
      label$48 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$48
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$46
       }
       if ((HEAP32[$12_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$46
       }
      }
      $15_1 = $2_1 + 2047 | 0;
      $13_1 = 0;
      $11_1 = $2_1;
      label$49 : while (1) {
       $2_1 = $11_1;
       label$50 : {
        label$51 : {
         $1_1 = $15_1 & 2047 | 0;
         $11_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $11_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $177_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $177_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $589$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $591$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $589$hi;
         i64toi32_i32$4 = $177_1;
         i64toi32_i32$2 = $591$hi;
         i64toi32_i32$5 = $13_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $19_1 = i64toi32_i32$3;
         $19$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$51
         }
         $13_1 = 0;
         break label$50;
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $599 = i64toi32_i32$0;
        $599$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = $599$hi;
        i64toi32_i32$4 = $599;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $13_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $15_1 = $19_1;
       HEAP32[$11_1 >> 2] = $19_1;
       $11_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($14_1 | 0) ? $2_1 : $19_1 ? $2_1 : $1_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($14_1 | 0)) {
        continue label$49
       }
       break label$49;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$13_1) {
       continue label$47
      }
      break label$47;
     };
     label$52 : {
      $14_1 = ($14_1 + -1 | 0) & 2047 | 0;
      if (($14_1 | 0) != ($11_1 | 0)) {
       break label$52
      }
      $1_1 = ($7_1 + 784 | 0) + ((($11_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $2_1 = ($11_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $13_1;
     continue label$45;
    }
    break label$45;
   };
   label$53 : {
    label$54 : while (1) {
     $6_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$55 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$56 : {
       label$57 : while (1) {
        $11_1 = $14_1;
        $1_1 = 0;
        label$58 : {
         label$59 : {
          label$60 : while (1) {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) == ($2_1 | 0)) {
            break label$59
           }
           $14_1 = HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 3040 | 0) >> 2] | 0;
           if ($14_1 >>> 0 < $13_1 >>> 0) {
            break label$59
           }
           if ($14_1 >>> 0 > $13_1 >>> 0) {
            break label$58
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$60
           }
           break label$60;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$58
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$61 : while (1) {
          label$62 : {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) != ($2_1 | 0)) {
            break label$62
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $129($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $138($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $740 = i64toi32_i32$4;
          $740$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $744 = i64toi32_i32$1;
          $744$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $746 = i64toi32_i32$4;
          $746$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $750 = i64toi32_i32$1;
          $750$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $740$hi;
          i64toi32_i32$1 = $744$hi;
          i64toi32_i32$5 = $746$hi;
          i64toi32_i32$3 = $750$hi;
          $132($7_1 + 736 | 0 | 0, $740 | 0, i64toi32_i32$4 | 0, $744 | 0, i64toi32_i32$1 | 0, $746 | 0, i64toi32_i32$5 | 0, $750 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$61
          }
          break label$61;
         };
         $128($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $769 = i64toi32_i32$3;
         $769$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $773 = i64toi32_i32$5;
         $773$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $769$hi;
         i64toi32_i32$4 = $773$hi;
         $129($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $769 | 0, i64toi32_i32$1 | 0, $773 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$4;
         $13_1 = $16_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $15_1 = ($1_1 | 0) < ($3_1 | 0);
         $14_1 = $15_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($14_1 | 0) <= (112 | 0)) {
          break label$56
         }
         i64toi32_i32$4 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         break label$53;
        }
        $16_1 = $15_1 + $16_1 | 0;
        $14_1 = $2_1;
        if (($11_1 | 0) == ($2_1 | 0)) {
         continue label$57
        }
        break label$57;
       };
       $12_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $14_1 = $11_1;
       label$63 : while (1) {
        $13_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $815 = $13_1;
        $13_1 = HEAP32[$13_1 >> 2] | 0;
        $1_1 = ($13_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$815 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($14_1 | 0) & !$1_1 | 0;
        $14_1 = $1_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($13_1 & $17_1 | 0, $12_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($2_1 | 0)) {
         continue label$63
        }
        break label$63;
       };
       if (!$1_1) {
        continue label$55
       }
       label$64 : {
        if (($6_1 | 0) == ($14_1 | 0)) {
         break label$64
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $6_1;
        continue label$54;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $14_1 = $6_1;
       continue label$55;
      }
      break label$55;
     };
     break label$54;
    };
    $133($7_1 + 656 | 0 | 0, +(+$136(+(1.0), 225 - $14_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $877 = i64toi32_i32$4;
    $877$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $881 = i64toi32_i32$1;
    $881$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $877$hi;
    i64toi32_i32$1 = $881$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $137($7_1 + 688 | 0 | 0, $877 | 0, i64toi32_i32$4 | 0, $881 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 696 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 700 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $133($7_1 + 640 | 0 | 0, +(+$136(+(1.0), 113 - $14_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $898 = i64toi32_i32$3;
    $898$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $902 = i64toi32_i32$5;
    $902$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $898$hi;
    i64toi32_i32$4 = $902$hi;
    $144($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $898 | 0, i64toi32_i32$1 | 0, $902 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $139($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $918 = i64toi32_i32$3;
    $918$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $922 = i64toi32_i32$5;
    $922$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $918$hi;
    i64toi32_i32$4 = $922$hi;
    $132($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $918 | 0, i64toi32_i32$1 | 0, $922 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
   }
   label$65 : {
    $8_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($2_1 | 0)) {
     break label$65
    }
    label$66 : {
     label$67 : {
      $8_1 = HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$67
      }
      label$68 : {
       if ($8_1) {
        break label$68
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$66
       }
      }
      $133($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $959 = i64toi32_i32$4;
      $959$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $963 = i64toi32_i32$1;
      $963$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $959$hi;
      i64toi32_i32$3 = $963$hi;
      $132($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $959 | 0, i64toi32_i32$5 | 0, $963 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$66;
     }
     label$69 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$69
      }
      $133($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $982 = i64toi32_i32$3;
      $982$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $986 = i64toi32_i32$5;
      $986$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $982$hi;
      i64toi32_i32$4 = $986$hi;
      $132($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $982 | 0, i64toi32_i32$1 | 0, $986 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      break label$66;
     }
     $25_1 = +($5_1 | 0);
     label$70 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$70
      }
      $133($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1009 = i64toi32_i32$4;
      $1009$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1013 = i64toi32_i32$1;
      $1013$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1009$hi;
      i64toi32_i32$3 = $1013$hi;
      $132($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1009 | 0, i64toi32_i32$5 | 0, $1013 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$66;
     }
     $133($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1029 = i64toi32_i32$3;
     $1029$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1033 = i64toi32_i32$5;
     $1033$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1029$hi;
     i64toi32_i32$4 = $1033$hi;
     $132($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1029 | 0, i64toi32_i32$1 | 0, $1033 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
    }
    if (($14_1 | 0) > (111 | 0)) {
     break label$65
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $144($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1047 = i64toi32_i32$3;
    $1047$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 476 | 0) >> 2] | 0;
    $1049 = i64toi32_i32$5;
    $1049$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1047$hi;
    i64toi32_i32$5 = $1049$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($134($1047 | 0, i64toi32_i32$3 | 0, $1049 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$65
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $132($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 456 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $22$hi;
   $132($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1069 = i64toi32_i32$4;
   $1069$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1073 = i64toi32_i32$1;
   $1073$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1069$hi;
   i64toi32_i32$1 = $1073$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $139($7_1 + 416 | 0 | 0, $1069 | 0, i64toi32_i32$4 | 0, $1073 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$71 : {
    if (($13_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$71
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $145($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $129($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1096 = i64toi32_i32$4;
    $1096$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $1098 = i64toi32_i32$1;
    $1098$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1096$hi;
    i64toi32_i32$1 = $1098$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2_1 = $135($1096 | 0, i64toi32_i32$4 | 0, $1098 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1104 = i64toi32_i32$5;
    $1104$hi = i64toi32_i32$3;
    $13_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1104$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $20_1 : $1104;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1111 = i64toi32_i32$1;
    $1111$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $1111$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $21_1 : $1111;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$0;
    $16_1 = $16_1 + (($2_1 | 0) > (-1 | 0)) | 0;
    label$72 : {
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 0;
     if (($134($19_1 | 0, $19$hi | 0, $22_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) & ($15_1 & ($13_1 | ($14_1 | 0) != ($1_1 | 0) | 0) | 0) | 0) {
      break label$72
     }
     if (($16_1 + 110 | 0 | 0) <= ($10_1 | 0)) {
      break label$71
     }
    }
    (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   $140($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0);
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $126($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $126($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   $3_1 = $5_1 + -48 | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3_1 = 0;
    label$11 : while (1) {
     $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $126($0_1 | 0) | 0;
     }
     $3_1 = $3_1 + -48 | 0;
     label$14 : {
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $126($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $126($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $150($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $7_1 = 0, $11_1 = 0, $6_1 = 0, $4_1 = 0, $12_1 = 0, $12$hi = 0, $8_1 = 0, $32_1 = 0, $33_1 = 0, $185_1 = 0, $185$hi = 0, $242_1 = 0, $242$hi = 0, $324$hi = 0, $327_1 = 0, $327$hi = 0, $406$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$9;
           }
           $5_1 = $126($0_1 | 0) | 0;
          }
          if ($101($5_1 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6_1 = 0;
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$11;
          }
          $5_1 = $126($0_1 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1_1 & -17 | 0) {
            break label$15
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$16;
            }
            $5_1 = $126($0_1 | 0) | 0;
           }
           label$18 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$19;
             }
             $5_1 = $126($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 3121 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$2
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 3121 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $125($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          break label$1;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $9_1 = 0;
         $9$hi = i64toi32_i32$0;
         label$23 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1_1 = 0;
          label$24 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$25 : {
            label$26 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$25;
            }
            $5_1 = $126($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$27 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$24
            }
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $10_1 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11_1 = $2_1;
         $11$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$29;
           }
           $5_1 = $126($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $9_1 = i64toi32_i32$4;
          $9$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $9$hi;
          i64toi32_i32$0 = $9_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $11_1 = $2_1;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1_1 = 10;
         break label$4;
        }
        (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       label$32 : {
        $2_1 = HEAPU8[($5_1 + 3121 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$32
        }
        $7_1 = 0;
        label$33 : while (1) {
         $7_1 = $2_1 + Math_imul($7_1, $1_1) | 0;
         label$34 : {
          label$35 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$34;
          }
          $5_1 = $126($0_1 | 0) | 0;
         }
         $2_1 = HEAPU8[($5_1 + 3121 | 0) >> 0] | 0;
         label$36 : {
          if ($7_1 >>> 0 > 119304646 >>> 0) {
           break label$36
          }
          if ($1_1 >>> 0 > $2_1 >>> 0) {
           continue label$33
          }
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $9_1 = $7_1;
        $9$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $10_1 = $1_1;
       $10$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $242_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $242$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $242$hi;
        i64toi32_i32$3 = $242_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$38;
         }
         $5_1 = $126($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        $2_1 = HEAPU8[($5_1 + 3121 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$0 = 0;
        $141($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 3377 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$40 : {
       $2_1 = HEAPU8[($5_1 + 3121 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$40
       }
       $7_1 = 0;
       label$41 : while (1) {
        $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
        label$42 : {
         label$43 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$42;
         }
         $5_1 = $126($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($5_1 + 3121 | 0) >> 0] | 0;
        label$44 : {
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$44
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$41
         }
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $7_1;
       $9$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $10_1 = $8_1;
      $10$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$0 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $32_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $32_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $11_1 = $32_1;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$0 = $9_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $33_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $33_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $324$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $327_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $324$hi;
       i64toi32_i32$5 = $33_1;
       i64toi32_i32$3 = $327$hi;
       i64toi32_i32$4 = $327_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $9$hi = i64toi32_i32$3;
       label$46 : {
        label$47 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$46;
        }
        $5_1 = $126($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$4 = $11_1;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$4
       }
       $2_1 = HEAPU8[($5_1 + 3121 | 0) >> 0] | 0;
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 3121 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $126($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 3121 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$53
      }
      if ($6_1) {
       break label$53
      }
      (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($9$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($9$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$1;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $406$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $406$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $125($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $151($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $48($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $49($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $152($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 35128;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = HEAP32[(HEAP32[(($44() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if ($3_1) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(1584 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $154($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $3_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $17$hi = 0, $15_1 = 0, $18$hi = 0, $17_1 = 0, $18_1 = 0, $19$hi = 0, $4_1 = 0, $8_1 = 0, $14_1 = 0, $19_1 = 0, $16_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $58_1 = 0, $68$hi = 0, $70$hi = 0, $75_1 = 0, $75$hi = 0, $174_1 = 0, $184_1 = 0, $246$hi = 0, $248$hi = 0, $253_1 = 0, $253$hi = 0, $294_1 = 0, $294$hi = 0, $300_1 = 0, $300$hi = 0, $301$hi = 0, $407 = 0, $407$hi = 0, $413 = 0, $413$hi = 0, $414$hi = 0, $616 = 0, $616$hi = 0, $621 = 0, $621$hi = 0, $649$hi = 0, $651$hi = 0, $657 = 0, $657$hi = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $31($0_1 | 0) | 0;
  }
  label$2 : {
   $6_1 = HEAPU8[$1_1 >> 0] | 0;
   if (!$6_1) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   $17_1 = 0;
   $17$hi = i64toi32_i32$0;
   $4_1 = 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        label$8 : {
         label$9 : {
          if (!($101($6_1 & 255 | 0 | 0) | 0)) {
           break label$9
          }
          label$10 : while (1) {
           $6_1 = $1_1;
           $1_1 = $1_1 + 1 | 0;
           if ($101(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
            continue label$10
           }
           break label$10;
          };
          i64toi32_i32$0 = 0;
          $125($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$11 : while (1) {
           label$12 : {
            label$13 : {
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$13
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
             $1_1 = HEAPU8[$1_1 >> 0] | 0;
             break label$12;
            }
            $1_1 = $126($0_1 | 0) | 0;
           }
           if ($101($1_1 | 0) | 0) {
            continue label$11
           }
           break label$11;
          };
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          label$14 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$14
           }
           $1_1 = $1_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
          }
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $68$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$1 = $68$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$3 = $17_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $70$hi = i64toi32_i32$5;
          i64toi32_i32$2 = $1_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
          $75_1 = i64toi32_i32$2;
          $75$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $70$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$2 = $75$hi;
          i64toi32_i32$3 = $75_1;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $17_1 = i64toi32_i32$0;
          $17$hi = i64toi32_i32$4;
          break label$8;
         }
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             $6_1 = HEAPU8[$1_1 >> 0] | 0;
             if (($6_1 | 0) != (37 | 0)) {
              break label$18
             }
             $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
             if (($7_1 | 0) == (42 | 0)) {
              break label$17
             }
             if (($7_1 | 0) != (37 | 0)) {
              break label$16
             }
            }
            i64toi32_i32$4 = 0;
            $125($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
            $6_1 = $1_1 + (($6_1 | 0) == (37 | 0)) | 0;
            label$19 : {
             label$20 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$19;
             }
             $1_1 = $126($0_1 | 0) | 0;
            }
            label$21 : {
             if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
              break label$21
             }
             label$22 : {
              if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
               break label$22
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
             }
             $8_1 = 0;
             if (($1_1 | 0) >= (0 | 0)) {
              break label$2
             }
             break label$4;
            }
            i64toi32_i32$4 = $17$hi;
            i64toi32_i32$5 = $17_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
             i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
            }
            $17_1 = i64toi32_i32$2;
            $17$hi = i64toi32_i32$0;
            break label$8;
           }
           $6_1 = $1_1 + 2 | 0;
           $9_1 = 0;
           break label$15;
          }
          label$23 : {
           if (!($42($7_1 | 0) | 0)) {
            break label$23
           }
           if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break label$23
           }
           $6_1 = $1_1 + 3 | 0;
           $9_1 = $155($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
           break label$15;
          }
          $6_1 = $1_1 + 1 | 0;
          $9_1 = HEAP32[$2_1 >> 2] | 0;
          $2_1 = $2_1 + 4 | 0;
         }
         $8_1 = 0;
         $1_1 = 0;
         label$24 : {
          if (!($42(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
           break label$24
          }
          label$25 : while (1) {
           $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
           $7_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $6_1 = $6_1 + 1 | 0;
           if ($42($7_1 | 0) | 0) {
            continue label$25
           }
           break label$25;
          };
         }
         label$26 : {
          label$27 : {
           $10_1 = HEAPU8[$6_1 >> 0] | 0;
           if (($10_1 | 0) == (109 | 0)) {
            break label$27
           }
           $7_1 = $6_1;
           break label$26;
          }
          $7_1 = $6_1 + 1 | 0;
          $11_1 = 0;
          $8_1 = ($9_1 | 0) != (0 | 0);
          $10_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
          $12_1 = 0;
         }
         $6_1 = $7_1 + 1 | 0;
         $13_1 = 3;
         label$28 : {
          label$29 : {
           switch (($10_1 & 255 | 0) + -65 | 0 | 0) {
           case 39:
            $174_1 = $7_1 + 2 | 0;
            $7_1 = (HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
            $6_1 = $7_1 ? $174_1 : $6_1;
            $13_1 = $7_1 ? -2 : -1;
            break label$28;
           case 43:
            $184_1 = $7_1 + 2 | 0;
            $7_1 = (HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
            $6_1 = $7_1 ? $184_1 : $6_1;
            $13_1 = $7_1 ? 3 : 1;
            break label$28;
           case 51:
           case 57:
            $13_1 = 1;
            break label$28;
           case 11:
            $13_1 = 2;
            break label$28;
           case 41:
            break label$28;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break label$29;
           default:
            break label$4;
           };
          }
          $13_1 = 0;
          $6_1 = $7_1;
         }
         $7_1 = HEAPU8[$6_1 >> 0] | 0;
         $10_1 = ($7_1 & 47 | 0 | 0) == (3 | 0);
         $14_1 = $10_1 ? 1 : $13_1;
         label$34 : {
          $15_1 = $10_1 ? $7_1 | 32 | 0 : $7_1;
          if (($15_1 | 0) == (91 | 0)) {
           break label$34
          }
          label$35 : {
           label$36 : {
            if (($15_1 | 0) == (110 | 0)) {
             break label$36
            }
            if (($15_1 | 0) != (99 | 0)) {
             break label$35
            }
            $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
            break label$34;
           }
           i64toi32_i32$0 = $17$hi;
           $156($9_1 | 0, $14_1 | 0, $17_1 | 0, i64toi32_i32$0 | 0);
           break label$8;
          }
          i64toi32_i32$0 = 0;
          $125($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$37 : while (1) {
           label$38 : {
            label$39 : {
             $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$39
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
             $7_1 = HEAPU8[$7_1 >> 0] | 0;
             break label$38;
            }
            $7_1 = $126($0_1 | 0) | 0;
           }
           if ($101($7_1 | 0) | 0) {
            continue label$37
           }
           break label$37;
          };
          $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          label$40 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$40
           }
           $7_1 = $7_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
          }
          i64toi32_i32$4 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $246$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $17$hi;
          i64toi32_i32$5 = $246$hi;
          i64toi32_i32$4 = i64toi32_i32$0;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$3 = $17_1;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $248$hi = i64toi32_i32$2;
          i64toi32_i32$4 = $7_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
          $253_1 = i64toi32_i32$4;
          $253$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $248$hi;
          i64toi32_i32$5 = i64toi32_i32$1;
          i64toi32_i32$4 = $253$hi;
          i64toi32_i32$3 = $253_1;
          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $17_1 = i64toi32_i32$0;
          $17$hi = i64toi32_i32$1;
         }
         i64toi32_i32$5 = $1_1;
         i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
         $18_1 = i64toi32_i32$5;
         $18$hi = i64toi32_i32$1;
         $125($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0);
         label$41 : {
          label$42 : {
           $13_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           $7_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
           if ($13_1 >>> 0 >= $7_1 >>> 0) {
            break label$42
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $13_1 + 1 | 0;
           break label$41;
          }
          if (($126($0_1 | 0) | 0 | 0) < (0 | 0)) {
           break label$4
          }
          $7_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
         }
         label$43 : {
          if (!$7_1) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $7_1 = 16;
         label$44 : {
          label$45 : {
           label$46 : {
            label$47 : {
             label$48 : {
              label$49 : {
               label$50 : {
                switch ($15_1 + -88 | 0 | 0) {
                default:
                 $1_1 = $15_1 + -65 | 0;
                 if ($1_1 >>> 0 > 6 >>> 0) {
                  break label$44
                 }
                 if (!((1 << $1_1 | 0) & 113 | 0)) {
                  break label$44
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 $146($3_1 | 0, $0_1 | 0, $14_1 | 0, 0 | 0);
                 i64toi32_i32$2 = $0_1;
                 i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                 $294_1 = i64toi32_i32$1;
                 $294$hi = i64toi32_i32$5;
                 i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
                 i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                 $300_1 = i64toi32_i32$1;
                 $300$hi = i64toi32_i32$5;
                 i64toi32_i32$5 = 0;
                 i64toi32_i32$2 = 0;
                 i64toi32_i32$1 = $300$hi;
                 i64toi32_i32$3 = $300_1;
                 i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                 i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                 i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                 i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                 $301$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = $294$hi;
                 i64toi32_i32$5 = $294_1;
                 i64toi32_i32$2 = $301$hi;
                 i64toi32_i32$3 = i64toi32_i32$4;
                 if ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                  break label$3
                 }
                 if (!$9_1) {
                  break label$44
                 }
                 i64toi32_i32$3 = $3_1;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                 $18_1 = i64toi32_i32$5;
                 $18$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                 $19_1 = i64toi32_i32$0;
                 $19$hi = i64toi32_i32$5;
                 switch ($14_1 | 0) {
                 case 2:
                  break label$46;
                 case 1:
                  break label$47;
                 case 0:
                  break label$48;
                 default:
                  break label$44;
                 };
                case 3:
                case 11:
                case 27:
                 label$56 : {
                  if (($15_1 & 239 | 0 | 0) != (99 | 0)) {
                   break label$56
                  }
                  $3($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  if (($15_1 | 0) != (115 | 0)) {
                   break label$45
                  }
                  HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                  HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                  $58_1 = 0;
                  HEAP16[($3_1 + 42 | 0) >> 1] = $58_1;
                  HEAP16[($3_1 + 44 | 0) >> 1] = $58_1 >>> 16 | 0;
                  break label$45;
                 }
                 $13_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                 $7_1 = ($13_1 | 0) == (94 | 0);
                 $3($3_1 + 32 | 0 | 0, $7_1 | 0, 257 | 0) | 0;
                 HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                 $10_1 = $7_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                 label$57 : {
                  label$58 : {
                   label$59 : {
                    label$60 : {
                     $6_1 = HEAPU8[($6_1 + ($7_1 ? 2 : 1) | 0) >> 0] | 0;
                     if (($6_1 | 0) == (45 | 0)) {
                      break label$60
                     }
                     if (($6_1 | 0) == (93 | 0)) {
                      break label$59
                     }
                     $13_1 = ($13_1 | 0) != (94 | 0);
                     $6_1 = $10_1;
                     break label$57;
                    }
                    $13_1 = ($13_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 78 | 0) >> 0] = $13_1;
                    break label$58;
                   }
                   $13_1 = ($13_1 | 0) != (94 | 0);
                   HEAP8[($3_1 + 126 | 0) >> 0] = $13_1;
                  }
                  $6_1 = $10_1 + 1 | 0;
                 }
                 label$61 : while (1) {
                  label$62 : {
                   label$63 : {
                    $7_1 = HEAPU8[$6_1 >> 0] | 0;
                    if (($7_1 | 0) == (45 | 0)) {
                     break label$63
                    }
                    if (!$7_1) {
                     break label$4
                    }
                    if (($7_1 | 0) != (93 | 0)) {
                     break label$62
                    }
                    break label$45;
                   }
                   $7_1 = 45;
                   $16_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                   if (!$16_1) {
                    break label$62
                   }
                   if (($16_1 | 0) == (93 | 0)) {
                    break label$62
                   }
                   $10_1 = $6_1 + 1 | 0;
                   label$64 : {
                    label$65 : {
                     $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                     if ($6_1 >>> 0 < $16_1 >>> 0) {
                      break label$65
                     }
                     $7_1 = $16_1;
                     break label$64;
                    }
                    label$66 : while (1) {
                     $6_1 = $6_1 + 1 | 0;
                     HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $13_1;
                     $7_1 = HEAPU8[$10_1 >> 0] | 0;
                     if ($6_1 >>> 0 < $7_1 >>> 0) {
                      continue label$66
                     }
                     break label$66;
                    };
                   }
                   $6_1 = $10_1;
                  }
                  HEAP8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $13_1;
                  $6_1 = $6_1 + 1 | 0;
                  continue label$61;
                 };
                case 23:
                 $7_1 = 8;
                 break label$49;
                case 12:
                case 29:
                 $7_1 = 10;
                 break label$49;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break label$44;
                case 0:
                case 24:
                case 32:
                 break label$49;
                case 17:
                 break label$50;
                };
               }
               $7_1 = 0;
              }
              i64toi32_i32$5 = -1;
              i64toi32_i32$5 = $150($0_1 | 0, $7_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $18_1 = i64toi32_i32$5;
              $18$hi = i64toi32_i32$0;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $407 = i64toi32_i32$0;
              $407$hi = i64toi32_i32$5;
              i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
              i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
              $413 = i64toi32_i32$0;
              $413$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = $413$hi;
              i64toi32_i32$2 = $413;
              i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
              $414$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $407$hi;
              i64toi32_i32$5 = $407;
              i64toi32_i32$3 = $414$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
               break label$3
              }
              label$67 : {
               if (!$9_1) {
                break label$67
               }
               if (($15_1 | 0) != (112 | 0)) {
                break label$67
               }
               i64toi32_i32$5 = $18$hi;
               HEAP32[$9_1 >> 2] = $18_1;
               break label$44;
              }
              i64toi32_i32$5 = $18$hi;
              $156($9_1 | 0, $14_1 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
              break label$44;
             }
             i64toi32_i32$5 = $19$hi;
             i64toi32_i32$5 = $18$hi;
             i64toi32_i32$5 = $19$hi;
             i64toi32_i32$4 = $18$hi;
             (wasm2js_i32$0 = $9_1, wasm2js_f32$0 = Math_fround($151($19_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$4 | 0))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             break label$44;
            }
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$5 = $18$hi;
            (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$50($19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$5 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
            break label$44;
           }
           i64toi32_i32$5 = $19$hi;
           i64toi32_i32$4 = $9_1;
           HEAP32[i64toi32_i32$4 >> 2] = $19_1;
           HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
           i64toi32_i32$5 = $18$hi;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $18_1;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
           break label$44;
          }
          $10_1 = ($15_1 | 0) == (99 | 0);
          $13_1 = $10_1 ? $1_1 + 1 | 0 : 31;
          label$68 : {
           label$69 : {
            $15_1 = ($14_1 | 0) != (1 | 0);
            if ($15_1) {
             break label$69
            }
            $7_1 = $9_1;
            label$70 : {
             if (!$8_1) {
              break label$70
             }
             $7_1 = $5($13_1 << 2 | 0 | 0) | 0;
             if (!$7_1) {
              break label$5
             }
            }
            i64toi32_i32$4 = $3_1;
            i64toi32_i32$5 = 0;
            HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$5;
            $1_1 = 0;
            label$71 : while (1) {
             $12_1 = $7_1;
             label$72 : {
              label$73 : while (1) {
               label$74 : {
                label$75 : {
                 $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$75
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                 $7_1 = HEAPU8[$7_1 >> 0] | 0;
                 break label$74;
                }
                $7_1 = $126($0_1 | 0) | 0;
               }
               if (!(HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                break label$72
               }
               HEAP8[($3_1 + 27 | 0) >> 0] = $7_1;
               $7_1 = $152($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
               if (($7_1 | 0) == (-2 | 0)) {
                continue label$73
               }
               if (($7_1 | 0) == (-1 | 0)) {
                break label$6
               }
               label$76 : {
                if (!$12_1) {
                 break label$76
                }
                HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                $1_1 = $1_1 + 1 | 0;
               }
               if (!$8_1) {
                continue label$73
               }
               if (($1_1 | 0) != ($13_1 | 0)) {
                continue label$73
               }
               break label$73;
              };
              $13_1 = $13_1 << 1 | 0 | 1 | 0;
              $7_1 = $7($12_1 | 0, $13_1 << 2 | 0 | 0) | 0;
              if ($7_1) {
               continue label$71
              }
              break label$6;
             }
             break label$71;
            };
            if (!($153($3_1 + 296 | 0 | 0) | 0)) {
             break label$6
            }
            $11_1 = 0;
            break label$68;
           }
           label$77 : {
            if (!$8_1) {
             break label$77
            }
            $1_1 = 0;
            $7_1 = $5($13_1 | 0) | 0;
            if (!$7_1) {
             break label$5
            }
            label$78 : while (1) {
             $11_1 = $7_1;
             label$79 : while (1) {
              label$80 : {
               label$81 : {
                $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$81
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                $7_1 = HEAPU8[$7_1 >> 0] | 0;
                break label$80;
               }
               $7_1 = $126($0_1 | 0) | 0;
              }
              label$82 : {
               if (HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$82
               }
               $12_1 = 0;
               break label$68;
              }
              HEAP8[($11_1 + $1_1 | 0) >> 0] = $7_1;
              $1_1 = $1_1 + 1 | 0;
              if (($1_1 | 0) != ($13_1 | 0)) {
               continue label$79
              }
              break label$79;
             };
             $12_1 = 0;
             $13_1 = $13_1 << 1 | 0 | 1 | 0;
             $7_1 = $7($11_1 | 0, $13_1 | 0) | 0;
             if (!$7_1) {
              break label$4
             }
             continue label$78;
            };
           }
           $1_1 = 0;
           label$83 : {
            if (!$9_1) {
             break label$83
            }
            label$84 : while (1) {
             label$85 : {
              label$86 : {
               $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$86
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
               $7_1 = HEAPU8[$7_1 >> 0] | 0;
               break label$85;
              }
              $7_1 = $126($0_1 | 0) | 0;
             }
             label$87 : {
              if (HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
               break label$87
              }
              $12_1 = 0;
              $11_1 = $9_1;
              break label$68;
             }
             HEAP8[($9_1 + $1_1 | 0) >> 0] = $7_1;
             $1_1 = $1_1 + 1 | 0;
             continue label$84;
            };
           }
           label$88 : while (1) {
            label$89 : {
             label$90 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$90
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$89;
             }
             $1_1 = $126($0_1 | 0) | 0;
            }
            if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
             continue label$88
            }
            break label$88;
           };
           $11_1 = 0;
           $12_1 = 0;
           $1_1 = 0;
          }
          $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          label$91 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$91
           }
           $7_1 = $7_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
          }
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $616 = i64toi32_i32$5;
          $616$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
          $621 = i64toi32_i32$5;
          $621$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $616$hi;
          i64toi32_i32$2 = $616;
          i64toi32_i32$5 = $621$hi;
          i64toi32_i32$3 = $621;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $19_1 = i64toi32_i32$0;
          $19$hi = i64toi32_i32$1;
          if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
           break label$3
          }
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = $19_1;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$3 = $18_1;
          if ($10_1 & ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) | 0) {
           break label$3
          }
          label$92 : {
           if (!$8_1) {
            break label$92
           }
           label$93 : {
            if ($15_1) {
             break label$93
            }
            HEAP32[$9_1 >> 2] = $12_1;
            break label$92;
           }
           HEAP32[$9_1 >> 2] = $11_1;
          }
          if ($10_1) {
           break label$44
          }
          label$94 : {
           if (!$12_1) {
            break label$94
           }
           HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
          }
          label$95 : {
           if ($11_1) {
            break label$95
           }
           $11_1 = 0;
           break label$44;
          }
          HEAP8[($11_1 + $1_1 | 0) >> 0] = 0;
         }
         i64toi32_i32$3 = $0_1;
         i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
         $649$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $17$hi;
         i64toi32_i32$1 = $649$hi;
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$4 = $17$hi;
         i64toi32_i32$2 = $17_1;
         i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $651$hi = i64toi32_i32$0;
         i64toi32_i32$3 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
         $657 = i64toi32_i32$3;
         $657$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $651$hi;
         i64toi32_i32$1 = i64toi32_i32$5;
         i64toi32_i32$3 = $657$hi;
         i64toi32_i32$2 = $657;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $17_1 = i64toi32_i32$4;
         $17$hi = i64toi32_i32$5;
         $4_1 = $4_1 + (($9_1 | 0) != (0 | 0)) | 0;
        }
        $1_1 = $6_1 + 1 | 0;
        $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
        if ($6_1) {
         continue label$7
        }
        break label$2;
       };
      }
      $11_1 = 0;
      break label$4;
     }
     $11_1 = 0;
     $12_1 = 0;
    }
    $4_1 = $4_1 ? $4_1 : -1;
   }
   if (!$8_1) {
    break label$2
   }
   $6($11_1 | 0);
   $6($12_1 | 0);
  }
  label$96 : {
   if (!$5_1) {
    break label$96
   }
   $32($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $4_1 | 0;
 }
 
 function $155($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1_1 >>> 0 > 1 >>> 0 ? (($1_1 << 2 | 0) + $0_1 | 0) + -4 | 0 : $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $156($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $43($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $4($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $158($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $3($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 9;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $154($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $159($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $157($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $158($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($31($0_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $124($0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$4;
   }
   $1_1 = $124($0_1 | 0) | 0;
  }
  $32($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $2_1 = $31($0_1 | 0) | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $32($0_1 | 0);
  }
  return ($1_1 >>> 5 | 0) & 1 | 0 | 0;
 }
 
 function $163($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $31($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $4($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($123($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $32($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $32($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $1_1 = $31($0_1 | 0) | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -49 | 0;
    if (!$1_1) {
     break label$1
    }
    $32($0_1 | 0);
    return;
   }
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -49 | 0;
  }
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   if (!($31($0_1 | 0) | 0)) {
    break label$1
   }
   $32($0_1 | 0);
  }
  return HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $0_1 = fimport$5($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
    if ($0_1) {
     break label$2
    }
    $0_1 = 59;
    $2_1 = 1;
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) == (2 | 0)) {
     break label$1
    }
   }
   (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = $0_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2_1 = 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $167() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $195_1 = 0, $208_1 = 0, $221_1 = 0, $234_1 = 0, $247_1 = 0, $260_1 = 0;
  $0_1 = global$0 - 240 | 0;
  global$0 = $0_1;
  label$1 : {
   if (HEAPU8[(0 + 35140 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP8[(0 + 35140 | 0) >> 0] = 1;
   label$2 : {
    if (HEAPU8[(0 + 35144 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 35144 | 0) >> 0] = 1;
   }
   label$3 : {
    if (HEAP32[(0 + 35132 | 0) >> 2] | 0) {
     break label$3
    }
    HEAP32[(0 + 35132 | 0) >> 2] = HEAP32[(0 + 3012 | 0) >> 2] | 0;
   }
   label$4 : {
    if (HEAP32[(0 + 35136 | 0) >> 2] | 0) {
     break label$4
    }
    HEAP32[(0 + 35136 | 0) >> 2] = HEAP32[(0 + 1032 | 0) >> 2] | 0;
   }
   label$5 : {
    label$6 : {
     $1_1 = HEAP32[(0 + 35148 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$6
     }
     if (HEAP32[($1_1 + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
      break label$5
     }
    }
    $168();
    $1_1 = $169(HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0, 16384 | 0) | 0;
    HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $1_1;
   }
   $170();
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : while (1) {
         $2_1 = HEAP32[(0 + 35156 | 0) >> 2] | 0;
         HEAP8[$2_1 >> 0] = HEAPU8[(0 + 35160 | 0) >> 0] | 0;
         $1_1 = HEAPU8[(0 + 35144 | 0) >> 0] | 0;
         $3_1 = $2_1;
         label$14 : while (1) {
          $4_1 = HEAPU8[((HEAPU8[$2_1 >> 0] | 0) + 3392 | 0) >> 0] | 0;
          label$15 : {
           $5_1 = $1_1 << 1 | 0;
           if (!(HEAPU16[($5_1 + 3648 | 0) >> 1] | 0)) {
            break label$15
           }
           HEAP32[(0 + 35168 | 0) >> 2] = $2_1;
           HEAP32[(0 + 35164 | 0) >> 2] = $1_1;
          }
          $6_1 = $4_1;
          label$16 : {
           $5_1 = (HEAP16[($5_1 + 5712 | 0) >> 1] | 0) + $4_1 | 0;
           if (($1_1 | 0) == (HEAP16[(($5_1 << 1 | 0) + 4320 | 0) >> 1] | 0 | 0)) {
            break label$16
           }
           label$17 : while (1) {
            label$18 : {
             $1_1 = HEAP16[(($1_1 << 1 | 0) + 6400 | 0) >> 1] | 0;
             if (($1_1 | 0) < (332 | 0)) {
              break label$18
             }
             $6_1 = HEAPU8[($4_1 + 7088 | 0) >> 0] | 0;
            }
            $4_1 = $6_1 & 255 | 0;
            $5_1 = (HEAP16[(($1_1 << 1 | 0) + 5712 | 0) >> 1] | 0) + $4_1 | 0;
            if (($1_1 & 65535 | 0 | 0) != (HEAPU16[(($5_1 << 1 | 0) + 4320 | 0) >> 1] | 0 | 0)) {
             continue label$17
            }
            break label$17;
           };
          }
          $2_1 = $2_1 + 1 | 0;
          $1_1 = HEAP16[(($5_1 << 1 | 0) + 7136 | 0) >> 1] | 0;
          if ((HEAPU16[(($1_1 << 1 | 0) + 5712 | 0) >> 1] | 0 | 0) != (645 | 0)) {
           continue label$14
          }
          label$19 : while (1) {
           label$20 : {
            $4_1 = HEAPU16[(($1_1 << 1 | 0) + 3648 | 0) >> 1] | 0;
            if ($4_1) {
             break label$20
            }
            $1_1 = HEAP32[(0 + 35164 | 0) >> 2] | 0;
            $4_1 = HEAPU16[(($1_1 << 1 | 0) + 3648 | 0) >> 1] | 0;
            $2_1 = HEAP32[(0 + 35168 | 0) >> 2] | 0;
           }
           HEAP32[(0 + 35172 | 0) >> 2] = $3_1;
           HEAP32[(0 + 35176 | 0) >> 2] = $2_1 - $3_1 | 0;
           HEAP8[(0 + 35160 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
           HEAP8[$2_1 >> 0] = 0;
           HEAP32[(0 + 35156 | 0) >> 2] = $2_1;
           $6_1 = ($4_1 << 16 | 0) >> 16 | 0;
           label$21 : {
            label$22 : while (1) {
             $4_1 = 266;
             label$23 : {
              switch ($6_1 | 0) {
              case 0:
               HEAP8[$2_1 >> 0] = HEAPU8[(0 + 35160 | 0) >> 0] | 0;
               $1_1 = HEAP32[(0 + 35164 | 0) >> 2] | 0;
               $2_1 = HEAP32[(0 + 35168 | 0) >> 2] | 0;
               continue label$19;
              case 3:
               $1_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
               $171($122(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0, $1_1 | 0);
               continue label$13;
              case 4:
               HEAP32[(0 + 32016 | 0) >> 2] = (HEAP32[(0 + 32016 | 0) >> 2] | 0) + 1 | 0;
               $4_1 = 258;
               break label$8;
              case 5:
               HEAP32[$0_1 >> 2] = 35360;
               $160(HEAP32[(0 + 35172 | 0) >> 2] | 0 | 0, 8520 | 0, $0_1 | 0) | 0;
               $4_1 = 259;
               break label$8;
              case 6:
               HEAP32[($0_1 + 16 | 0) >> 2] = 35360;
               $160(HEAP32[(0 + 35172 | 0) >> 2] | 0 | 0, 8525 | 0, $0_1 + 16 | 0 | 0) | 0;
               $4_1 = 259;
               break label$8;
              case 7:
               HEAP32[($0_1 + 32 | 0) >> 2] = 35360;
               $160(HEAP32[(0 + 35172 | 0) >> 2] | 0 | 0, 8530 | 0, $0_1 + 32 | 0 | 0) | 0;
               $4_1 = 259;
               break label$8;
              case 8:
               HEAP32[($0_1 + 48 | 0) >> 2] = 35360;
               $160((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 1 | 0 | 0, 8520 | 0, $0_1 + 48 | 0 | 0) | 0;
               $4_1 = 259;
               break label$8;
              case 9:
               HEAP32[($0_1 + 64 | 0) >> 2] = 35360;
               $160((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 1 | 0 | 0, 8525 | 0, $0_1 + 64 | 0 | 0) | 0;
               $4_1 = 259;
               break label$8;
              case 10:
               HEAP32[($0_1 + 80 | 0) >> 2] = 35360;
               $160((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 1 | 0 | 0, 8530 | 0, $0_1 + 80 | 0 | 0) | 0;
               $4_1 = 259;
               break label$8;
              case 11:
               HEAP32[($0_1 + 96 | 0) >> 2] = 35360;
               $160(HEAP32[(0 + 35172 | 0) >> 2] | 0 | 0, 8535 | 0, $0_1 + 96 | 0 | 0) | 0;
               $4_1 = 260;
               break label$8;
              case 12:
               HEAP32[(0 + 77768 | 0) >> 2] = 1;
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $1_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 264;
               if (($1_1 | 0) < (32 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 112 | 0) >> 2] = 31;
               $99(35184 | 0, 8539 | 0, $0_1 + 112 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 13:
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $1_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               if (($1_1 | 0) < (32 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 128 | 0) >> 2] = 31;
               $99(35184 | 0, 8588 | 0, $0_1 + 128 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 17:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               break label$8;
              case 18:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               break label$8;
              case 19:
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1 + 2 | 0;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               $195_1 = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $195_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               if (($1_1 | 0) < (2 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 144 | 0) >> 2] = 31;
               $99(35184 | 0, 8588 | 0, $0_1 + 144 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 20:
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 2 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1 + 4 | 0;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               $208_1 = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $208_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               if (($1_1 | 0) < (4 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 160 | 0) >> 2] = 31;
               $99(35184 | 0, 8588 | 0, $0_1 + 160 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 21:
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 2 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1 + 8 | 0;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               $221_1 = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $221_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               if (($1_1 | 0) < (8 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 176 | 0) >> 2] = 31;
               $99(35184 | 0, 8588 | 0, $0_1 + 176 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 22:
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 2 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1 + 16 | 0;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               $234_1 = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $234_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               if (($1_1 | 0) < (8 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 192 | 0) >> 2] = 31;
               $99(35184 | 0, 8588 | 0, $0_1 + 192 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 23:
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 2 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1 + 16 | 0;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               $247_1 = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $247_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               if (($1_1 | 0) < (10 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 208 | 0) >> 2] = 31;
               $99(35184 | 0, 8588 | 0, $0_1 + 208 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 24:
               $1_1 = $102((HEAP32[(0 + 35172 | 0) >> 2] | 0) + 2 | 0 | 0) | 0;
               i64toi32_i32$1 = $1_1 + 26 | 0;
               i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
               $260_1 = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = $260_1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               if (($1_1 | 0) < (2 | 0)) {
                break label$8
               }
               HEAP32[($0_1 + 224 | 0) >> 2] = 31;
               $99(35184 | 0, 8588 | 0, $0_1 + 224 | 0 | 0) | 0;
               $186(35184 | 0) | 0;
               break label$8;
              case 25:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 28;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               break label$8;
              case 26:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 29;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               break label$8;
              case 27:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 30;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               break label$8;
              case 28:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 31;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 263;
               break label$8;
              case 29:
               $92(35360 | 0, HEAP32[(0 + 35172 | 0) >> 2] | 0 | 0) | 0;
               HEAP8[(((HEAP32[(0 + 35176 | 0) >> 2] | 0) + 35360 | 0) + -1 | 0) >> 0] = 0;
               $4_1 = 302;
               break label$8;
              case 30:
               $1_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
               $119(35360 | 0, $1_1 + 1 | 0 | 0, ($11($1_1 | 0) | 0) + -2 | 0 | 0) | 0;
               HEAP8[(((HEAP32[(0 + 35176 | 0) >> 2] | 0) + 35360 | 0) + -2 | 0) >> 0] = 0;
               $4_1 = 262;
               break label$8;
              case 33:
               $4_1 = 268;
               break label$8;
              case 34:
               $4_1 = 269;
               break label$8;
              case 35:
               $4_1 = 270;
               break label$8;
              case 36:
               $4_1 = 272;
               break label$8;
              case 37:
               $4_1 = 273;
               break label$8;
              case 38:
               HEAP32[(0 + 77780 | 0) >> 2] = 1;
               $4_1 = 274;
               break label$8;
              case 39:
               HEAP32[(0 + 77776 | 0) >> 2] = 1;
               $4_1 = 275;
               break label$8;
              case 40:
               HEAP32[(0 + 77772 | 0) >> 2] = 1;
               $4_1 = 276;
               break label$8;
              case 41:
               HEAP32[(0 + 77768 | 0) >> 2] = 1;
               $4_1 = 277;
               break label$8;
              case 42:
               HEAP32[(0 + 77764 | 0) >> 2] = 1;
               $4_1 = 278;
               break label$8;
              case 43:
               $4_1 = 267;
               break label$8;
              case 44:
               HEAP32[(0 + 77784 | 0) >> 2] = 1;
               $4_1 = 271;
               break label$8;
              case 45:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 304;
               break label$8;
              case 46:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 303;
               break label$8;
              case 47:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 64;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 280;
               break label$8;
              case 48:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 14;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 280;
               break label$8;
              case 49:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 12;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 280;
               break label$8;
              case 50:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 10;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 280;
               break label$8;
              case 51:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 15;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 280;
               break label$8;
              case 52:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 13;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 280;
               break label$8;
              case 53:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 11;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 280;
               break label$8;
              case 54:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 65;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 281;
               break label$8;
              case 55:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 18;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 281;
               break label$8;
              case 56:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 17;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 281;
               break label$8;
              case 57:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 16;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 281;
               break label$8;
              case 58:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 83;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 282;
               break label$8;
              case 59:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 70;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 60:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 74;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 61:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 78;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 62:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 80;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 63:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 20;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 64:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 22;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 65:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 24;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 66:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 86;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 67:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 84;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 68:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 88;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 69:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 40;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 70:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 60;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 71:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 48;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 72:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 56;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 73:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 44;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 74:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 52;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 75:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 71;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 76:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 75;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 77:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 21;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 78:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 25;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 79:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 23;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 283;
               break label$8;
              case 80:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 87;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 81:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 85;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 82:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 89;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 83:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 41;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 84:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 61;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 85:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 49;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 86:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 57;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 87:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 45;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 88:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 53;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 279;
               break label$8;
              case 89:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 101;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 285;
               break label$8;
              case 90:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 100;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 285;
               break label$8;
              case 91:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 102;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 286;
               break label$8;
              case 92:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 103;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 286;
               break label$8;
              case 93:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 106;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 94:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 107;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 291;
               break label$8;
              case 95:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 108;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 300;
               break label$8;
              case 96:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 109;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 301;
               break label$8;
              case 97:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 110;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 300;
               break label$8;
              case 98:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 110;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 300;
               break label$8;
              case 99:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 111;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 301;
               break label$8;
              case 100:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 289;
               break label$8;
              case 101:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 288;
               break label$8;
              case 102:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 287;
               break label$8;
              case 103:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 120;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 290;
               break label$8;
              case 104:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 130;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 105:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 131;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 106:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 132;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 107:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 133;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 108:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 143;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 109:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 144;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 110:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 145;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 111:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 146;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 112:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 154;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 113:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 155;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 114:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 156;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 115:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 157;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 295;
               break label$8;
              case 116:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 128;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 293;
               break label$8;
              case 117:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 129;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 294;
               break label$8;
              case 118:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 141;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 293;
               break label$8;
              case 119:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 142;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 294;
               break label$8;
              case 120:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 180;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 293;
               break label$8;
              case 121:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 181;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 294;
               break label$8;
              case 122:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 137;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 123:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 138;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 124:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 136;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 125:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 139;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 126:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 135;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 127:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 140;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 128:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 150;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 129:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 151;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 130:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 149;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 131:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 152;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 132:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 148;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 133:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 153;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 296;
               break label$8;
              case 134:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 183;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 297;
               break label$8;
              case 135:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 182;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 297;
               break label$8;
              case 136:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 184;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 298;
               break label$8;
              case 137:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 185;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 299;
               break label$8;
              case 138:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 104;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 284;
               break label$8;
              case 139:
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 35360 | 0) >> 2] = 105;
               HEAP32[(i64toi32_i32$1 + 35364 | 0) >> 2] = i64toi32_i32$0;
               $4_1 = 284;
               break label$8;
              case 140:
               $92(35360 | 0, HEAP32[(0 + 35172 | 0) >> 2] | 0 | 0) | 0;
               $4_1 = 261;
               break label$8;
              case 141:
               $186(8628 | 0) | 0;
               continue label$13;
              case 142:
               $4_1 = HEAP8[(HEAP32[(0 + 35172 | 0) >> 2] | 0) >> 0] | 0;
               break label$8;
              case 143:
               $35(HEAP32[(0 + 35172 | 0) >> 2] | 0 | 0, HEAP32[(0 + 35176 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(0 + 35136 | 0) >> 2] | 0 | 0) | 0;
               continue label$13;
              case 145:
               $4_1 = 0;
               break label$8;
              case 16:
               break label$10;
              case 15:
               break label$11;
              case 14:
               break label$12;
              case 1:
              case 2:
               continue label$13;
              case 144:
               break label$23;
              case 32:
               break label$8;
              case 31:
               break label$9;
              default:
               break label$21;
              };
             }
             $4_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
             HEAP8[$2_1 >> 0] = HEAPU8[(0 + 35160 | 0) >> 0] | 0;
             $6_1 = $4_1 ^ -1 | 0;
             label$162 : {
              $4_1 = (HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0;
              $5_1 = HEAP32[$4_1 >> 2] | 0;
              if (HEAP32[($5_1 + 44 | 0) >> 2] | 0) {
               break label$162
              }
              HEAP32[(0 + 35312 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] = HEAP32[(0 + 35132 | 0) >> 2] | 0;
              HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] = 1;
             }
             $5_1 = $6_1 + $2_1 | 0;
             label$163 : {
              label$164 : {
               label$165 : {
                if ((HEAP32[(0 + 35156 | 0) >> 2] | 0) >>> 0 > ((HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(0 + 35312 | 0) >> 2] | 0) | 0) >>> 0) {
                 break label$165
                }
                $2_1 = (HEAP32[(0 + 35172 | 0) >> 2] | 0) + $5_1 | 0;
                HEAP32[(0 + 35156 | 0) >> 2] = $2_1;
                $1_1 = $172() | 0;
                $5_1 = $173($1_1 | 0) | 0;
                $3_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
                $6_1 = 144;
                if (!$5_1) {
                 break label$164
                }
                $2_1 = $2_1 + 1 | 0;
                HEAP32[(0 + 35156 | 0) >> 2] = $2_1;
                $4_1 = 4;
                $1_1 = $5_1;
                break label$163;
               }
               $4_1 = 11;
               $6_1 = 144;
               label$166 : {
                switch ($174() | 0 | 0) {
                case 1:
                 HEAP32[(0 + 35156 | 0) >> 2] = HEAP32[(0 + 35172 | 0) >> 2] | 0;
                 $4_1 = 10;
                 $6_1 = 145;
                 break label$163;
                case 0:
                 $2_1 = (HEAP32[(0 + 35172 | 0) >> 2] | 0) + $5_1 | 0;
                 HEAP32[(0 + 35156 | 0) >> 2] = $2_1;
                 $1_1 = $172() | 0;
                 $3_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
                 $4_1 = 4;
                 break label$163;
                case 2:
                 break label$166;
                default:
                 break label$163;
                };
               }
               $2_1 = (HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(0 + 35312 | 0) >> 2] | 0) | 0;
               HEAP32[(0 + 35156 | 0) >> 2] = $2_1;
               $1_1 = $172() | 0;
               $3_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
              }
              $4_1 = 9;
             }
             if (($4_1 | 0) == (10 | 0)) {
              continue label$22
             }
             break label$22;
            };
            switch ($4_1 + -4 | 0 | 0) {
            case 7:
             continue label$13;
            case 5:
             continue label$19;
            case 1:
            case 2:
            case 3:
            case 4:
            case 6:
             break label$7;
            default:
             continue label$14;
            };
           }
           break label$19;
          };
          break label$14;
         };
         break label$13;
        };
        $175(8665 | 0);
        abort();
       }
       $4_1 = 306;
       break label$8;
      }
      $4_1 = 305;
      break label$8;
     }
     $4_1 = 307;
     break label$8;
    }
    $4_1 = 265;
   }
   global$0 = $0_1 + 240 | 0;
   return $4_1 | 0;
  }
  abort();
 }
 
 function $168() {
  var $0_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $0_1 = HEAP32[(0 + 35148 | 0) >> 2] | 0;
     if ($0_1) {
      break label$3
     }
     $0_1 = $176(4 | 0) | 0;
     HEAP32[(0 + 35148 | 0) >> 2] = $0_1;
     if (!$0_1) {
      break label$2
     }
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[(0 + 35316 | 0) >> 2] = 1;
     HEAP32[(0 + 35152 | 0) >> 2] = 0;
     return;
    }
    label$4 : {
     $1_1 = HEAP32[(0 + 35316 | 0) >> 2] | 0;
     if ((HEAP32[(0 + 35152 | 0) >> 2] | 0) >>> 0 < ($1_1 + -1 | 0) >>> 0) {
      break label$4
     }
     $1_1 = $1_1 + 8 | 0;
     $0_1 = $177($0_1 | 0, $1_1 << 2 | 0 | 0) | 0;
     HEAP32[(0 + 35148 | 0) >> 2] = $0_1;
     if (!$0_1) {
      break label$1
     }
     $0_1 = $0_1 + ((HEAP32[(0 + 35316 | 0) >> 2] | 0) << 2 | 0) | 0;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 24 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0_1 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(0 + 35316 | 0) >> 2] = $1_1;
    }
    return;
   }
   $175(8967 | 0);
   abort();
  }
  $175(8967 | 0);
  abort();
 }
 
 function $169($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $176(48 | 0) | 0;
    if (!$2_1) {
     break label$2
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    $1_1 = $176($1_1 + 2 | 0 | 0) | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    if (!$1_1) {
     break label$1
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = 1;
    $178($2_1 | 0, $0_1 | 0);
    return $2_1 | 0;
   }
   $175(8716 | 0);
   abort();
  }
  $175(8716 | 0);
  abort();
 }
 
 function $170() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = (HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[(0 + 35312 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[(0 + 35156 | 0) >> 2] = $1_1;
  HEAP32[(0 + 35172 | 0) >> 2] = $1_1;
  HEAP32[(0 + 35132 | 0) >> 2] = HEAP32[(HEAP32[$0_1 >> 2] | 0) >> 2] | 0;
  HEAP8[(0 + 35160 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = HEAP32[(0 + 35156 | 0) >> 2] | 0;
  HEAP8[$2_1 >> 0] = HEAPU8[(0 + 35160 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $3_1 = (HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0;
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= ($5_1 + 2 | 0) >>> 0) {
     break label$2
    }
    $4_1 = ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + $5_1 | 0) + 2 | 0;
    label$3 : {
     $5_1 = ((HEAP32[(0 + 35312 | 0) >> 2] | 0) + $5_1 | 0) + 2 | 0;
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     if ($5_1 >>> 0 <= $7_1 >>> 0) {
      break label$3
     }
     label$4 : while (1) {
      $4_1 = $4_1 + -1 | 0;
      $5_1 = $5_1 + -1 | 0;
      HEAP8[$4_1 >> 0] = HEAPU8[$5_1 >> 0] | 0;
      $6_1 = HEAP32[$3_1 >> 2] | 0;
      $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      if ($5_1 >>> 0 > $7_1 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    HEAP32[(0 + 35312 | 0) >> 2] = $3_1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
    $5_1 = $4_1 - $5_1 | 0;
    $2_1 = $2_1 + $5_1 | 0;
    if ($2_1 >>> 0 < ($7_1 + 2 | 0) >>> 0) {
     break label$1
    }
    $1_1 = $1_1 + $5_1 | 0;
   }
   $5_1 = $2_1 + -1 | 0;
   HEAP8[$5_1 >> 0] = $0_1;
   HEAP32[(0 + 35172 | 0) >> 2] = $1_1;
   $4_1 = HEAPU8[$5_1 >> 0] | 0;
   HEAP32[(0 + 35156 | 0) >> 2] = $5_1;
   HEAP8[(0 + 35160 | 0) >> 0] = $4_1;
   return;
  }
  $175(8935 | 0);
  abort();
 }
 
 function $172() {
  var $0_1 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $30_1 = 0;
  $0_1 = HEAPU8[(0 + 35144 | 0) >> 0] | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= (HEAP32[(0 + 35156 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[(0 + 35156 | 0) >> 2] | 0;
   label$2 : while (1) {
    $3_1 = 1;
    label$3 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (!$4_1) {
      break label$3
     }
     $3_1 = HEAPU8[($4_1 + 3392 | 0) >> 0] | 0;
    }
    label$4 : {
     $4_1 = $0_1 << 1 | 0;
     if (!(HEAPU16[($4_1 + 3648 | 0) >> 1] | 0)) {
      break label$4
     }
     HEAP32[(0 + 35168 | 0) >> 2] = $1_1;
     HEAP32[(0 + 35164 | 0) >> 2] = $0_1;
    }
    label$5 : {
     $30_1 = HEAP16[($4_1 + 5712 | 0) >> 1] | 0;
     $4_1 = $3_1 & 255 | 0;
     $5_1 = $30_1 + $4_1 | 0;
     if (($0_1 | 0) == (HEAP16[(($5_1 << 1 | 0) + 4320 | 0) >> 1] | 0 | 0)) {
      break label$5
     }
     label$6 : while (1) {
      label$7 : {
       $0_1 = HEAP16[(($0_1 << 1 | 0) + 6400 | 0) >> 1] | 0;
       if (($0_1 | 0) < (332 | 0)) {
        break label$7
       }
       $3_1 = HEAPU8[($4_1 + 7088 | 0) >> 0] | 0;
      }
      $4_1 = $3_1 & 255 | 0;
      $5_1 = (HEAP16[(($0_1 << 1 | 0) + 5712 | 0) >> 1] | 0) + $4_1 | 0;
      if (($0_1 & 65535 | 0 | 0) != (HEAPU16[(($5_1 << 1 | 0) + 4320 | 0) >> 1] | 0 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    $0_1 = HEAP16[(($5_1 << 1 | 0) + 7136 | 0) >> 1] | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $24_1 = 0;
  label$1 : {
   $1_1 = $0_1 << 1 | 0;
   if (!(HEAPU16[($1_1 + 3648 | 0) >> 1] | 0)) {
    break label$1
   }
   HEAP32[(0 + 35164 | 0) >> 2] = $0_1;
   HEAP32[(0 + 35168 | 0) >> 2] = HEAP32[(0 + 35156 | 0) >> 2] | 0;
  }
  label$2 : {
   $1_1 = (HEAP16[($1_1 + 5712 | 0) >> 1] | 0) + 1 | 0;
   if ((HEAP16[(($1_1 << 1 | 0) + 4320 | 0) >> 1] | 0 | 0) == ($0_1 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    $0_1 = HEAPU16[(($0_1 << 1 | 0) + 6400 | 0) >> 1] | 0;
    $24_1 = $0_1;
    $0_1 = ($0_1 << 16 | 0) >> 16 | 0;
    $1_1 = (HEAP16[(($0_1 << 1 | 0) + 5712 | 0) >> 1] | 0) + 1 | 0;
    if (($24_1 | 0) != (HEAPU16[(($1_1 << 1 | 0) + 4320 | 0) >> 1] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $0_1 = HEAPU16[(($1_1 << 1 | 0) + 7136 | 0) >> 1] | 0;
  return ((($0_1 | 0) == (331 | 0) ? 0 : $0_1) << 16 | 0) >> 16 | 0 | 0;
 }
 
 function $174() {
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $0_1 = 0, $1_1 = 0, $227_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $0_1 = HEAP32[(0 + 35156 | 0) >> 2] | 0;
        $1_1 = (HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0;
        $2_1 = HEAP32[$1_1 >> 2] | 0;
        $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if ($0_1 >>> 0 > (((HEAP32[(0 + 35312 | 0) >> 2] | 0) + $3_1 | 0) + 1 | 0) >>> 0) {
         break label$6
        }
        $4_1 = HEAP32[(0 + 35172 | 0) >> 2] | 0;
        if (!(HEAP32[($2_1 + 40 | 0) >> 2] | 0)) {
         break label$5
        }
        label$7 : {
         $5_1 = $0_1 + ($4_1 ^ -1 | 0) | 0;
         if (($5_1 | 0) < (1 | 0)) {
          break label$7
         }
         $6_1 = 0;
         $2_1 = $4_1;
         label$8 : while (1) {
          HEAP8[$3_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
          $3_1 = $3_1 + 1 | 0;
          $2_1 = $2_1 + 1 | 0;
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($5_1 | 0)) {
           continue label$8
          }
          break label$8;
         };
        }
        label$9 : {
         label$10 : {
          $3_1 = HEAP32[$1_1 >> 2] | 0;
          if ((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) != (2 | 0)) {
           break label$10
          }
          $2_1 = 0;
          HEAP32[(0 + 35312 | 0) >> 2] = 0;
          break label$9;
         }
         label$11 : {
          $0_1 = $4_1 - $0_1 | 0;
          $3_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $0_1 | 0;
          if (($3_1 | 0) > (0 | 0)) {
           break label$11
          }
          label$12 : while (1) {
           $3_1 = 0;
           $2_1 = HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
           $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           $4_1 = HEAP32[(0 + 35156 | 0) >> 2] | 0;
           label$13 : {
            if (!(HEAP32[($2_1 + 20 | 0) >> 2] | 0)) {
             break label$13
            }
            label$14 : {
             label$15 : {
              $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
              if (($3_1 | 0) > (0 | 0)) {
               break label$15
              }
              $3_1 = (($3_1 | 0) / (8 | 0) | 0) + $3_1 | 0;
              break label$14;
             }
             $3_1 = $3_1 << 1 | 0;
            }
            HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
            $3_1 = $177($6_1 | 0, $3_1 + 2 | 0 | 0) | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
           if (!$3_1) {
            break label$4
           }
           HEAP32[(0 + 35156 | 0) >> 2] = $3_1 + ($4_1 - $6_1 | 0) | 0;
           $3_1 = (HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + $0_1 | 0;
           if (($3_1 | 0) < (1 | 0)) {
            continue label$12
           }
           break label$12;
          };
         }
         $2_1 = ($3_1 | 0) < (8192 | 0) ? $3_1 : 8192;
         label$16 : {
          label$17 : {
           if (!(HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0)) {
            break label$17
           }
           label$18 : {
            label$19 : {
             if (($3_1 | 0) >= (1 | 0)) {
              break label$19
             }
             $2_1 = 42;
             $3_1 = 0;
             break label$18;
            }
            $6_1 = ($2_1 | 0) > (1 | 0) ? $2_1 : 1;
            $3_1 = 0;
            label$20 : while (1) {
             label$21 : {
              $2_1 = $161(HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0) | 0;
              switch ($2_1 + 1 | 0 | 0) {
              case 0:
              case 11:
               break label$18;
              default:
               break label$21;
              };
             }
             HEAP8[(((HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + $5_1 | 0) + $3_1 | 0) >> 0] = $2_1;
             $3_1 = $3_1 + 1 | 0;
             if (($3_1 | 0) != ($6_1 | 0)) {
              continue label$20
             }
             break label$20;
            };
           }
           label$22 : {
            if (($2_1 | 0) != (10 | 0)) {
             break label$22
            }
            HEAP8[(((HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + $5_1 | 0) + $3_1 | 0) >> 0] = 10;
            $3_1 = $3_1 + 1 | 0;
           }
           label$23 : {
            if (($2_1 | 0) != (-1 | 0)) {
             break label$23
            }
            if ($162(HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0) | 0) {
             break label$3
            }
           }
           HEAP32[(0 + 35312 | 0) >> 2] = $3_1;
           break label$16;
          }
          (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          $3_1 = $163((HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + $5_1 | 0 | 0, 1 | 0, $2_1 | 0, HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[(0 + 35312 | 0) >> 2] = $3_1;
          if ($3_1) {
           break label$16
          }
          label$24 : while (1) {
           if (!($162(HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0) | 0)) {
            break label$16
           }
           if ((HEAP32[($1() | 0) >> 2] | 0 | 0) != (27 | 0)) {
            break label$2
           }
           (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           $164(HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0);
           $3_1 = $163((HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + $5_1 | 0 | 0, 1 | 0, $2_1 | 0, HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[(0 + 35312 | 0) >> 2] = $3_1;
           if (!$3_1) {
            continue label$24
           }
           break label$24;
          };
         }
         $3_1 = HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
         $2_1 = HEAP32[(0 + 35312 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
        $6_1 = 0;
        label$25 : {
         if (HEAP32[(0 + 35312 | 0) >> 2] | 0) {
          break label$25
         }
         label$26 : {
          if ($5_1) {
           break label$26
          }
          $179(HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0);
          $6_1 = 1;
          break label$25;
         }
         $6_1 = 2;
         HEAP32[((HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 44 | 0) >> 2] = 2;
        }
        label$27 : {
         $3_1 = HEAP32[(0 + 35312 | 0) >> 2] | 0;
         $2_1 = $3_1 + $5_1 | 0;
         $4_1 = HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
         if (($2_1 | 0) <= (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)) {
          break label$27
         }
         $227_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         $4_1 = $2_1 + ($3_1 >> 1 | 0) | 0;
         $3_1 = $177($227_1 | 0, $4_1 | 0) | 0;
         $2_1 = (HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0;
         HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] = $3_1;
         $3_1 = HEAP32[$2_1 >> 2] | 0;
         if (!(HEAP32[($3_1 + 4 | 0) >> 2] | 0)) {
          break label$1
         }
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1 + -2 | 0;
        }
        $3_1 = (HEAP32[(0 + 35312 | 0) >> 2] | 0) + $5_1 | 0;
        HEAP32[(0 + 35312 | 0) >> 2] = $3_1;
        $2_1 = (HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0;
        HEAP8[((HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + $3_1 | 0) >> 0] = 0;
        HEAP8[(($3_1 + (HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) + 1 | 0) >> 0] = 0;
        HEAP32[(0 + 35172 | 0) >> 2] = HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
        return $6_1 | 0;
       }
       $175(8760 | 0);
       abort();
      }
      return (($0_1 - $4_1 | 0 | 0) == (1 | 0) ? 1 : 2) | 0;
     }
     $175(8816 | 0);
     abort();
    }
    $175(8860 | 0);
    abort();
   }
   $175(8860 | 0);
   abort();
  }
  $175(8889 | 0);
  abort();
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 9016 | 0, $1_1 | 0) | 0;
  fimport$9(2 | 0);
  abort();
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  return $5($0_1 | 0) | 0 | 0;
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $7($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = HEAP32[($1() | 0) >> 2] | 0;
  $180($0_1 | 0);
  HEAP32[($0_1 + 40 | 0) >> 2] = 1;
  HEAP32[$0_1 >> 2] = $1_1;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[(0 + 35148 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $3_1 = HEAP32[($4_1 + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  label$2 : {
   if (($3_1 | 0) == ($0_1 | 0)) {
    break label$2
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 1;
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    $1_1 = 0;
    break label$3;
   }
   $1_1 = ($166($165($1_1 | 0) | 0 | 0) | 0 | 0) > (0 | 0);
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[(0 + 35148 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAP32[($1_1 + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
     break label$1
    }
   }
   $168();
   $1_1 = $169(HEAP32[(0 + 35132 | 0) >> 2] | 0 | 0, 16384 | 0) | 0;
   HEAP32[((HEAP32[(0 + 35148 | 0) >> 2] | 0) + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $1_1;
  }
  $1_1 = 0;
  label$3 : {
   $2_1 = HEAP32[(0 + 35148 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$3
   }
   $1_1 = HEAP32[($2_1 + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  $178($1_1 | 0, $0_1 | 0);
  $170();
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP8[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 0] = 0;
   HEAP8[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = 0;
   HEAP32[($0_1 + 44 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 1;
   HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    $2_1 = HEAP32[(0 + 35148 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $1_1 = HEAP32[($2_1 + ((HEAP32[(0 + 35152 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   }
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$1
   }
   $170();
  }
 }
 
 function $181($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $0$hi;
  $3_1 = $0_1;
  $4_1 = $3_1 << 2 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[(79344 + $4_1 | 0) >> 2] | 0;
  HEAP32[$2_1 >> 2] = HEAP32[(79632 + $4_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = 78400 + ($3_1 << 3 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $182($0_1, $0$hi, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $0$hi;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = 78400 + ($4_1 << 3 | 0) | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = $4_1 << 2 | 0;
  HEAP32[(79344 + $4_1 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   HEAP32[(79632 + $4_1 | 0) >> 2] = 1;
  }
 }
 
 function $183($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  $4_1 = $1_1;
  $5_1 = $4_1 << 2 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[(79200 + $5_1 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[(79488 + $5_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = 78672 + ($4_1 << 4 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $184($0_1, $0$hi, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $11_1 = 0;
  i64toi32_i32$0 = $0$hi;
  $4_1 = $0_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 78672 + ($4_1 << 4 | 0) | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1_1 = $4_1 << 2 | 0;
  HEAP32[(79200 + $1_1 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   HEAP32[(79488 + $1_1 | 0) >> 2] = 1;
  }
 }
 
 function $185() {
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$4 = 0, $0_1 = 0, $12_1 = 0, $9_1 = 0, $12$hi = 0, $7_1 = 0, $6_1 = 0, $11_1 = 0, $11$hi = 0, $4_1 = 0, $5_1 = 0, $1_1 = 0, i64toi32_i32$6 = 0, $10_1 = 0, $3_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0, $92_1 = 0, $93_1 = 0, $94_1 = 0, $95_1 = 0, $96_1 = 0, $97_1 = 0, $98_1 = 0, $99_1 = 0, $100_1 = 0, $101_1 = 0, $102_1 = 0, $103_1 = 0, $232_1 = 0, $234_1 = 0, $234$hi = 0, $236_1 = 0, $236$hi = 0, $243_1 = 0, $243$hi = 0, $274_1 = 0, $276_1 = 0, $280_1 = 0, $280$hi = 0, $282$hi = 0, $299_1 = 0, $301$hi = 0, $303$hi = 0, $310_1 = 0, $310$hi = 0, $460 = 0, $462$hi = 0, $470 = 0, $470$hi = 0, $508 = 0, $541 = 0, $555 = 0, $557$hi = 0, $565 = 0, $565$hi = 0, $603 = 0, $637 = 0, $651 = 0, $653$hi = 0, $661 = 0, $661$hi = 0, $677$hi = 0, $679 = 0, $679$hi = 0, $688 = 0, $727 = 0, $732 = 0, $798 = 0, $864 = 0, $966 = 0, $1152 = 0, $1152$hi = 0, $1156 = 0, $1156$hi = 0, $1172 = 0, $1172$hi = 0, $1176 = 0, $1176$hi = 0, $1186 = 0, $1186$hi = 0, $1190 = 0, $1190$hi = 0, $1200 = 0, $1200$hi = 0, $1204 = 0, $1204$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0_1 = global$0 - 26512 | 0;
  global$0 = $0_1;
  HEAP32[(0 + 35356 | 0) >> 2] = -2;
  HEAP32[(0 + 35352 | 0) >> 2] = 0;
  $1_1 = 200;
  $2_1 = $0_1 + 704 | 0;
  $3_1 = $2_1;
  $4_1 = $0_1 + 26304 | 0;
  $5_1 = $4_1;
  $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : while (1) {
                     HEAP8[$4_1 >> 0] = $6_1;
                     label$20 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         if ((($5_1 + $1_1 | 0) + -1 | 0) >>> 0 > $4_1 >>> 0) {
                          break label$23
                         }
                         $7_1 = 4;
                         label$24 : {
                          if (($1_1 | 0) > (9999 | 0)) {
                           break label$24
                          }
                          $8_1 = $4_1 - $5_1 | 0;
                          label$25 : {
                           label$26 : {
                            $7_1 = $1_1 << 1 | 0;
                            $1_1 = ($7_1 | 0) < (1e4 | 0) ? $7_1 : 1e4;
                            $9_1 = $5(Math_imul($1_1, 129) + 127 | 0 | 0) | 0;
                            if ($9_1) {
                             break label$26
                            }
                            $7_1 = 4;
                            break label$25;
                           }
                           $7_1 = $8_1 + 1 | 0;
                           $10_1 = $4($9_1 | 0, $5_1 | 0, $7_1 | 0) | 0;
                           $3_1 = $4($10_1 + ((($1_1 + 127 | 0 | 0) / (128 | 0) | 0) << 7 | 0) | 0 | 0, $3_1 | 0, $7_1 << 7 | 0 | 0) | 0;
                           $7_1 = 0;
                           label$27 : {
                            if (($5_1 | 0) == ($0_1 + 26304 | 0 | 0)) {
                             break label$27
                            }
                            $6($5_1 | 0);
                           }
                           $5_1 = $10_1;
                          }
                          if (!$9_1) {
                           break label$24
                          }
                          $4_1 = $5_1 + $8_1 | 0;
                          $7_1 = (($5_1 + $1_1 | 0) + -1 | 0) >>> 0 > $4_1 >>> 0 ? 0 : 9;
                          $2_1 = $3_1 + ($8_1 << 7 | 0) | 0;
                         }
                         if (!$7_1) {
                          break label$23
                         }
                         $4_1 = 1;
                         switch ($7_1 + -4 | 0 | 0) {
                         case 0:
                          break label$18;
                         case 5:
                          break label$22;
                         default:
                          break label$21;
                         };
                        }
                        if (($6_1 | 0) != (81 | 0)) {
                         break label$20
                        }
                        $4_1 = 0;
                       }
                       if (($5_1 | 0) == ($0_1 + 26304 | 0 | 0)) {
                        break label$21
                       }
                       $6($5_1 | 0);
                      }
                      global$0 = $0_1 + 26512 | 0;
                      return $4_1 | 0;
                     }
                     label$28 : {
                      label$29 : {
                       label$30 : {
                        label$31 : {
                         $7_1 = HEAP16[(($6_1 << 1 | 0) + 9120 | 0) >> 1] | 0;
                         if (($7_1 | 0) == (-93 | 0)) {
                          break label$31
                         }
                         label$32 : {
                          if ((HEAP32[(0 + 35356 | 0) >> 2] | 0 | 0) != (-2 | 0)) {
                           break label$32
                          }
                          (wasm2js_i32$0 = 0, wasm2js_i32$1 = $167() | 0), HEAP32[(wasm2js_i32$0 + 35356 | 0) >> 2] = wasm2js_i32$1;
                         }
                         label$33 : {
                          label$34 : {
                           $9_1 = HEAP32[(0 + 35356 | 0) >> 2] | 0;
                           if (($9_1 | 0) > (0 | 0)) {
                            break label$34
                           }
                           $8_1 = 0;
                           HEAP32[(0 + 35356 | 0) >> 2] = 0;
                           break label$33;
                          }
                          $8_1 = 2;
                          if (($9_1 | 0) > (307 | 0)) {
                           break label$33
                          }
                          $8_1 = HEAP8[($9_1 + 9552 | 0) >> 0] | 0;
                         }
                         $7_1 = $8_1 + $7_1 | 0;
                         if ($7_1 >>> 0 > 230 >>> 0) {
                          break label$31
                         }
                         if (($8_1 | 0) != (HEAP16[(($7_1 << 1 | 0) + 9872 | 0) >> 1] | 0 | 0)) {
                          break label$31
                         }
                         label$35 : {
                          $6_1 = HEAPU8[($7_1 + 10336 | 0) >> 0] | 0;
                          if (!$6_1) {
                           break label$35
                          }
                          $2_1 = $2_1 + 128 | 0;
                          $4($2_1 | 0, 35360 | 0, 128 | 0) | 0;
                          HEAP32[(0 + 35356 | 0) >> 2] = -2;
                          break label$29;
                         }
                         $6_1 = 0 - $6_1 | 0;
                         break label$30;
                        }
                        $6_1 = HEAP8[($6_1 + 10576 | 0) >> 0] | 0;
                        if (!$6_1) {
                         break label$28
                        }
                       }
                       $7_1 = HEAP8[($6_1 + 10800 | 0) >> 0] | 0;
                       $8_1 = $2_1 + ((1 - $7_1 | 0) << 7 | 0) | 0;
                       i64toi32_i32$2 = $8_1;
                       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                       $11_1 = i64toi32_i32$0;
                       $11$hi = i64toi32_i32$1;
                       $4($0_1 + 584 | 0 | 0, i64toi32_i32$2 + 8 | 0 | 0, 120 | 0) | 0;
                       label$36 : {
                        label$37 : {
                         switch ($6_1 + -2 | 0 | 0) {
                         case 0:
                          label$95 : {
                           $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                           if ($8_1 >>> 0 < 2 >>> 0) {
                            break label$95
                           }
                           label$96 : {
                            if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                             break label$96
                            }
                            $8_1 = HEAP32[(0 + 32032 | 0) >> 2] | 0;
                            i64toi32_i32$2 = ($8_1 << 3 | 0) + 35744 | 0;
                            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                            $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $8_1 | 0);
                            HEAP32[(0 + 35348 | 0) >> 2] = 0;
                           }
                           HEAP32[(0 + 35348 | 0) >> 2] = 1;
                           HEAP32[(0 + 32032 | 0) >> 2] = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                           $92(35488 | 0, $2_1 | 0) | 0;
                           break label$36;
                          }
                          label$97 : {
                           if (($8_1 | 0) != (1 | 0)) {
                            break label$97
                           }
                           label$98 : {
                            if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                             break label$98
                            }
                            $8_1 = HEAP32[(0 + 32032 | 0) >> 2] | 0;
                            i64toi32_i32$2 = ($8_1 << 3 | 0) + 35744 | 0;
                            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                            $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $8_1 | 0);
                            HEAP32[(0 + 35348 | 0) >> 2] = 0;
                           }
                           $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                           i64toi32_i32$2 = ($8_1 << 3 | 0) + 35744 | 0;
                           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                           $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $8_1 | 0);
                           break label$36;
                          }
                          $186(10895 | 0) | 0;
                          abort();
                         case 11:
                          HEAP32[(0 + 32024 | 0) >> 2] = 2;
                          break label$36;
                         case 12:
                          HEAP32[(0 + 32024 | 0) >> 2] = 1;
                          break label$36;
                         case 13:
                          $196(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
                          break label$36;
                         case 14:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$17
                          }
                          HEAP32[(0 + 32020 | 0) >> 2] = 2;
                          break label$36;
                         case 16:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$16
                          }
                          HEAP32[(0 + 32020 | 0) >> 2] = 3;
                          break label$36;
                         case 18:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$15
                          }
                          HEAP32[(0 + 32020 | 0) >> 2] = 4;
                          break label$36;
                         case 20:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$14
                          }
                          HEAP32[(0 + 32020 | 0) >> 2] = 5;
                          break label$36;
                         case 22:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$13
                          }
                          HEAP32[(0 + 32020 | 0) >> 2] = 6;
                          break label$36;
                         case 24:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$12
                          }
                          HEAP32[(0 + 32020 | 0) >> 2] = 8;
                          break label$36;
                         case 26:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$11
                          }
                          label$99 : {
                           if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                            break label$99
                           }
                           $8_1 = HEAP32[(0 + 32032 | 0) >> 2] | 0;
                           i64toi32_i32$2 = ($8_1 << 3 | 0) + 35744 | 0;
                           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                           $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $8_1 | 0);
                           HEAP32[(0 + 35348 | 0) >> 2] = 0;
                          }
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          $9_1 = ($8_1 << 3 | 0) + 35744 | 0;
                          $232_1 = $9_1;
                          i64toi32_i32$2 = $9_1;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $234_1 = i64toi32_i32$1;
                          $234$hi = i64toi32_i32$0;
                          i64toi32_i32$2 = $2_1;
                          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $236_1 = i64toi32_i32$0;
                          $236$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $234$hi;
                          i64toi32_i32$2 = $234_1;
                          i64toi32_i32$0 = $236$hi;
                          i64toi32_i32$3 = $236_1;
                          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                          }
                          $12_1 = i64toi32_i32$4;
                          $12$hi = i64toi32_i32$5;
                          i64toi32_i32$2 = $232_1;
                          HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
                          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
                          i64toi32_i32$1 = 31728 + ($8_1 << 2 | 0) | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$2 = 0;
                          $243_1 = i64toi32_i32$5;
                          $243$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $12$hi;
                          i64toi32_i32$1 = i64toi32_i32$4;
                          i64toi32_i32$5 = $243$hi;
                          i64toi32_i32$3 = $243_1;
                          if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
                           $80_1 = 1
                          } else {
                           if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
                            if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0) {
                             $81_1 = 0
                            } else {
                             $81_1 = 1
                            }
                            $82_1 = $81_1;
                           } else {
                            $82_1 = 0
                           }
                           $80_1 = $82_1;
                          }
                          if ($80_1) {
                           break label$36
                          }
                          HEAP32[($0_1 + 112 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                          $99(35776 | 0, 10955 | 0, $0_1 + 112 | 0 | 0) | 0;
                          $186(35776 | 0) | 0;
                          abort();
                         case 27:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          if ($8_1 >>> 0 <= 1 >>> 0) {
                           break label$10
                          }
                          label$100 : {
                           if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                            break label$100
                           }
                           $8_1 = HEAP32[(0 + 32032 | 0) >> 2] | 0;
                           i64toi32_i32$3 = ($8_1 << 3 | 0) + 35744 | 0;
                           i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                           i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                           $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $8_1 | 0);
                           HEAP32[(0 + 35348 | 0) >> 2] = 0;
                          }
                          HEAP32[(0 + 35344 | 0) >> 2] = 0;
                          $8_1 = 0;
                          label$101 : while (1) {
                           i64toi32_i32$3 = $2_1 + $8_1 | 0;
                           i64toi32_i32$2 = HEAP8[i64toi32_i32$3 >> 0] | 0;
                           i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
                           $12_1 = i64toi32_i32$2;
                           $12$hi = i64toi32_i32$1;
                           i64toi32_i32$2 = 0;
                           HEAP32[(i64toi32_i32$2 + 36032 | 0) >> 2] = $12_1;
                           HEAP32[(i64toi32_i32$2 + 36036 | 0) >> 2] = i64toi32_i32$1;
                           i64toi32_i32$2 = $0_1;
                           HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] = $12_1;
                           HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] = i64toi32_i32$1;
                           $274_1 = HEAP32[(0 + 35328 | 0) >> 2] | 0;
                           $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                           $276_1 = $9_1;
                           i64toi32_i32$3 = ($9_1 << 3 | 0) + 35744 | 0;
                           i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                           i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                           $280_1 = i64toi32_i32$1;
                           $280$hi = i64toi32_i32$2;
                           i64toi32_i32$1 = $8_1;
                           i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
                           $282$hi = i64toi32_i32$2;
                           i64toi32_i32$2 = $280$hi;
                           i64toi32_i32$3 = $280_1;
                           i64toi32_i32$1 = $282$hi;
                           i64toi32_i32$5 = $8_1;
                           i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                           i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                           }
                           $112($274_1 | 0, $276_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $0_1 + 152 | 0 | 0, 2 | 0, 0 | 0);
                           $8_1 = (HEAP32[(0 + 35344 | 0) >> 2] | 0) + 1 | 0;
                           HEAP32[(0 + 35344 | 0) >> 2] = $8_1;
                           $9_1 = ($11($2_1 | 0) | 0) + 1 | 0;
                           if ($8_1 >>> 0 <= $9_1 >>> 0) {
                            continue label$101
                           }
                           break label$101;
                          };
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          $10_1 = ($8_1 << 3 | 0) + 35744 | 0;
                          $299_1 = $10_1;
                          i64toi32_i32$2 = $10_1;
                          i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $301$hi = i64toi32_i32$3;
                          i64toi32_i32$3 = 0;
                          $303$hi = i64toi32_i32$3;
                          i64toi32_i32$3 = $301$hi;
                          i64toi32_i32$2 = i64toi32_i32$4;
                          i64toi32_i32$4 = $303$hi;
                          i64toi32_i32$5 = $9_1;
                          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                          i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
                          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                          }
                          $12_1 = i64toi32_i32$1;
                          $12$hi = i64toi32_i32$0;
                          i64toi32_i32$2 = $299_1;
                          HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$1;
                          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$3 = 31728 + ($8_1 << 2 | 0) | 0;
                          i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                          i64toi32_i32$2 = 0;
                          $310_1 = i64toi32_i32$0;
                          $310$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $12$hi;
                          i64toi32_i32$3 = i64toi32_i32$1;
                          i64toi32_i32$0 = $310$hi;
                          i64toi32_i32$5 = $310_1;
                          if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
                           $83_1 = 1
                          } else {
                           if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
                            if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0) {
                             $84_1 = 0
                            } else {
                             $84_1 = 1
                            }
                            $85_1 = $84_1;
                           } else {
                            $85_1 = 0
                           }
                           $83_1 = $85_1;
                          }
                          if ($83_1) {
                           break label$36
                          }
                          HEAP32[($0_1 + 144 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                          $99(35776 | 0, 10955 | 0, $0_1 + 144 | 0 | 0) | 0;
                          $186(35776 | 0) | 0;
                          abort();
                         case 31:
                          label$102 : {
                           label$103 : {
                            switch ((HEAP32[(0 + 32020 | 0) >> 2] | 0) + -2 | 0 | 0) {
                            case 0:
                             i64toi32_i32$5 = $2_1;
                             i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                             i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                             i64toi32_i32$5 = i64toi32_i32$3;
                             i64toi32_i32$3 = 0;
                             i64toi32_i32$0 = 256;
                             if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
                              $86_1 = 1
                             } else {
                              if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
                               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                                $87_1 = 0
                               } else {
                                $87_1 = 1
                               }
                               $88_1 = $87_1;
                              } else {
                               $88_1 = 0
                              }
                              $86_1 = $88_1;
                             }
                             if ($86_1) {
                              break label$9
                             }
                             label$107 : {
                              if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                               break label$107
                              }
                              i64toi32_i32$0 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                              $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, 2 | 0);
                              HEAP32[(0 + 35348 | 0) >> 2] = 0;
                             }
                             i64toi32_i32$0 = $2_1;
                             i64toi32_i32$2 = HEAP8[i64toi32_i32$0 >> 0] | 0;
                             i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                             $12_1 = i64toi32_i32$2;
                             $12$hi = i64toi32_i32$5;
                             i64toi32_i32$2 = 0;
                             HEAP32[(i64toi32_i32$2 + 36032 | 0) >> 2] = $12_1;
                             HEAP32[(i64toi32_i32$2 + 36036 | 0) >> 2] = i64toi32_i32$5;
                             i64toi32_i32$2 = $0_1;
                             HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] = $12_1;
                             HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] = i64toi32_i32$5;
                             $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                             i64toi32_i32$0 = ($8_1 << 3 | 0) + 35744 | 0;
                             i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                             i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                             $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, $0_1 + 176 | 0 | 0, 2 | 0, 0 | 0);
                             i64toi32_i32$2 = 0;
                             $12_1 = 1;
                             $12$hi = i64toi32_i32$2;
                             break label$102;
                            case 1:
                             label$108 : {
                              i64toi32_i32$0 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                              $12_1 = i64toi32_i32$2;
                              $12$hi = i64toi32_i32$5;
                              i64toi32_i32$0 = i64toi32_i32$2;
                              i64toi32_i32$2 = 0;
                              i64toi32_i32$3 = 1;
                              i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
                              if (!(i64toi32_i32$0 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
                               break label$108
                              }
                              i64toi32_i32$2 = $12$hi;
                              i64toi32_i32$2 = $104($12_1 | 0, i64toi32_i32$2 | 0, 2 | 0) | 0;
                              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                              $12_1 = i64toi32_i32$2;
                              $12$hi = i64toi32_i32$0;
                              i64toi32_i32$2 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              HEAP32[i64toi32_i32$2 >> 2] = $12_1;
                              HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
                             }
                             i64toi32_i32$5 = $2_1;
                             i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                             i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                             i64toi32_i32$5 = i64toi32_i32$0;
                             i64toi32_i32$0 = 0;
                             i64toi32_i32$3 = 65536;
                             if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
                              $89_1 = 1
                             } else {
                              if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
                               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                                $90_1 = 0
                               } else {
                                $90_1 = 1
                               }
                               $91_1 = $90_1;
                              } else {
                               $91_1 = 0
                              }
                              $89_1 = $91_1;
                             }
                             if ($89_1) {
                              break label$8
                             }
                             label$109 : {
                              if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                               break label$109
                              }
                              i64toi32_i32$3 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                              $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, 2 | 0);
                              HEAP32[(0 + 35348 | 0) >> 2] = 0;
                             }
                             i64toi32_i32$3 = $2_1;
                             i64toi32_i32$2 = HEAP16[$2_1 >> 1] | 0;
                             i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                             $12_1 = i64toi32_i32$2;
                             $12$hi = i64toi32_i32$5;
                             i64toi32_i32$2 = 0;
                             HEAP32[(i64toi32_i32$2 + 36032 | 0) >> 2] = $12_1;
                             HEAP32[(i64toi32_i32$2 + 36036 | 0) >> 2] = i64toi32_i32$5;
                             i64toi32_i32$2 = $0_1;
                             HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] = $12_1;
                             HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] = i64toi32_i32$5;
                             $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                             i64toi32_i32$3 = ($8_1 << 3 | 0) + 35744 | 0;
                             i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                             i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                             $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, $0_1 + 184 | 0 | 0, 3 | 0, 0 | 0);
                             i64toi32_i32$2 = 0;
                             $12_1 = 2;
                             $12$hi = i64toi32_i32$2;
                             break label$102;
                            case 2:
                             label$110 : {
                              i64toi32_i32$3 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                              $12_1 = i64toi32_i32$2;
                              $12$hi = i64toi32_i32$5;
                              i64toi32_i32$3 = i64toi32_i32$2;
                              i64toi32_i32$2 = 0;
                              i64toi32_i32$0 = 3;
                              i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
                              if (!(i64toi32_i32$3 & i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
                               break label$110
                              }
                              i64toi32_i32$2 = $12$hi;
                              i64toi32_i32$2 = $104($12_1 | 0, i64toi32_i32$2 | 0, 4 | 0) | 0;
                              i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                              $12_1 = i64toi32_i32$2;
                              $12$hi = i64toi32_i32$3;
                              i64toi32_i32$2 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              HEAP32[i64toi32_i32$2 >> 2] = $12_1;
                              HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$3;
                             }
                             i64toi32_i32$5 = $2_1;
                             i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                             i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                             i64toi32_i32$5 = i64toi32_i32$3;
                             i64toi32_i32$3 = 1;
                             i64toi32_i32$0 = 0;
                             if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
                              $92_1 = 1
                             } else {
                              if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
                               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                                $93_1 = 0
                               } else {
                                $93_1 = 1
                               }
                               $94_1 = $93_1;
                              } else {
                               $94_1 = 0
                              }
                              $92_1 = $94_1;
                             }
                             if ($92_1) {
                              break label$7
                             }
                             label$111 : {
                              if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                               break label$111
                              }
                              i64toi32_i32$0 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                              $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, 2 | 0);
                              HEAP32[(0 + 35348 | 0) >> 2] = 0;
                             }
                             i64toi32_i32$0 = $2_1;
                             i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                             i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                             $12_1 = i64toi32_i32$2;
                             $12$hi = i64toi32_i32$5;
                             i64toi32_i32$2 = 0;
                             HEAP32[(i64toi32_i32$2 + 36032 | 0) >> 2] = $12_1;
                             HEAP32[(i64toi32_i32$2 + 36036 | 0) >> 2] = i64toi32_i32$5;
                             i64toi32_i32$2 = $0_1;
                             HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] = $12_1;
                             HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] = i64toi32_i32$5;
                             $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                             i64toi32_i32$0 = ($8_1 << 3 | 0) + 35744 | 0;
                             i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                             i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                             $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, $0_1 + 192 | 0 | 0, 4 | 0, 0 | 0);
                             i64toi32_i32$2 = 0;
                             $12_1 = 4;
                             $12$hi = i64toi32_i32$2;
                             break label$102;
                            case 3:
                             break label$103;
                            default:
                             break label$6;
                            };
                           }
                           label$112 : {
                            i64toi32_i32$0 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                            i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                            $12_1 = i64toi32_i32$2;
                            $12$hi = i64toi32_i32$5;
                            i64toi32_i32$0 = i64toi32_i32$2;
                            i64toi32_i32$2 = 0;
                            i64toi32_i32$3 = 7;
                            i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
                            if (!(i64toi32_i32$0 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
                             break label$112
                            }
                            i64toi32_i32$2 = $12$hi;
                            i64toi32_i32$2 = $104($12_1 | 0, i64toi32_i32$2 | 0, 8 | 0) | 0;
                            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                            $12_1 = i64toi32_i32$2;
                            $12$hi = i64toi32_i32$0;
                            i64toi32_i32$2 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            HEAP32[i64toi32_i32$2 >> 2] = $12_1;
                            HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
                           }
                           label$113 : {
                            if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                             break label$113
                            }
                            i64toi32_i32$5 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                            $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, 2 | 0);
                            HEAP32[(0 + 35348 | 0) >> 2] = 0;
                           }
                           i64toi32_i32$5 = $2_1;
                           i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                           $12_1 = i64toi32_i32$2;
                           $12$hi = i64toi32_i32$0;
                           i64toi32_i32$2 = 0;
                           HEAP32[(i64toi32_i32$2 + 36032 | 0) >> 2] = $12_1;
                           HEAP32[(i64toi32_i32$2 + 36036 | 0) >> 2] = i64toi32_i32$0;
                           i64toi32_i32$2 = $0_1;
                           HEAP32[(i64toi32_i32$2 + 200 | 0) >> 2] = $12_1;
                           HEAP32[(i64toi32_i32$2 + 204 | 0) >> 2] = i64toi32_i32$0;
                           $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                           i64toi32_i32$5 = ($8_1 << 3 | 0) + 35744 | 0;
                           i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                           i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                           $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, $0_1 + 200 | 0 | 0, 5 | 0, 0 | 0);
                           i64toi32_i32$2 = 0;
                           $12_1 = 8;
                           $12$hi = i64toi32_i32$2;
                          }
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          $9_1 = ($8_1 << 3 | 0) + 35744 | 0;
                          $460 = $9_1;
                          i64toi32_i32$5 = $9_1;
                          i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                          $462$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = $12$hi;
                          i64toi32_i32$0 = $462$hi;
                          i64toi32_i32$5 = i64toi32_i32$2;
                          i64toi32_i32$2 = $12$hi;
                          i64toi32_i32$3 = $12_1;
                          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
                          }
                          $12_1 = i64toi32_i32$4;
                          $12$hi = i64toi32_i32$1;
                          i64toi32_i32$5 = $460;
                          HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$4;
                          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$0 = 31728 + ($8_1 << 2 | 0) | 0;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                          i64toi32_i32$5 = 0;
                          $470 = i64toi32_i32$1;
                          $470$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $12$hi;
                          i64toi32_i32$0 = i64toi32_i32$4;
                          i64toi32_i32$1 = $470$hi;
                          i64toi32_i32$3 = $470;
                          if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
                           $95_1 = 1
                          } else {
                           if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
                            if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) {
                             $96_1 = 0
                            } else {
                             $96_1 = 1
                            }
                            $97_1 = $96_1;
                           } else {
                            $97_1 = 0
                           }
                           $95_1 = $97_1;
                          }
                          if ($95_1) {
                           break label$36
                          }
                          HEAP32[($0_1 + 160 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                          $99(35776 | 0, 10955 | 0, $0_1 + 160 | 0 | 0) | 0;
                          $186(35776 | 0) | 0;
                          abort();
                         case 35:
                          label$114 : {
                           label$115 : {
                            switch ((HEAP32[(0 + 32020 | 0) >> 2] | 0) + -6 | 0 | 0) {
                            case 0:
                             label$117 : {
                              i64toi32_i32$3 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                              $12_1 = i64toi32_i32$0;
                              $12$hi = i64toi32_i32$5;
                              i64toi32_i32$3 = i64toi32_i32$0;
                              i64toi32_i32$0 = 0;
                              i64toi32_i32$1 = 3;
                              i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
                              if (!(i64toi32_i32$3 & i64toi32_i32$1 | 0 | i64toi32_i32$0 | 0)) {
                               break label$117
                              }
                              i64toi32_i32$0 = $12$hi;
                              i64toi32_i32$0 = $104($12_1 | 0, i64toi32_i32$0 | 0, 4 | 0) | 0;
                              i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                              $12_1 = i64toi32_i32$0;
                              $12$hi = i64toi32_i32$3;
                              i64toi32_i32$0 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              HEAP32[i64toi32_i32$0 >> 2] = $12_1;
                              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
                             }
                             label$118 : {
                              if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                               break label$118
                              }
                              i64toi32_i32$5 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                              i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                              $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 2 | 0);
                              HEAP32[(0 + 35348 | 0) >> 2] = 0;
                             }
                             HEAPF32[(0 + 36032 | 0) >> 2] = Math_fround(+HEAPF64[$2_1 >> 3]);
                             i64toi32_i32$5 = 0;
                             i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36032 | 0) >> 2] | 0;
                             i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 36036 | 0) >> 2] | 0;
                             $508 = i64toi32_i32$0;
                             i64toi32_i32$0 = $0_1;
                             HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] = $508;
                             HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] = i64toi32_i32$3;
                             $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                             i64toi32_i32$5 = ($8_1 << 3 | 0) + 35744 | 0;
                             i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                             i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                             $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, $0_1 + 256 | 0 | 0, 6 | 0, 0 | 0);
                             i64toi32_i32$0 = 0;
                             $12_1 = 4;
                             $12$hi = i64toi32_i32$0;
                             break label$114;
                            case 2:
                             break label$115;
                            default:
                             break label$5;
                            };
                           }
                           label$119 : {
                            i64toi32_i32$5 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                            $12_1 = i64toi32_i32$0;
                            $12$hi = i64toi32_i32$3;
                            i64toi32_i32$5 = i64toi32_i32$0;
                            i64toi32_i32$0 = 0;
                            i64toi32_i32$1 = 7;
                            i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
                            if (!(i64toi32_i32$5 & i64toi32_i32$1 | 0 | i64toi32_i32$0 | 0)) {
                             break label$119
                            }
                            i64toi32_i32$0 = $12$hi;
                            i64toi32_i32$0 = $104($12_1 | 0, i64toi32_i32$0 | 0, 8 | 0) | 0;
                            i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                            $12_1 = i64toi32_i32$0;
                            $12$hi = i64toi32_i32$5;
                            i64toi32_i32$0 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            HEAP32[i64toi32_i32$0 >> 2] = $12_1;
                            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
                           }
                           label$120 : {
                            if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                             break label$120
                            }
                            i64toi32_i32$3 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                            $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 2 | 0);
                            HEAP32[(0 + 35348 | 0) >> 2] = 0;
                           }
                           HEAPF64[(0 + 36032 | 0) >> 3] = +HEAPF64[$2_1 >> 3];
                           i64toi32_i32$3 = 0;
                           i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 36032 | 0) >> 2] | 0;
                           i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36036 | 0) >> 2] | 0;
                           $541 = i64toi32_i32$0;
                           i64toi32_i32$0 = $0_1;
                           HEAP32[(i64toi32_i32$0 + 264 | 0) >> 2] = $541;
                           HEAP32[(i64toi32_i32$0 + 268 | 0) >> 2] = i64toi32_i32$5;
                           $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                           i64toi32_i32$3 = ($8_1 << 3 | 0) + 35744 | 0;
                           i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                           $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, $0_1 + 264 | 0 | 0, 8 | 0, 0 | 0);
                           i64toi32_i32$0 = 0;
                           $12_1 = 8;
                           $12$hi = i64toi32_i32$0;
                          }
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          $9_1 = ($8_1 << 3 | 0) + 35744 | 0;
                          $555 = $9_1;
                          i64toi32_i32$3 = $9_1;
                          i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                          $557$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $12$hi;
                          i64toi32_i32$5 = $557$hi;
                          i64toi32_i32$3 = i64toi32_i32$0;
                          i64toi32_i32$0 = $12$hi;
                          i64toi32_i32$1 = $12_1;
                          i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                          }
                          $12_1 = i64toi32_i32$2;
                          $12$hi = i64toi32_i32$4;
                          i64toi32_i32$3 = $555;
                          HEAP32[i64toi32_i32$3 >> 2] = i64toi32_i32$2;
                          HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
                          i64toi32_i32$5 = 31728 + ($8_1 << 2 | 0) | 0;
                          i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                          i64toi32_i32$3 = 0;
                          $565 = i64toi32_i32$4;
                          $565$hi = i64toi32_i32$3;
                          i64toi32_i32$3 = $12$hi;
                          i64toi32_i32$5 = i64toi32_i32$2;
                          i64toi32_i32$4 = $565$hi;
                          i64toi32_i32$1 = $565;
                          if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
                           $98_1 = 1
                          } else {
                           if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
                            if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0) {
                             $99_1 = 0
                            } else {
                             $99_1 = 1
                            }
                            $100_1 = $99_1;
                           } else {
                            $100_1 = 0
                           }
                           $98_1 = $100_1;
                          }
                          if ($98_1) {
                           break label$36
                          }
                          HEAP32[($0_1 + 240 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                          $99(35776 | 0, 10955 | 0, $0_1 + 240 | 0 | 0) | 0;
                          $186(35776 | 0) | 0;
                          abort();
                         case 37:
                          label$121 : {
                           label$122 : {
                            switch ((HEAP32[(0 + 32020 | 0) >> 2] | 0) + -6 | 0 | 0) {
                            case 0:
                             label$124 : {
                              i64toi32_i32$1 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                              i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                              $12_1 = i64toi32_i32$5;
                              $12$hi = i64toi32_i32$3;
                              i64toi32_i32$1 = i64toi32_i32$5;
                              i64toi32_i32$5 = 0;
                              i64toi32_i32$4 = 3;
                              i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
                              if (!(i64toi32_i32$1 & i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
                               break label$124
                              }
                              i64toi32_i32$5 = $12$hi;
                              i64toi32_i32$5 = $104($12_1 | 0, i64toi32_i32$5 | 0, 4 | 0) | 0;
                              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                              $12_1 = i64toi32_i32$5;
                              $12$hi = i64toi32_i32$1;
                              i64toi32_i32$5 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              HEAP32[i64toi32_i32$5 >> 2] = $12_1;
                              HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
                             }
                             label$125 : {
                              if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                               break label$125
                              }
                              i64toi32_i32$3 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                              $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 2 | 0);
                              HEAP32[(0 + 35348 | 0) >> 2] = 0;
                             }
                             i64toi32_i32$3 = $2_1;
                             i64toi32_i32$5 = HEAP32[$2_1 >> 2] | 0;
                             i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                             i64toi32_i32$3 = 0;
                             HEAPF32[(0 + 36032 | 0) >> 2] = Math_fround(+(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0));
                             i64toi32_i32$3 = 0;
                             i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 36032 | 0) >> 2] | 0;
                             i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36036 | 0) >> 2] | 0;
                             $603 = i64toi32_i32$1;
                             i64toi32_i32$1 = $0_1;
                             HEAP32[(i64toi32_i32$1 + 336 | 0) >> 2] = $603;
                             HEAP32[(i64toi32_i32$1 + 340 | 0) >> 2] = i64toi32_i32$5;
                             $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                             i64toi32_i32$3 = ($8_1 << 3 | 0) + 35744 | 0;
                             i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                             i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                             $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, $0_1 + 336 | 0 | 0, 6 | 0, 0 | 0);
                             i64toi32_i32$1 = 0;
                             $12_1 = 4;
                             $12$hi = i64toi32_i32$1;
                             break label$121;
                            case 2:
                             break label$122;
                            default:
                             break label$4;
                            };
                           }
                           label$126 : {
                            i64toi32_i32$3 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                            i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                            $12_1 = i64toi32_i32$1;
                            $12$hi = i64toi32_i32$5;
                            i64toi32_i32$3 = i64toi32_i32$1;
                            i64toi32_i32$1 = 0;
                            i64toi32_i32$4 = 7;
                            i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
                            if (!(i64toi32_i32$3 & i64toi32_i32$4 | 0 | i64toi32_i32$1 | 0)) {
                             break label$126
                            }
                            i64toi32_i32$1 = $12$hi;
                            i64toi32_i32$1 = $104($12_1 | 0, i64toi32_i32$1 | 0, 8 | 0) | 0;
                            i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                            $12_1 = i64toi32_i32$1;
                            $12$hi = i64toi32_i32$3;
                            i64toi32_i32$1 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            HEAP32[i64toi32_i32$1 >> 2] = $12_1;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
                           }
                           label$127 : {
                            if (!(HEAP32[(0 + 35348 | 0) >> 2] | 0)) {
                             break label$127
                            }
                            i64toi32_i32$5 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                            i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                            $190(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, 35488 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 2 | 0);
                            HEAP32[(0 + 35348 | 0) >> 2] = 0;
                           }
                           i64toi32_i32$5 = $2_1;
                           i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                           i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                           i64toi32_i32$5 = 0;
                           HEAPF64[(0 + 36032 | 0) >> 3] = +(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$3 | 0);
                           i64toi32_i32$5 = 0;
                           i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 36032 | 0) >> 2] | 0;
                           i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 36036 | 0) >> 2] | 0;
                           $637 = i64toi32_i32$3;
                           i64toi32_i32$3 = $0_1;
                           HEAP32[(i64toi32_i32$3 + 344 | 0) >> 2] = $637;
                           HEAP32[(i64toi32_i32$3 + 348 | 0) >> 2] = i64toi32_i32$1;
                           $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                           i64toi32_i32$5 = ($8_1 << 3 | 0) + 35744 | 0;
                           i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                           i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                           $112(HEAP32[(0 + 35328 | 0) >> 2] | 0 | 0, $8_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, $0_1 + 344 | 0 | 0, 8 | 0, 0 | 0);
                           i64toi32_i32$3 = 0;
                           $12_1 = 8;
                           $12$hi = i64toi32_i32$3;
                          }
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          $9_1 = ($8_1 << 3 | 0) + 35744 | 0;
                          $651 = $9_1;
                          i64toi32_i32$5 = $9_1;
                          i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                          $653$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $12$hi;
                          i64toi32_i32$1 = $653$hi;
                          i64toi32_i32$5 = i64toi32_i32$3;
                          i64toi32_i32$3 = $12$hi;
                          i64toi32_i32$4 = $12_1;
                          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                          }
                          $12_1 = i64toi32_i32$0;
                          $12$hi = i64toi32_i32$2;
                          i64toi32_i32$5 = $651;
                          HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$0;
                          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
                          i64toi32_i32$1 = 31728 + ($8_1 << 2 | 0) | 0;
                          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$5 = 0;
                          $661 = i64toi32_i32$2;
                          $661$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $12$hi;
                          i64toi32_i32$1 = i64toi32_i32$0;
                          i64toi32_i32$2 = $661$hi;
                          i64toi32_i32$4 = $661;
                          if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
                           $101_1 = 1
                          } else {
                           if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
                            if (i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0) {
                             $102_1 = 0
                            } else {
                             $102_1 = 1
                            }
                            $103_1 = $102_1;
                           } else {
                            $103_1 = 0
                           }
                           $101_1 = $103_1;
                          }
                          if ($101_1) {
                           break label$36
                          }
                          HEAP32[($0_1 + 320 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                          $99(35776 | 0, 10955 | 0, $0_1 + 320 | 0 | 0) | 0;
                          $186(35776 | 0) | 0;
                          abort();
                         case 41:
                          $8_1 = HEAP32[(0 + 32028 | 0) >> 2] | 0;
                          if (($8_1 | 0) >= (32 | 0)) {
                           break label$3
                          }
                          i64toi32_i32$5 = $8_1;
                          i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                          $677$hi = i64toi32_i32$1;
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $679 = i64toi32_i32$1;
                          $679$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $677$hi;
                          i64toi32_i32$1 = $679$hi;
                          $182($8_1 | 0, i64toi32_i32$5 | 0, $679 | 0, i64toi32_i32$1 | 0, 5 | 0, 0 | 0);
                          HEAP32[(0 + 32028 | 0) >> 2] = (HEAP32[(0 + 32028 | 0) >> 2] | 0) + 1 | 0;
                          break label$36;
                         case 45:
                          $8_1 = HEAP32[(0 + 35336 | 0) >> 2] | 0;
                          if (($8_1 | 0) >= (32 | 0)) {
                           break label$2
                          }
                          HEAPF64[(0 + 36040 | 0) >> 3] = +HEAPF64[$2_1 >> 3];
                          i64toi32_i32$4 = 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 36040 | 0) >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 36044 | 0) >> 2] | 0;
                          $688 = i64toi32_i32$1;
                          i64toi32_i32$1 = $0_1;
                          HEAP32[(i64toi32_i32$1 + 408 | 0) >> 2] = $688;
                          HEAP32[(i64toi32_i32$1 + 412 | 0) >> 2] = i64toi32_i32$5;
                          i64toi32_i32$1 = $8_1;
                          i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                          $184(i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $0_1 + 408 | 0 | 0, 8 | 0, 0 | 0);
                          HEAP32[(0 + 35336 | 0) >> 2] = (HEAP32[(0 + 35336 | 0) >> 2] | 0) + 1 | 0;
                          break label$36;
                         case 49:
                          $8_1 = HEAP32[(0 + 35340 | 0) >> 2] | 0;
                          if (($8_1 | 0) == (6 | 0)) {
                           break label$1
                          }
                          label$128 : {
                           label$129 : {
                            label$130 : {
                             $9_1 = ($8_1 | 0) / (3 | 0) | 0;
                             switch ($8_1 - Math_imul($9_1, 3) | 0 | 0) {
                             case 1:
                              break label$129;
                             case 0:
                              break label$130;
                             default:
                              break label$128;
                             };
                            }
                            i64toi32_i32$4 = $2_1;
                            i64toi32_i32$5 = HEAP32[$2_1 >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                            $12_1 = i64toi32_i32$5;
                            $12$hi = i64toi32_i32$1;
                            $9_1 = 101184 + ((($8_1 | 0) / (3 | 0) | 0) << 5 | 0) | 0;
                            HEAP32[($9_1 + 24 | 0) >> 2] = 1;
                            i64toi32_i32$5 = $9_1;
                            HEAP32[i64toi32_i32$5 >> 2] = $12_1;
                            HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
                            HEAP32[(0 + 35340 | 0) >> 2] = $8_1 + 1 | 0;
                            break label$36;
                           }
                           i64toi32_i32$4 = $2_1;
                           i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                           i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                           HEAP32[((101184 + ((($8_1 | 0) / (3 | 0) | 0) << 5 | 0) | 0) + 8 | 0) >> 2] = i64toi32_i32$1;
                           HEAP32[(0 + 35340 | 0) >> 2] = $8_1 + 1 | 0;
                           break label$36;
                          }
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$5 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $727 = i64toi32_i32$5;
                          i64toi32_i32$5 = 101184 + ($9_1 << 5 | 0) | 0;
                          HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] = $727;
                          HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] = i64toi32_i32$1;
                          HEAP32[(0 + 35340 | 0) >> 2] = $8_1 + 1 | 0;
                          break label$36;
                         case 53:
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $732 = i64toi32_i32$1;
                          i64toi32_i32$1 = $0_1;
                          HEAP32[(i64toi32_i32$1 + 512 | 0) >> 2] = $732;
                          HEAP32[(i64toi32_i32$1 + 516 | 0) >> 2] = i64toi32_i32$5;
                          $99(36048 | 0, 11173 | 0, i64toi32_i32$1 + 512 | 0 | 0) | 0;
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$5 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $11_1 = i64toi32_i32$5;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 54:
                          HEAP32[($0_1 + 528 | 0) >> 2] = $2_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11178 | 0, $0_1 + 528 | 0 | 0) | 0;
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($8_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0, $8_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 3 | 0, 1 | 0);
                          i64toi32_i32$5 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$5;
                          break label$36;
                         case 55:
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 544 | 0) >> 2] = $8_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11189 | 0, $0_1 + 544 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 1 | 0, 1 | 0);
                          i64toi32_i32$1 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 56:
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 560 | 0) >> 2] = $8_1;
                          $99(36048 | 0, 11198 | 0, $0_1 + 560 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, 1 | 0);
                          i64toi32_i32$5 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$5;
                          break label$36;
                         case 57:
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 576 | 0) >> 2] = $8_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11178 | 0, $0_1 + 576 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 3 | 0, 1 | 0);
                          i64toi32_i32$1 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 58:
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $798 = i64toi32_i32$1;
                          i64toi32_i32$1 = $0_1;
                          HEAP32[(i64toi32_i32$1 + 496 | 0) >> 2] = $798;
                          HEAP32[(i64toi32_i32$1 + 500 | 0) >> 2] = i64toi32_i32$5;
                          $99(36048 | 0, 11173 | 0, i64toi32_i32$1 + 496 | 0 | 0) | 0;
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$5 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $11_1 = i64toi32_i32$5;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 59:
                          HEAP32[($0_1 + 480 | 0) >> 2] = $2_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11198 | 0, $0_1 + 480 | 0 | 0) | 0;
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($8_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0, $8_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, 1 | 0);
                          i64toi32_i32$5 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$5;
                          break label$36;
                         case 60:
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 464 | 0) >> 2] = $8_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11189 | 0, $0_1 + 464 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 1 | 0, 1 | 0);
                          i64toi32_i32$1 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 61:
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 448 | 0) >> 2] = $8_1;
                          $99(36048 | 0, 11198 | 0, $0_1 + 448 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, 1 | 0);
                          i64toi32_i32$5 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$5;
                          break label$36;
                         case 62:
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 432 | 0) >> 2] = $8_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11178 | 0, $0_1 + 432 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 3 | 0, 1 | 0);
                          i64toi32_i32$1 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 63:
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $864 = i64toi32_i32$1;
                          i64toi32_i32$1 = $0_1;
                          HEAP32[(i64toi32_i32$1 + 416 | 0) >> 2] = $864;
                          HEAP32[(i64toi32_i32$1 + 420 | 0) >> 2] = i64toi32_i32$5;
                          $99(36048 | 0, 11173 | 0, i64toi32_i32$1 + 416 | 0 | 0) | 0;
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$5 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $11_1 = i64toi32_i32$5;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 64:
                          HEAP32[($0_1 + 400 | 0) >> 2] = $2_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11189 | 0, $0_1 + 400 | 0 | 0) | 0;
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($8_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0, $8_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 1 | 0, 1 | 0);
                          i64toi32_i32$5 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$5;
                          break label$36;
                         case 65:
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 384 | 0) >> 2] = $8_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11189 | 0, $0_1 + 384 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 1 | 0, 1 | 0);
                          i64toi32_i32$1 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 66:
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 368 | 0) >> 2] = $8_1;
                          $99(36048 | 0, 11198 | 0, $0_1 + 368 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, 1 | 0);
                          i64toi32_i32$5 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$5;
                          break label$36;
                         case 67:
                          $8_1 = $2_1 + -128 | 0;
                          HEAP32[($0_1 + 352 | 0) >> 2] = $8_1;
                          HEAP32[(0 + 35320 | 0) >> 2] = 0;
                          $99(36048 | 0, 11178 | 0, $0_1 + 352 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 3 | 0, 1 | 0);
                          i64toi32_i32$1 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 68:
                          i64toi32_i32$4 = $2_1;
                          i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $11_1 = i64toi32_i32$1;
                          $11$hi = i64toi32_i32$5;
                          break label$36;
                         case 69:
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$4 = ($8_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0, $8_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 2 | 0, 0 | 0);
                          i64toi32_i32$1 = 0;
                          $11_1 = 0;
                          $11$hi = i64toi32_i32$1;
                          break label$36;
                         case 70:
                          label$131 : {
                           i64toi32_i32$4 = $2_1;
                           i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                           i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                           $12_1 = i64toi32_i32$1;
                           $12$hi = i64toi32_i32$5;
                           i64toi32_i32$4 = i64toi32_i32$1;
                           i64toi32_i32$1 = 0;
                           i64toi32_i32$2 = -2147483648;
                           i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                           i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
                           if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                           }
                           i64toi32_i32$5 = i64toi32_i32$3;
                           i64toi32_i32$4 = 0;
                           i64toi32_i32$2 = -2;
                           if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                            break label$131
                           }
                           i64toi32_i32$5 = $12$hi;
                           i64toi32_i32$0 = $0_1;
                           HEAP32[(i64toi32_i32$0 + 272 | 0) >> 2] = $12_1;
                           HEAP32[(i64toi32_i32$0 + 276 | 0) >> 2] = i64toi32_i32$5;
                           $99(36048 | 0, 11173 | 0, i64toi32_i32$0 + 272 | 0 | 0) | 0;
                           $187(23 | 0, 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, HEAP16[$2_1 >> 1] | 0 | 0, 36048 | 0);
                           break label$36;
                          }
                          i64toi32_i32$5 = $12$hi;
                          i64toi32_i32$0 = $0_1;
                          HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] = $12_1;
                          HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] = i64toi32_i32$5;
                          $99(36048 | 0, 11207 | 0, i64toi32_i32$0 + 304 | 0 | 0) | 0;
                          $8_1 = $2_1 + -256 | 0;
                          $187(83 | 0, 1 | 0, HEAP32[$8_1 >> 2] | 0 | 0, 0 | 0, 0 | 0, HEAP16[($2_1 + 2 | 0) >> 1] | 0 | 0, 36048 | 0);
                          i64toi32_i32$2 = $2_1;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $966 = i64toi32_i32$5;
                          i64toi32_i32$5 = $0_1;
                          HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] = $966;
                          HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] = i64toi32_i32$0;
                          $99(36048 | 0, 11218 | 0, i64toi32_i32$5 + 288 | 0 | 0) | 0;
                          $8_1 = HEAP32[$8_1 >> 2] | 0;
                          $187(23 | 0, 1 | 0, $8_1 | 0, $8_1 | 0, 0 | 0, HEAP16[i64toi32_i32$2 >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 71:
                          HEAP32[($0_1 + 224 | 0) >> 2] = $2_1;
                          $99(36048 | 0, 11189 | 0, $0_1 + 224 | 0 | 0) | 0;
                          $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$2 = ($8_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0, $8_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 1 | 0, 1 | 0);
                          $8_1 = $2_1 + -256 | 0;
                          $187(83 | 0, 1 | 0, HEAP32[$8_1 >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 36048 | 0);
                          HEAP32[($0_1 + 208 | 0) >> 2] = $2_1;
                          $99(36048 | 0, 11198 | 0, $0_1 + 208 | 0 | 0) | 0;
                          $9_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
                          i64toi32_i32$2 = ($9_1 << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $193(HEAP32[(0 + 35332 | 0) >> 2] | 0 | 0, $2_1 | 0, $9_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 0 | 0, 1 | 0);
                          $8_1 = HEAP32[$8_1 >> 2] | 0;
                          $187(23 | 0, 1 | 0, $8_1 | 0, $8_1 | 0, 0 | 0, 0 | 0, 36048 | 0);
                          break label$36;
                         case 72:
                          $187(109 | 0, 2 | 0, 0 | 0, 31 | 0, 0 | 0, 0 | 0, 11229 | 0);
                          break label$36;
                         case 73:
                          $187(HEAPU8[$2_1 >> 0] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 11229 | 0);
                          break label$36;
                         case 74:
                          $187(HEAPU8[$2_1 >> 0] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 11229 | 0);
                          break label$36;
                         case 75:
                          $187(HEAPU8[($2_1 + -768 | 0) >> 0] | 0 | 0, 1 | 0, HEAP32[($2_1 + -640 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -128 | 0) >> 2] | 0 | 0, 0 | 0, HEAP16[($2_1 + -384 | 0) >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 76:
                          $187(HEAPU8[($2_1 + -768 | 0) >> 0] | 0 | 0, 1 | 0, HEAP32[($2_1 + -640 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -128 | 0) >> 2] | 0 | 0, 0 | 0, HEAP16[($2_1 + -384 | 0) >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 77:
                          $187(HEAPU8[($2_1 + -768 | 0) >> 0] | 0 | 0, 1 | 0, 0 | 0, HEAP32[($2_1 + -128 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -640 | 0) >> 2] | 0 | 0, HEAP16[($2_1 + -384 | 0) >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 78:
                          $187(HEAPU8[($2_1 + -768 | 0) >> 0] | 0 | 0, 1 | 0, 0 | 0, HEAP32[($2_1 + -128 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -640 | 0) >> 2] | 0 | 0, HEAP16[($2_1 + -384 | 0) >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 79:
                          $187(HEAPU8[($2_1 + -640 | 0) >> 0] | 0 | 0, 0 | 0, HEAP32[($2_1 + -512 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0, 11229 | 0);
                          break label$36;
                         case 80:
                          $187(HEAPU8[($2_1 + -640 | 0) >> 0] | 0 | 0, 0 | 0, HEAP32[($2_1 + -512 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0, 11229 | 0);
                          break label$36;
                         case 81:
                          $187(HEAPU8[($2_1 + -384 | 0) >> 0] | 0 | 0, 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0, 0 | 0, 11229 | 0);
                          break label$36;
                         case 82:
                          $187(((HEAPU8[($2_1 + -640 | 0) >> 0] | 0) + 1 | 0) & 255 | 0 | 0, 1 | 0, HEAP32[($2_1 + -512 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, 0 | 0, HEAP16[$2_1 >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 83:
                          $187(HEAPU8[($2_1 + -640 | 0) >> 0] | 0 | 0, 1 | 0, HEAP32[($2_1 + -512 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, 0 | 0, HEAP16[$2_1 >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 84:
                          $187(HEAPU8[($2_1 + -128 | 0) >> 0] | 0 | 0, 1 | 0, 0 | 0, 0 | 0, 0 | 0, HEAP16[$2_1 >> 1] | 0 | 0, 11229 | 0);
                          break label$36;
                         case 85:
                          $187(HEAPU8[($2_1 + -384 | 0) >> 0] | 0 | 0, 1 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, HEAP16[$2_1 >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 86:
                          $187(HEAPU8[($2_1 + -384 | 0) >> 0] | 0 | 0, 1 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, HEAP16[$2_1 >> 1] | 0 | 0, 36048 | 0);
                          break label$36;
                         case 87:
                          $187(HEAPU8[($2_1 + -384 | 0) >> 0] | 0 | 0, 0 | 0, 32 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0, 11229 | 0);
                          break label$36;
                         case 88:
                          i64toi32_i32$2 = $2_1;
                          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $1152 = i64toi32_i32$0;
                          $1152$hi = i64toi32_i32$5;
                          i64toi32_i32$2 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                          $1156 = i64toi32_i32$5;
                          $1156$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = $1152$hi;
                          i64toi32_i32$2 = $1152;
                          i64toi32_i32$5 = $1156$hi;
                          i64toi32_i32$4 = $1156;
                          i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
                          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
                          i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                          i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
                          $187(HEAPU8[($2_1 + -384 | 0) >> 0] | 0 | 0, 1 | 0, 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, 0 | 0, ((i64toi32_i32$1 << 16 | 0) + -262144 | 0) >> 16 | 0 | 0, 11229 | 0);
                          break label$36;
                         case 89:
                          i64toi32_i32$0 = $2_1;
                          i64toi32_i32$3 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$2 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $1172 = i64toi32_i32$3;
                          $1172$hi = i64toi32_i32$2;
                          i64toi32_i32$0 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                          i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                          $1176 = i64toi32_i32$2;
                          $1176$hi = i64toi32_i32$3;
                          i64toi32_i32$3 = $1172$hi;
                          i64toi32_i32$0 = $1172;
                          i64toi32_i32$2 = $1176$hi;
                          i64toi32_i32$4 = $1176;
                          i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
                          i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
                          i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                          i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                          $187(HEAPU8[($2_1 + -640 | 0) >> 0] | 0 | 0, 1 | 0, 0 | 0, HEAP32[($2_1 + -512 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + -256 | 0) >> 2] | 0 | 0, ((i64toi32_i32$5 << 16 | 0) + -262144 | 0) >> 16 | 0 | 0, 11229 | 0);
                          break label$36;
                         case 90:
                          i64toi32_i32$3 = $2_1;
                          i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                          $1186 = i64toi32_i32$1;
                          $1186$hi = i64toi32_i32$0;
                          i64toi32_i32$3 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                          i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                          $1190 = i64toi32_i32$0;
                          $1190$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $1186$hi;
                          i64toi32_i32$3 = $1186;
                          i64toi32_i32$0 = $1190$hi;
                          i64toi32_i32$4 = $1190;
                          i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
                          i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
                          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                          i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                          $187(HEAPU8[($2_1 + -128 | 0) >> 0] | 0 | 0, 1 | 0, 0 | 0, 32 | 0, 0 | 0, ((i64toi32_i32$2 << 16 | 0) + -262144 | 0) >> 16 | 0 | 0, 11229 | 0);
                          break label$36;
                         case 91:
                          i64toi32_i32$1 = $2_1;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                          $1200 = i64toi32_i32$5;
                          $1200$hi = i64toi32_i32$3;
                          i64toi32_i32$1 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
                          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                          $1204 = i64toi32_i32$3;
                          $1204$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $1200$hi;
                          i64toi32_i32$1 = $1200;
                          i64toi32_i32$3 = $1204$hi;
                          i64toi32_i32$4 = $1204;
                          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
                          i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
                          i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                          i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
                          $187(HEAPU8[($2_1 + -128 | 0) >> 0] | 0 | 0, 2 | 0, 0 | 0, 0 | 0, 0 | 0, ((i64toi32_i32$0 << 16 | 0) + -262144 | 0) >> 16 | 0 | 0, 11229 | 0);
                          break label$36;
                         case 92:
                          break label$37;
                         default:
                          break label$36;
                         };
                        }
                        $187(HEAPU8[($2_1 + -128 | 0) >> 0] | 0 | 0, 2 | 0, 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0, 0 | 0, 11229 | 0);
                       }
                       $2_1 = $2_1 - ($7_1 << 7 | 0) | 0;
                       i64toi32_i32$2 = $11$hi;
                       i64toi32_i32$1 = $2_1;
                       HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = $11_1;
                       HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = i64toi32_i32$2;
                       $4(i64toi32_i32$1 + 136 | 0 | 0, $0_1 + 584 | 0 | 0, 120 | 0) | 0;
                       $2_1 = i64toi32_i32$1 + 128 | 0;
                       label$132 : {
                        $4_1 = $4_1 - $7_1 | 0;
                        $8_1 = HEAPU8[$4_1 >> 0] | 0;
                        $6_1 = HEAP8[($6_1 + 11232 | 0) >> 0] | 0;
                        $7_1 = $8_1 + (HEAP8[($6_1 + 11272 | 0) >> 0] | 0) | 0;
                        if ($7_1 >>> 0 > 230 >>> 0) {
                         break label$132
                        }
                        if ((HEAP16[(($7_1 << 1 | 0) + 9872 | 0) >> 1] | 0 | 0) != ($8_1 | 0)) {
                         break label$132
                        }
                        $6_1 = HEAPU8[($7_1 + 10336 | 0) >> 0] | 0;
                        break label$29;
                       }
                       $6_1 = HEAP16[((($6_1 + -56 | 0) << 1 | 0) + 11376 | 0) >> 1] | 0;
                      }
                      $4_1 = $4_1 + 1 | 0;
                      continue label$19;
                     }
                     break label$19;
                    };
                    HEAP32[(0 + 35352 | 0) >> 2] = (HEAP32[(0 + 35352 | 0) >> 2] | 0) + 1 | 0;
                    $186(11444 | 0) | 0;
                    abort();
                   }
                   $186(11457 | 0) | 0;
                   abort();
                  }
                  HEAP32[$0_1 >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                  $99(35776 | 0, 10915 | 0, $0_1 | 0) | 0;
                  $186(35776 | 0) | 0;
                  abort();
                 }
                 HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                 $99(35776 | 0, 10915 | 0, $0_1 + 16 | 0 | 0) | 0;
                 $186(35776 | 0) | 0;
                 abort();
                }
                HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
                $99(35776 | 0, 10915 | 0, $0_1 + 32 | 0 | 0) | 0;
                $186(35776 | 0) | 0;
                abort();
               }
               HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
               $99(35776 | 0, 10915 | 0, $0_1 + 48 | 0 | 0) | 0;
               $186(35776 | 0) | 0;
               abort();
              }
              HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
              $99(35776 | 0, 10915 | 0, $0_1 + 64 | 0 | 0) | 0;
              $186(35776 | 0) | 0;
              abort();
             }
             HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
             $99(35776 | 0, 10915 | 0, $0_1 + 80 | 0 | 0) | 0;
             $186(35776 | 0) | 0;
             abort();
            }
            HEAP32[($0_1 + 96 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
            $99(35776 | 0, 10915 | 0, $0_1 + 96 | 0 | 0) | 0;
            $186(35776 | 0) | 0;
            abort();
           }
           HEAP32[($0_1 + 128 | 0) >> 2] = HEAP32[(((HEAP32[(0 + 35328 | 0) >> 2] | 0) + ($8_1 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
           $99(35776 | 0, 10915 | 0, $0_1 + 128 | 0 | 0) | 0;
           $186(35776 | 0) | 0;
           abort();
          }
          $186(10993 | 0) | 0;
          abort();
         }
         $186(11033 | 0) | 0;
         abort();
        }
        $186(11073 | 0) | 0;
        abort();
       }
       $186(11113 | 0) | 0;
       abort();
      }
      $186(11113 | 0) | 0;
      abort();
     }
     $186(11113 | 0) | 0;
     abort();
    }
    $186(11121 | 0) | 0;
    abort();
   }
   $186(11121 | 0) | 0;
   abort();
  }
  $186(11153 | 0) | 0;
  abort();
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[$1_1 >> 2] = HEAP32[(0 + 35332 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[(0 + 32016 | 0) >> 2] | 0;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11557 | 0, $1_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $187($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, $8_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $26_1 = 0, $39_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = HEAP32[(0 + 32024 | 0) >> 2] | 0;
   if (($8_1 | 0) == (1 | 0)) {
    break label$1
   }
   $186(11474 | 0) | 0;
   abort();
  }
  $9_1 = $3(36304 | 0, 0 | 0, 144 | 0) | 0;
  HEAP8[(0 + 36314 | 0) >> 0] = $2_1;
  HEAP32[(0 + 36308 | 0) >> 2] = $1_1;
  HEAP8[(0 + 36304 | 0) >> 0] = $0_1;
  HEAP16[(0 + 36316 | 0) >> 1] = $5_1;
  HEAP8[(0 + 36313 | 0) >> 0] = $4_1;
  HEAP8[(0 + 36312 | 0) >> 0] = $3_1;
  $92(36318 | 0, $6_1 | 0) | 0;
  $26_1 = HEAP32[(0 + 35328 | 0) >> 2] | 0;
  i64toi32_i32$2 = ($8_1 << 3 | 0) + 35744 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $0_1 = $4($7_1 | 0, $9_1 | 0, 144 | 0) | 0;
  $117($26_1 | 0, $8_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $0_1 | 0);
  $8_1 = ((HEAP32[(0 + 32024 | 0) >> 2] | 0) << 3 | 0) + 35744 | 0;
  $39_1 = $8_1;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 4;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $39_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $0_1 + 144 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $1_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $24_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  HEAP32[(0 + 32016 | 0) >> 2] = 1;
  HEAP32[(0 + 32028 | 0) >> 2] = 1;
  HEAP32[(0 + 35344 | 0) >> 2] = 4;
  HEAP32[(0 + 35332 | 0) >> 2] = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 35744 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 35748 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 35752 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 35756 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 35760 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 35764 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 35768 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 35772 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 32024 | 0) >> 2] = 5;
  HEAP32[(0 + 35328 | 0) >> 2] = $0_1 + 4112 | 0;
  HEAP32[(0 + 35320 | 0) >> 2] = 0;
  HEAP32[(0 + 35324 | 0) >> 2] = 0;
  HEAP32[(0 + 35336 | 0) >> 2] = 0;
  HEAP32[(0 + 35340 | 0) >> 2] = 0;
  label$1 : {
   $3_1 = $30($0_1 | 0, 11576 | 0) | 0;
   if (!$3_1) {
    break label$1
   }
   HEAP32[(0 + 35132 | 0) >> 2] = $3_1;
   $185() | 0;
   HEAP32[(0 + 35344 | 0) >> 2] = 0;
   $0_1 = HEAP32[(0 + 35328 | 0) >> 2] | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = ($2_1 << 3 | 0) + 35744 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + ($2_1 << 5 | 0) | 0;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $24_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != (4 | 0)) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[(0 + 35344 | 0) >> 2] = 4;
   $39($3_1 | 0) | 0;
   global$0 = $1_1 + 16 | 0;
   return;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11578 | 0, $1_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $189($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = $5(88 | 0) | 0;
  $0_1 = $119($3_1 | 0, $0_1 | 0, 64 | 0) | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = $1$hi;
  HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 63 | 0) >> 0] = 0;
  return $3_1 | 0;
 }
 
 function $190($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    $5_1 = HEAP32[($0_1 + 4096 | 0) >> 2] | 0;
    if ($5_1) {
     break label$2
    }
    $5_1 = $0_1 + 4096 | 0;
    break label$1;
   }
   label$3 : while (1) {
    label$4 : {
     $6_1 = $5_1;
     if ($120($5_1 | 0, $1_1 | 0) | 0) {
      break label$4
     }
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $93($0_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(0 + 32016 | 0) >> 2] | 0;
     $99($4_1 + 16 | 0 | 0, 11611 | 0, $4_1 | 0) | 0;
     $186($4_1 + 16 | 0 | 0) | 0;
    }
    $5_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
    if ($5_1) {
     continue label$3
    }
    break label$3;
   };
   $5_1 = $6_1 + 76 | 0;
  }
  i64toi32_i32$0 = $2$hi;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $191($1_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 144 | 0;
 }
 
 function $191($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = $5(80 | 0) | 0;
  $0_1 = $119($3_1 | 0, $0_1 | 0, 64 | 0) | 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = $1$hi;
  HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 63 | 0) >> 0] = 0;
  return $3_1 | 0;
 }
 
 function $192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 4096 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ($120($0_1 | 0, $1_1 | 0) | 0) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $193($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0_1 = $0_1 + 4100 | 0;
  label$1 : while (1) {
   $6_1 = $0_1;
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = $7_1 + 88 | 0;
   if ($7_1) {
    continue label$1
   }
   break label$1;
  };
  i64toi32_i32$0 = $3$hi;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $194($1_1 | 0, $2_1 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, $5_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $194($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0;
  $5_1 = $5(96 | 0) | 0;
  $0_1 = $119($5_1 | 0, $0_1 | 0, 64 | 0) | 0;
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 80 | 0) >> 2] = $3_1;
  i64toi32_i32$0 = $2$hi;
  HEAP32[($0_1 + 72 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 63 | 0) >> 0] = 0;
  return $5_1 | 0;
 }
 
 function $195($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $9$hi = 0, $9_1 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $31_1 = 0, $42_1 = 0, $42$hi = 0, $44_1 = 0, $44$hi = 0, $50_1 = 0, $50$hi = 0, $51$hi = 0, $57_1 = 0, $57$hi = 0, $10_1 = 0, $10$hi = 0, $76_1 = 0, $76$hi = 0;
  $3_1 = global$0 - 464 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4100 | 0) >> 2] | 0;
    if ($4_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $6_1 = $1_1 + 4100 | 0;
   $5_1 = 0;
   label$3 : while (1) {
    $7_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
    label$4 : {
     label$5 : {
      $8_1 = $192($1_1 | 0, $4_1 | 0) | 0;
      if ($8_1) {
       break label$5
      }
      $6_1 = $4_1 + 88 | 0;
      break label$4;
     }
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
     $115($3_1 + 176 | 0 | 0, $2_1 | 0, 1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
     $4($3_1 + 320 | 0 | 0, $3_1 + 176 | 0 | 0, 144 | 0) | 0;
     i64toi32_i32$2 = $2_1 + ((HEAP32[($8_1 + 72 | 0) >> 2] | 0) << 5 | 0) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $42_1 = i64toi32_i32$1;
     $42$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
     $44_1 = i64toi32_i32$0;
     $44$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $42$hi;
     i64toi32_i32$2 = $42_1;
     i64toi32_i32$0 = $44$hi;
     i64toi32_i32$3 = $44_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$5;
     label$6 : {
      label$7 : {
       switch (HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) {
       case 2:
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$5 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
        $50_1 = i64toi32_i32$5;
        $50$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$1 = $9_1;
        i64toi32_i32$5 = $50$hi;
        i64toi32_i32$3 = $50_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
        $51$hi = i64toi32_i32$4;
        i64toi32_i32$2 = $2_1 + ((HEAP32[($4_1 + 64 | 0) >> 2] | 0) << 5 | 0) | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $57_1 = i64toi32_i32$4;
        $57$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $51$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$4 = $57$hi;
        i64toi32_i32$3 = $57_1;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -4;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $9_1 = i64toi32_i32$4;
        $9$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32764;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 65536;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$6
        }
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$4 = $3_1;
        HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] = $9_1;
        HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] = i64toi32_i32$5;
        HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] = $4_1;
        HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] = $1_1;
        $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11643 | 0, i64toi32_i32$4 + 16 | 0 | 0) | 0;
        fimport$9(1 | 0);
        abort();
       case 3:
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
        $76_1 = i64toi32_i32$5;
        $76$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$5 = $76$hi;
        i64toi32_i32$0 = $76_1;
        i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$2;
        break label$6;
       default:
        HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
        HEAP32[$3_1 >> 2] = $1_1;
        $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11720 | 0, $3_1 | 0) | 0;
        fimport$9(1 | 0);
        abort();
       case 0:
        break label$6;
       case 1:
        break label$7;
       };
      }
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$4 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 16;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $31_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $31_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $9_1 = $31_1;
      $9$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $9$hi;
     HEAP16[($3_1 + 332 | 0) >> 1] = $9_1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
     $9_1 = i64toi32_i32$3;
     $9$hi = i64toi32_i32$4;
     $4($3_1 + 32 | 0 | 0, $3_1 + 320 | 0 | 0, 144 | 0) | 0;
     $117($2_1 | 0, 1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 | 0, $3_1 + 32 | 0 | 0);
     HEAP32[$6_1 >> 2] = $7_1;
     HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] = $5_1;
     $5_1 = i64toi32_i32$2;
    }
    $4_1 = $7_1;
    if ($4_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$11 : {
   if (!$5_1) {
    break label$11
   }
   label$12 : while (1) {
    $4_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
    $6($5_1 | 0);
    $5_1 = $4_1;
    if ($4_1) {
     continue label$12
    }
    break label$12;
   };
  }
  global$0 = $3_1 + 464 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $189($1_1 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
  HEAP32[($1_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 4104 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4104 | 0) >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $17_1 = 0, $23_1 = 0, $23$hi = 0, $25_1 = 0, $25$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4104 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    label$3 : while (1) {
     $4_1 = $192($0_1 | 0, $3_1 | 0) | 0;
     if (!$4_1) {
      break label$1
     }
     $17_1 = $3_1;
     i64toi32_i32$2 = $1_1 + ((HEAP32[($4_1 + 72 | 0) >> 2] | 0) << 5 | 0) | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $23_1 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
     $25_1 = i64toi32_i32$1;
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$3 = $25_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $17_1;
     HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] = i64toi32_i32$5;
     $3_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
   }
   global$0 = $2_1 + 16 | 0;
   return;
  }
  HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11760 | 0, $2_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $198($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    label$3 : while (1) {
     $5_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
     $6_1 = $1_1;
     label$4 : {
      $7_1 = HEAP32[$6_1 >> 2] | 0;
      if (!$7_1) {
       break label$4
      }
      $8_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
      label$5 : while (1) {
       $6_1 = $7_1;
       label$6 : {
        if (!$8_1) {
         break label$6
        }
        if (!(HEAP32[($6_1 + 76 | 0) >> 2] | 0)) {
         break label$6
        }
        if (!($120($4_1 | 0, $6_1 | 0) | 0)) {
         break label$1
        }
       }
       $7_1 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
       if ($7_1) {
        continue label$5
       }
       break label$5;
      };
      $6_1 = $6_1 + 80 | 0;
     }
     HEAP32[$6_1 >> 2] = $4_1;
     HEAP32[($4_1 + 80 | 0) >> 2] = 0;
     $4_1 = $5_1;
     if ($4_1) {
      continue label$3
     }
     break label$3;
    };
    HEAP32[$2_1 >> 2] = 0;
   }
   global$0 = $3_1 + 16 | 0;
   return;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
  HEAP32[$3_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11792 | 0, $3_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $5$hi = 0, $6$hi = 0, $1_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $1_1 = global$0 - 16 | 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = $1_1 + 12 | 0;
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     $5_1 = 0;
     $5$hi = i64toi32_i32$0;
     $4_1 = $3_1;
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$0 = HEAP32[($2_1 + 64 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
        $6_1 = i64toi32_i32$0;
        $6$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $5$hi;
        i64toi32_i32$1 = $6$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $5$hi;
        i64toi32_i32$3 = $5_1;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
         $13_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
           $14_1 = 0
          } else {
           $14_1 = 1
          }
          $15_1 = $14_1;
         } else {
          $15_1 = 0
         }
         $13_1 = $15_1;
        }
        if ($13_1) {
         break label$6
        }
        $3_1 = $4_1;
        i64toi32_i32$2 = $6$hi;
        $5_1 = $6_1;
        $5$hi = i64toi32_i32$2;
        break label$5;
       }
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$2 = $5$hi;
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$1 = $5$hi;
       i64toi32_i32$0 = $5_1;
       if (($6_1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$5
       }
       $3_1 = (HEAPU8[(HEAP32[$3_1 >> 2] | 0) >> 0] | 0 | 0) == (95 | 0) ? $4_1 : $3_1;
      }
      $4_1 = $2_1 + 80 | 0;
      $2_1 = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
    HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = $2_1;
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if (!(HEAP32[($0_1 + 76 | 0) >> 2] | 0)) {
      break label$3
     }
     if ($120($0_1 | 0, $1_1 | 0) | 0) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $12_1 = 0, $18_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4096 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ($200(HEAP32[($0_1 + 4104 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0) {
      break label$3
     }
     $12_1 = $2_1;
     i64toi32_i32$2 = $1_1 + ((HEAP32[($2_1 + 72 | 0) >> 2] | 0) << 5 | 0) | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[($2_1 + 64 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$3 = $20_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $3_1 = $189($12_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 0 | 0) | 0;
     HEAP32[($3_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 4104 | 0) >> 2] | 0;
     HEAP32[($0_1 + 4104 | 0) >> 2] = $3_1;
    }
    $2_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $202($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $7$hi = 0, $18$hi = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $3_1 = 0;
    $4_1 = 0;
    break label$1;
   }
   $4_1 = 0;
   label$3 : {
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $12_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $13_1 = 0
      } else {
       $13_1 = 1
      }
      $14_1 = $13_1;
     } else {
      $14_1 = 0
     }
     $12_1 = $14_1;
    }
    if ($12_1) {
     break label$3
    }
    $3_1 = 0;
    break label$1;
   }
   label$4 : while (1) {
    $4_1 = $4_1 + 1 | 0;
    $3_1 = $0_1;
    $0_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $15_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
       $16_1 = 0
      } else {
       $16_1 = 1
      }
      $17_1 = $16_1;
     } else {
      $17_1 = 0
     }
     $15_1 = $17_1;
    }
    if ($15_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   HEAP32[$2_1 >> 2] = $4_1;
  }
  return $3_1 | 0;
 }
 
 function $203($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $5$hi = 0, $5_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    $0_1 = $202($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     $92($2_1 | 0, $0_1 | 0) | 0;
     break label$1;
    }
    label$4 : {
     if (!$3_1) {
      break label$4
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = $1$hi - i64toi32_i32$5 | 0;
     $29_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $4_1;
     HEAP32[($4_1 + 40 | 0) >> 2] = $29_1;
     HEAP32[($4_1 + 44 | 0) >> 2] = i64toi32_i32$5;
     $99($2_1 | 0, 11824 | 0, $4_1 + 32 | 0 | 0) | 0;
     break label$1;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = $1$hi;
    HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = $1$hi;
    $99($2_1 | 0, 11836 | 0, $4_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$5 = $1$hi;
   HEAP32[$4_1 >> 2] = $1_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = $1$hi;
   $99($2_1 | 0, 11836 | 0, $4_1 | 0) | 0;
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $4_1 = 0, $6_1 = 0, $24_1 = 0, $37_1 = 0, $37$hi = 0, $43_1 = 0, $43$hi = 0, $45_1 = 0, $45$hi = 0, $46$hi = 0, $7_1 = 0, $7$hi = 0;
  $3_1 = global$0 - 480 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4100 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    label$3 : while (1) {
     $5_1 = $4_1;
     $4_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
     $6_1 = $200($0_1 | 0, $5_1 | 0) | 0;
     if (!$6_1) {
      break label$1
     }
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
     $115($3_1 + 192 | 0 | 0, $2_1 | 0, 1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
     $4($3_1 + 336 | 0 | 0, $3_1 + 192 | 0 | 0, 144 | 0) | 0;
     label$4 : {
      label$5 : {
       switch (HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0 | 0) {
       case 2:
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
        $37_1 = i64toi32_i32$1;
        $37$hi = i64toi32_i32$0;
        i64toi32_i32$2 = $2_1 + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 5 | 0) | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $43_1 = i64toi32_i32$0;
        $43$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
        $45_1 = i64toi32_i32$1;
        $45$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $43$hi;
        i64toi32_i32$2 = $43_1;
        i64toi32_i32$1 = $45$hi;
        i64toi32_i32$3 = $45_1;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $46$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $37$hi;
        i64toi32_i32$0 = $37_1;
        i64toi32_i32$2 = $46$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        $7_1 = i64toi32_i32$1;
        $7$hi = i64toi32_i32$4;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -4;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $8_1 = i64toi32_i32$2;
        $8$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$4 = $7_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 32764;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$3 = 65536;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $3_1;
        HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $8_1;
        HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] = $5_1;
        HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = $1_1;
        $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11643 | 0, i64toi32_i32$2 + 32 | 0 | 0) | 0;
        fimport$9(1 | 0);
        abort();
       case 1:
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$4 = 16;
        i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $24_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
         $24_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
        }
        $8_1 = $24_1;
        $8$hi = i64toi32_i32$1;
        break label$4;
       default:
        HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
        HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
        $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11720 | 0, $3_1 + 16 | 0 | 0) | 0;
        fimport$9(1 | 0);
        abort();
       case 0:
        break label$5;
       };
      }
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $8$hi;
     HEAP16[($3_1 + 348 | 0) >> 1] = $8_1;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
     $8_1 = i64toi32_i32$3;
     $8$hi = i64toi32_i32$1;
     $4($3_1 + 48 | 0 | 0, $3_1 + 336 | 0 | 0, 144 | 0) | 0;
     $117($2_1 | 0, 1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, $3_1 + 48 | 0 | 0);
     $6(i64toi32_i32$2 | 0);
     if ($4_1) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[($1_1 + 4100 | 0) >> 2] = 0;
   global$0 = $3_1 + 480 | 0;
   return;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  HEAP32[$3_1 >> 2] = $1_1;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 11841 | 0, $3_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $205($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    $6($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 1032 | 0) >> 2] | 0;
   if ((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $31($2_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if (($36($0_1 | 0, $2_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$3
    }
    $0_1 = -1;
    break label$2;
   }
   label$4 : {
    if ((HEAPU8[($2_1 + 75 | 0) >> 0] | 0 | 0) == (10 | 0)) {
     break label$4
    }
    $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if ($0_1 >>> 0 >= (HEAP32[($2_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$4
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 10;
    $0_1 = 0;
    break label$2;
   }
   $0_1 = ($76($2_1 | 0, 10 | 0) | 0) >> 31 | 0;
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   $32($2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $5(Math_imul($1_1, 4328) | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $3($0_1 | 0, 0 | 0, 4328 | 0) | 0;
  $92($0_1 | 0, $1_1 | 0) | 0;
  $108($0_1 + 4112 | 0 | 0);
 }
 
 function $209($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $10_1 = 0, $10$hi = 0, i64toi32_i32$3 = 0, $3_1 = 0, $11$hi = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $56_1 = 0, $59$hi = 0, $61$hi = 0, $133_1 = 0, $144_1 = 0;
  $1_1 = global$0 - 128 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $3_1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($2_1 | 0) {
      case 0:
       $4_1 = $0_1 + ($2_1 << 5 | 0) | 0;
       i64toi32_i32$1 = $4_1 + 24 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 4096;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $4_1 + 16 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 4096;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$5;
       break label$2;
      case 1:
      case 2:
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$5 = $104($10_1 | 0, i64toi32_i32$5 | 0, 4096 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $10_1 = i64toi32_i32$5;
       $10$hi = i64toi32_i32$2;
       $4_1 = 0;
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) <= (0 | 0)) {
        break label$3
       }
       label$7 : while (1) {
        i64toi32_i32$2 = $10$hi;
        $5_1 = ((HEAP32[$0_1 >> 2] | 0) + Math_imul($4_1, 4328) | 0) + ($2_1 << 5 | 0) | 0;
        i64toi32_i32$2 = $104($10_1 | 0, i64toi32_i32$2 | 0, HEAP32[($5_1 + 4128 | 0) >> 2] | 0 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$5;
        $6_1 = $5_1 + 4112 | 0;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[$6_1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$5 = $6_1;
        HEAP32[i64toi32_i32$5 >> 2] = $10_1;
        HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
        $5_1 = $5_1 + 4120 | 0;
        $56_1 = $5_1;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$2 = HEAP32[$5_1 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        $59$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $59$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        $61$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$5 = $10_1;
        i64toi32_i32$0 = $61$hi;
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$1;
        i64toi32_i32$5 = $56_1;
        HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
        $4_1 = $4_1 + 1 | 0;
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($4_1 | 0) < ($5_1 | 0)) {
         continue label$7
        }
        break label$3;
       };
      case 3:
       break label$4;
      default:
       break label$2;
      };
     }
     i64toi32_i32$1 = 0;
     $10_1 = 65536;
     $10$hi = i64toi32_i32$1;
     $4_1 = $0_1 + ($2_1 << 5 | 0) | 0;
     $5_1 = $4_1 + 24 | 0;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$5 >> 2] = 65536;
     HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
     $6_1 = $4_1 + 16 | 0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$5 >> 2] = 65528;
     HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
     $4_1 = $4_1 + 40 | 0;
     HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     $99($1_1 + 64 | 0 | 0, 11877 | 0, $1_1 + 48 | 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $6_1 = $189($1_1 + 64 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 1 | 0) | 0;
     HEAP32[($6_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     $99($1_1 + 64 | 0 | 0, 11881 | 0, $1_1 + 32 | 0 | 0) | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = HEAP32[$5_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     $4_1 = $189($1_1 + 64 | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 1 | 0) | 0;
     HEAP32[($4_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
     break label$2;
    }
    $4_1 = $2_1 << 5 | 0;
    $6_1 = $0_1 + $4_1 | 0;
    $7_1 = $6_1 + 16 | 0;
    $8_1 = HEAP32[$0_1 >> 2] | 0;
    i64toi32_i32$4 = ($8_1 + $4_1 | 0) + 4112 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
    $9_1 = $6_1 + 24 | 0;
    i64toi32_i32$4 = (($8_1 + Math_imul($5_1, 4328) | 0) + $4_1 | 0) + -208 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $144_1 = i64toi32_i32$5;
    i64toi32_i32$5 = $9_1;
    HEAP32[i64toi32_i32$5 >> 2] = $144_1;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4_1 = $6_1 + 40 | 0;
    HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    $99($1_1 + 64 | 0 | 0, 11877 | 0, $1_1 + 16 | 0 | 0) | 0;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $5_1 = $189($1_1 + 64 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 1 | 0) | 0;
    HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
    $99($1_1 + 64 | 0 | 0, 11881 | 0, $1_1 | 0) | 0;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = $189($1_1 + 64 | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 1 | 0) | 0;
    HEAP32[($4_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (4 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$8 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$8
   }
   $2_1 = $0_1 + 16 | 0;
   $5_1 = 0;
   label$9 : while (1) {
    $4_1 = (HEAP32[$0_1 >> 2] | 0) + Math_imul($5_1, 4328) | 0;
    $6_1 = $4_1 + 4112 | 0;
    $195($2_1 | 0, $4_1 | 0, $6_1 | 0);
    $197($4_1 | 0, $6_1 | 0);
    $201($4_1 | 0, $6_1 | 0);
    $198($4_1 | 0, $3_1 | 0, $4_1 + 4104 | 0 | 0);
    $205($4_1 + 4096 | 0 | 0);
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  $199($3_1 | 0);
  label$10 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$10
   }
   $4_1 = 0;
   label$11 : while (1) {
    $5_1 = (HEAP32[$0_1 >> 2] | 0) + Math_imul($4_1, 4328) | 0;
    $204(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0, $5_1 + 4112 | 0 | 0);
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  $210($0_1 | 0);
  global$0 = $1_1 + 128 | 0;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $1_1 = 0, $9_1 = 0, $10_1 = 0, $12$hi = 0, i64toi32_i32$6 = 0, $12_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $42_1 = 0, $42$hi = 0, $54_1 = 0, $57_1 = 0, $57$hi = 0, $74_1 = 0, $74$hi = 0;
  $1_1 = 0;
  $2_1 = $0_1 + 16 | 0;
  label$1 : while (1) {
   label$2 : {
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    $3_1 = $1_1 << 5 | 0;
    $4_1 = $2_1 + $3_1 | 0;
    $5_1 = $1_1 << 2 | 0;
    $6_1 = $2_1 + $5_1 | 0;
    $7_1 = $6_1 + 176 | 0;
    $8_1 = $6_1 + 160 | 0;
    $6_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $9_1 = (HEAP32[$0_1 >> 2] | 0) + Math_imul($6_1, 4328) | 0;
      $10_1 = $9_1 + $3_1 | 0;
      i64toi32_i32$2 = $10_1 + 4120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $42_1 = i64toi32_i32$0;
      $42$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $10_1 + 4112 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $42$hi;
      i64toi32_i32$2 = $42_1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      $10_1 = i64toi32_i32$4;
      if (!i64toi32_i32$4) {
       break label$4
      }
      label$5 : {
       switch ($1_1 + -1 | 0 | 0) {
       case 0:
        $54_1 = HEAP32[($0_1 + 224 | 0) >> 2] | 0;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $57_1 = i64toi32_i32$5;
        $57$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$5 = $57$hi;
        i64toi32_i32$3 = $57_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_sdiv(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 4 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $4($54_1 + Math_imul(i64toi32_i32$0, 144) | 0 | 0, HEAP32[($9_1 + 4320 | 0) >> 2] | 0 | 0, Math_imul($10_1 >>> 2 | 0, 144) | 0) | 0;
        break label$4;
       case 1:
       case 2:
        break label$5;
       default:
        break label$4;
       };
      }
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $74_1 = i64toi32_i32$4;
      $74$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$2 = $12_1;
      i64toi32_i32$4 = $74$hi;
      i64toi32_i32$3 = $74_1;
      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      $9_1 = $9_1 + $5_1 | 0;
      $4((HEAP32[$8_1 >> 2] | 0) + i64toi32_i32$5 | 0 | 0, HEAP32[($9_1 + 4272 | 0) >> 2] | 0 | 0, $10_1 | 0) | 0;
      $4((HEAP32[$7_1 >> 2] | 0) + (i64toi32_i32$5 << 2 | 0) | 0 | 0, HEAP32[($9_1 + 4288 | 0) >> 2] | 0 | 0, $10_1 << 2 | 0 | 0) | 0;
     }
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (4 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $8$hi = 0, $15_1 = 0, $15$hi = 0, $27_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $200(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 11886 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    i64toi32_i32$0 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
    $8_1 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $8$hi;
    $182(28 | 0, i64toi32_i32$1 | 0, $8_1 | 0, i64toi32_i32$0 | 0, 5 | 0, 0 | 0);
    $1_1 = $200(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 11937 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    i64toi32_i32$0 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$0;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $15$hi;
    $182(29 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 5 | 0, 0 | 0);
    label$3 : {
     label$4 : {
      $1_1 = $200(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 11992 | 0) | 0;
      if (!$1_1) {
       break label$4
      }
      $206(11999 | 0) | 0;
      $0_1 = $1_1 + 64 | 0;
      break label$3;
     }
     $0_1 = $0_1 + 48 | 0;
    }
    i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $27_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$0 + 77808 | 0) >> 2] = $27_1;
    HEAP32[(i64toi32_i32$0 + 77812 | 0) >> 2] = i64toi32_i32$1;
    return;
   }
   $35(11892 | 0, 44 | 0, 1 | 0, HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  $35(11945 | 0, 46 | 0, 1 | 0, HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $212($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = $31($2_1 | 0) | 0;
  }
  $4_1 = $1_1 + -1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 | 0) < (2 | 0)) {
     break label$3
    }
    $1_1 = $0_1;
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       if (!$4_1) {
        break label$5
       }
       label$7 : {
        label$8 : {
         $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $6_1 = $43($5_1 | 0, 10 | 0, (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $5_1 | 0 | 0) | 0;
         if (!$6_1) {
          break label$8
         }
         $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $5_1 = ($6_1 - $7_1 | 0) + 1 | 0;
         break label$7;
        }
        $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        $5_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
       }
       $5_1 = $5_1 >>> 0 < $4_1 >>> 0 ? $5_1 : $4_1;
       $4($1_1 | 0, $7_1 | 0, $5_1 | 0) | 0;
       $7_1 = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + $5_1 | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
       $1_1 = $1_1 + $5_1 | 0;
       if ($6_1) {
        break label$5
       }
       $4_1 = $4_1 - $5_1 | 0;
       if (!$4_1) {
        break label$5
       }
       label$9 : {
        label$10 : {
         if ($7_1 >>> 0 >= (HEAP32[($2_1 + 8 | 0) >> 2] | 0) >>> 0) {
          break label$10
         }
         HEAP32[($2_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
         $5_1 = HEAPU8[$7_1 >> 0] | 0;
         break label$9;
        }
        $5_1 = $124($2_1 | 0) | 0;
        if (($5_1 | 0) > (-1 | 0)) {
         break label$9
        }
        $5_1 = 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$4
        }
        if (!((HEAPU8[$2_1 >> 0] | 0) & 16 | 0)) {
         break label$4
        }
        break label$5;
       }
       HEAP8[$1_1 >> 0] = $5_1;
       $1_1 = $1_1 + 1 | 0;
       $4_1 = $4_1 + -1 | 0;
       if (($5_1 & 255 | 0 | 0) != (10 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     label$11 : {
      if ($0_1) {
       break label$11
      }
      $5_1 = 0;
      break label$4;
     }
     HEAP8[$1_1 >> 0] = 0;
     $5_1 = $0_1;
    }
    if (!$3_1) {
     break label$2
    }
    $32($2_1 | 0);
    break label$2;
   }
   $1_1 = HEAPU8[($2_1 + 74 | 0) >> 0] | 0;
   HEAP8[($2_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
   label$12 : {
    if (!$3_1) {
     break label$12
    }
    $32($2_1 | 0);
   }
   $5_1 = 0;
   if ($4_1) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 0;
   return $0_1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $213($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $2_1 = 0, $12_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_i64_sdiv($1_1 | 0, i64toi32_i32$0 | 0, 4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$1;
   if ((i64toi32_i32$1 | 0) > (-1 | 0)) {
    break label$1
   }
   $9_1 = 0;
   $10_1 = $0_1 + 8 | 0;
   $11_1 = HEAPU8[($9_1 + 12253 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 12254 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$10_1 >> 0] = $11_1;
   HEAP8[($10_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
   $7_1 = 0;
   i64toi32_i32$0 = HEAPU8[($7_1 + 12245 | 0) >> 0] | 0 | ((HEAPU8[($7_1 + 12246 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 12247 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 12248 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[($7_1 + 12249 | 0) >> 0] | 0 | ((HEAPU8[($7_1 + 12250 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 12251 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 12252 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $12_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   $8_1 = $12_1;
   HEAP8[i64toi32_i32$0 >> 0] = $8_1;
   HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $8_1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $8_1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $8_1 >>> 24 | 0;
   HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   return;
  }
  $92($0_1 | 0, HEAP32[(((($2_1 | 0) % (15 | 0) | 0) << 2 | 0) + 12048 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $214($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $4_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $10$hi = 0, $15$hi = 0, $622 = 0, $625 = 0, $625$hi = 0, $642 = 0, $645 = 0, $645$hi = 0, $662 = 0, $665 = 0, $665$hi = 0, $685 = 0, $688 = 0, $688$hi = 0, $708 = 0, $711 = 0, $711$hi = 0, $725 = 0, $728 = 0, $728$hi = 0, $770 = 0, $773 = 0, $773$hi = 0, $787 = 0, $790 = 0, $790$hi = 0;
  $3_1 = global$0 - 1696 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $42_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $43_1 = 0
       } else {
        $43_1 = 1
       }
       $44_1 = $43_1;
      } else {
       $44_1 = 0
      }
      $42_1 = $44_1;
     }
     if ($42_1) {
      break label$3
     }
     i64toi32_i32$3 = $4_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $45_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $46_1 = 0
       } else {
        $46_1 = 1
       }
       $47_1 = $46_1;
      } else {
       $47_1 = 0
      }
      $45_1 = $47_1;
     }
     if ($45_1) {
      break label$2
     }
    }
    $48_1 = 0;
    $49_1 = $0_1 + 4 | 0;
    $50_1 = HEAPU8[($48_1 + 12259 | 0) >> 0] | 0 | ((HEAPU8[($48_1 + 12260 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$49_1 >> 0] = $50_1;
    HEAP8[($49_1 + 1 | 0) >> 0] = $50_1 >>> 8 | 0;
    $38_1 = 0;
    $39_1 = HEAPU8[($38_1 + 12255 | 0) >> 0] | 0 | ((HEAPU8[($38_1 + 12256 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($38_1 + 12257 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($38_1 + 12258 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP8[$0_1 >> 0] = $39_1;
    HEAP8[($0_1 + 1 | 0) >> 0] = $39_1 >>> 8 | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = $39_1 >>> 16 | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $39_1 >>> 24 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   $116($3_1 + 1552 | 0 | 0, $4_1 | 0, $1_1 | 0, i64toi32_i32$3 | 0, 12261 | 0, 204 | 0);
   label$4 : {
    switch (HEAPU8[($3_1 + 1552 | 0) >> 0] | 0 | 0) {
    case 0:
     $40_1 = 7368558;
     HEAP8[$0_1 >> 0] = $40_1;
     HEAP8[($0_1 + 1 | 0) >> 0] = $40_1 >>> 8 | 0;
     HEAP8[($0_1 + 2 | 0) >> 0] = $40_1 >>> 16 | 0;
     HEAP8[($0_1 + 3 | 0) >> 0] = $40_1 >>> 24 | 0;
     break label$1;
    case 1:
     HEAP32[($3_1 + 32 | 0) >> 2] = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     $99($0_1 | 0, 12324 | 0, $3_1 + 32 | 0 | 0) | 0;
     break label$1;
    case 120:
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$3 = 7105633;
     $41_1 = 1668512115;
     HEAP8[$0_1 >> 0] = $41_1;
     HEAP8[($0_1 + 1 | 0) >> 0] = $41_1 >>> 8 | 0;
     HEAP8[($0_1 + 2 | 0) >> 0] = $41_1 >>> 16 | 0;
     HEAP8[($0_1 + 3 | 0) >> 0] = $41_1 >>> 24 | 0;
     HEAP8[($0_1 + 4 | 0) >> 0] = i64toi32_i32$3;
     HEAP8[($0_1 + 5 | 0) >> 0] = i64toi32_i32$3 >>> 8 | 0;
     HEAP8[($0_1 + 6 | 0) >> 0] = i64toi32_i32$3 >>> 16 | 0;
     HEAP8[($0_1 + 7 | 0) >> 0] = i64toi32_i32$3 >>> 24 | 0;
     break label$1;
    case 10:
     HEAP32[($3_1 + 48 | 0) >> 2] = 12347;
     HEAP32[($3_1 + 52 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 48 | 0 | 0) | 0;
     break label$1;
    case 11:
     HEAP32[($3_1 + 64 | 0) >> 2] = 12350;
     HEAP32[($3_1 + 68 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 76 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 72 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 64 | 0 | 0) | 0;
     break label$1;
    case 16:
     HEAP32[($3_1 + 80 | 0) >> 2] = 12354;
     HEAP32[($3_1 + 84 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 92 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 88 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 80 | 0 | 0) | 0;
     break label$1;
    case 12:
     HEAP32[($3_1 + 96 | 0) >> 2] = 12357;
     HEAP32[($3_1 + 100 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 108 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 104 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 96 | 0 | 0) | 0;
     break label$1;
    case 13:
     HEAP32[($3_1 + 112 | 0) >> 2] = 12360;
     HEAP32[($3_1 + 116 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 124 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 120 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 112 | 0 | 0) | 0;
     break label$1;
    case 17:
     HEAP32[($3_1 + 128 | 0) >> 2] = 12364;
     HEAP32[($3_1 + 132 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 140 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 136 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 128 | 0 | 0) | 0;
     break label$1;
    case 14:
     HEAP32[($3_1 + 144 | 0) >> 2] = 12367;
     HEAP32[($3_1 + 148 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 156 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 152 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 144 | 0 | 0) | 0;
     break label$1;
    case 15:
     HEAP32[($3_1 + 160 | 0) >> 2] = 12370;
     HEAP32[($3_1 + 164 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 172 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 168 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 160 | 0 | 0) | 0;
     break label$1;
    case 18:
     HEAP32[($3_1 + 176 | 0) >> 2] = 12374;
     HEAP32[($3_1 + 180 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 188 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 184 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 176 | 0 | 0) | 0;
     break label$1;
    case 64:
     HEAP32[($3_1 + 192 | 0) >> 2] = 12377;
     HEAP32[($3_1 + 196 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 204 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 200 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 192 | 0 | 0) | 0;
     break label$1;
    case 65:
     HEAP32[($3_1 + 208 | 0) >> 2] = 12380;
     HEAP32[($3_1 + 212 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 220 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 216 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12332 | 0, $3_1 + 208 | 0 | 0) | 0;
     break label$1;
    case 70:
     HEAP32[($3_1 + 224 | 0) >> 2] = 12398;
     HEAP32[($3_1 + 228 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 232 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 236 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 224 | 0 | 0) | 0;
     break label$1;
    case 74:
     HEAP32[($3_1 + 240 | 0) >> 2] = 12403;
     HEAP32[($3_1 + 244 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 248 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 252 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 240 | 0 | 0) | 0;
     break label$1;
    case 78:
     HEAP32[($3_1 + 256 | 0) >> 2] = 12408;
     HEAP32[($3_1 + 260 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 264 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 268 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 256 | 0 | 0) | 0;
     break label$1;
    case 80:
     HEAP32[($3_1 + 272 | 0) >> 2] = 12413;
     HEAP32[($3_1 + 276 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 280 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 284 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 272 | 0 | 0) | 0;
     break label$1;
    case 83:
     HEAP32[($3_1 + 288 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 292 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12418 | 0, $3_1 + 288 | 0 | 0) | 0;
     break label$1;
    case 20:
     HEAP32[($3_1 + 304 | 0) >> 2] = 12430;
     HEAP32[($3_1 + 308 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 312 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 316 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 304 | 0 | 0) | 0;
     break label$1;
    case 22:
     HEAP32[($3_1 + 320 | 0) >> 2] = 12434;
     HEAP32[($3_1 + 324 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 328 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 332 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 320 | 0 | 0) | 0;
     break label$1;
    case 24:
     HEAP32[($3_1 + 336 | 0) >> 2] = 12437;
     HEAP32[($3_1 + 340 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 344 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 348 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 336 | 0 | 0) | 0;
     break label$1;
    case 86:
     HEAP32[($3_1 + 352 | 0) >> 2] = 12441;
     HEAP32[($3_1 + 356 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 360 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 364 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 352 | 0 | 0) | 0;
     break label$1;
    case 88:
     HEAP32[($3_1 + 368 | 0) >> 2] = 12447;
     HEAP32[($3_1 + 372 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 376 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 380 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 368 | 0 | 0) | 0;
     break label$1;
    case 84:
     HEAP32[($3_1 + 384 | 0) >> 2] = 12453;
     HEAP32[($3_1 + 388 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 392 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 396 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 384 | 0 | 0) | 0;
     break label$1;
    case 40:
     HEAP32[($3_1 + 400 | 0) >> 2] = 12459;
     HEAP32[($3_1 + 404 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 408 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 412 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 400 | 0 | 0) | 0;
     break label$1;
    case 60:
     HEAP32[($3_1 + 416 | 0) >> 2] = 12463;
     HEAP32[($3_1 + 420 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 424 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 428 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 416 | 0 | 0) | 0;
     break label$1;
    case 48:
     HEAP32[($3_1 + 432 | 0) >> 2] = 12467;
     HEAP32[($3_1 + 436 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 440 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 444 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 432 | 0 | 0) | 0;
     break label$1;
    case 44:
     HEAP32[($3_1 + 448 | 0) >> 2] = 12471;
     HEAP32[($3_1 + 452 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 456 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 460 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 448 | 0 | 0) | 0;
     break label$1;
    case 56:
     HEAP32[($3_1 + 464 | 0) >> 2] = 12475;
     HEAP32[($3_1 + 468 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 472 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 476 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 464 | 0 | 0) | 0;
     break label$1;
    case 52:
     HEAP32[($3_1 + 480 | 0) >> 2] = 12479;
     HEAP32[($3_1 + 484 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 488 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 492 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 480 | 0 | 0) | 0;
     break label$1;
    case 71:
     HEAP32[($3_1 + 496 | 0) >> 2] = 12398;
     HEAP32[($3_1 + 500 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 504 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 508 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 496 | 0 | 0) | 0;
     break label$1;
    case 75:
     HEAP32[($3_1 + 512 | 0) >> 2] = 12403;
     HEAP32[($3_1 + 516 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 520 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 524 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 512 | 0 | 0) | 0;
     break label$1;
    case 21:
     HEAP32[($3_1 + 528 | 0) >> 2] = 12430;
     HEAP32[($3_1 + 532 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 536 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 540 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 528 | 0 | 0) | 0;
     break label$1;
    case 23:
     HEAP32[($3_1 + 544 | 0) >> 2] = 12434;
     HEAP32[($3_1 + 548 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 552 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 556 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 544 | 0 | 0) | 0;
     break label$1;
    case 25:
     HEAP32[($3_1 + 560 | 0) >> 2] = 12437;
     HEAP32[($3_1 + 564 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 568 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 572 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 560 | 0 | 0) | 0;
     break label$1;
    case 87:
     HEAP32[($3_1 + 576 | 0) >> 2] = 12497;
     HEAP32[($3_1 + 580 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 584 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 588 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 576 | 0 | 0) | 0;
     break label$1;
    case 89:
     HEAP32[($3_1 + 592 | 0) >> 2] = 12502;
     HEAP32[($3_1 + 596 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 600 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 604 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 592 | 0 | 0) | 0;
     break label$1;
    case 85:
     HEAP32[($3_1 + 608 | 0) >> 2] = 12507;
     HEAP32[($3_1 + 612 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 616 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 620 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 608 | 0 | 0) | 0;
     break label$1;
    case 41:
     HEAP32[($3_1 + 624 | 0) >> 2] = 12459;
     HEAP32[($3_1 + 628 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 632 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 636 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 624 | 0 | 0) | 0;
     break label$1;
    case 61:
     HEAP32[($3_1 + 640 | 0) >> 2] = 12463;
     HEAP32[($3_1 + 644 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 648 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 652 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 640 | 0 | 0) | 0;
     break label$1;
    case 49:
     HEAP32[($3_1 + 656 | 0) >> 2] = 12467;
     HEAP32[($3_1 + 660 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 664 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 668 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 656 | 0 | 0) | 0;
     break label$1;
    case 45:
     HEAP32[($3_1 + 672 | 0) >> 2] = 12471;
     HEAP32[($3_1 + 676 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 680 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 684 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 672 | 0 | 0) | 0;
     break label$1;
    case 57:
     HEAP32[($3_1 + 688 | 0) >> 2] = 12475;
     HEAP32[($3_1 + 692 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 696 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 700 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 688 | 0 | 0) | 0;
     break label$1;
    case 53:
     HEAP32[($3_1 + 704 | 0) >> 2] = 12479;
     HEAP32[($3_1 + 708 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 712 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 716 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 704 | 0 | 0) | 0;
     break label$1;
    case 101:
     $622 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
     $625 = i64toi32_i32$3;
     $625$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $625$hi;
     i64toi32_i32$2 = $625;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $203($622 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 720 | 0) >> 2] = 12522;
     HEAP32[($3_1 + 724 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 728 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12512 | 0, $3_1 + 720 | 0 | 0) | 0;
     break label$1;
    case 100:
     $642 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$4 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $645 = i64toi32_i32$4;
     $645$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = $645$hi;
     i64toi32_i32$2 = $645;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $203($642 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 736 | 0) >> 2] = 12527;
     HEAP32[($3_1 + 740 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 744 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12512 | 0, $3_1 + 736 | 0 | 0) | 0;
     break label$1;
    case 103:
     $662 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$0 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $665 = i64toi32_i32$0;
     $665$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$0 = $665$hi;
     i64toi32_i32$2 = $665;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $203($662 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 752 | 0) >> 2] = 12532;
     HEAP32[($3_1 + 756 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 760 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 764 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 752 | 0 | 0) | 0;
     break label$1;
    case 102:
     $685 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$5 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $688 = i64toi32_i32$5;
     $688$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $688$hi;
     i64toi32_i32$2 = $688;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $203($685 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 768 | 0) >> 2] = 12536;
     HEAP32[($3_1 + 772 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 776 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 780 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12483 | 0, $3_1 + 768 | 0 | 0) | 0;
     break label$1;
    case 104:
     $708 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
     $711 = i64toi32_i32$3;
     $711$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $711$hi;
     i64toi32_i32$2 = $711;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $203($708 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 784 | 0) >> 2] = 12546;
     HEAP32[($3_1 + 788 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12540 | 0, $3_1 + 784 | 0 | 0) | 0;
     break label$1;
    case 105:
     $725 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$4 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $728 = i64toi32_i32$4;
     $728$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = $728$hi;
     i64toi32_i32$2 = $728;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $203($725 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 800 | 0) >> 2] = 12551;
     HEAP32[($3_1 + 804 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12540 | 0, $3_1 + 800 | 0 | 0) | 0;
     break label$1;
    case 107:
     HEAP32[($3_1 + 816 | 0) >> 2] = 12556;
     HEAP32[($3_1 + 820 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 824 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 828 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 816 | 0 | 0) | 0;
     break label$1;
    case 106:
     HEAP32[($3_1 + 832 | 0) >> 2] = 12561;
     HEAP32[($3_1 + 836 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 840 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 844 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12383 | 0, $3_1 + 832 | 0 | 0) | 0;
     break label$1;
    case 108:
     $770 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$0 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $773 = i64toi32_i32$0;
     $773$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$0 = $773$hi;
     i64toi32_i32$2 = $773;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $203($770 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 848 | 0) >> 2] = 12566;
     HEAP32[($3_1 + 852 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12540 | 0, $3_1 + 848 | 0 | 0) | 0;
     break label$1;
    case 110:
     $787 = HEAP32[(77992 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$5 = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $790 = i64toi32_i32$5;
     $790$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $790$hi;
     i64toi32_i32$2 = $790;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 4;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $203($787 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, $3_1 + 1424 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 864 | 0) >> 2] = 12568;
     HEAP32[($3_1 + 868 | 0) >> 2] = $3_1 + 1424 | 0;
     $99($0_1 | 0, 12540 | 0, $3_1 + 864 | 0 | 0) | 0;
     break label$1;
    case 109:
     HEAP32[($3_1 + 880 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     $99($0_1 | 0, 12572 | 0, $3_1 + 880 | 0 | 0) | 0;
     break label$1;
    case 111:
     HEAP32[($3_1 + 896 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     $99($0_1 | 0, 12579 | 0, $3_1 + 896 | 0 | 0) | 0;
     break label$1;
    case 143:
     HEAP32[($3_1 + 912 | 0) >> 2] = 12603;
     HEAP32[($3_1 + 916 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 920 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 924 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 912 | 0 | 0) | 0;
     break label$1;
    case 144:
     HEAP32[($3_1 + 928 | 0) >> 2] = 12609;
     HEAP32[($3_1 + 932 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 936 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 940 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 928 | 0 | 0) | 0;
     break label$1;
    case 145:
     HEAP32[($3_1 + 944 | 0) >> 2] = 12615;
     HEAP32[($3_1 + 948 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 952 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 956 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 944 | 0 | 0) | 0;
     break label$1;
    case 146:
     HEAP32[($3_1 + 960 | 0) >> 2] = 12621;
     HEAP32[($3_1 + 964 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 968 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 972 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 960 | 0 | 0) | 0;
     break label$1;
    case 130:
     HEAP32[($3_1 + 976 | 0) >> 2] = 12627;
     HEAP32[($3_1 + 980 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 984 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 988 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 976 | 0 | 0) | 0;
     break label$1;
    case 131:
     HEAP32[($3_1 + 992 | 0) >> 2] = 12633;
     HEAP32[($3_1 + 996 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1e3 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1004 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 992 | 0 | 0) | 0;
     break label$1;
    case 132:
     HEAP32[($3_1 + 1008 | 0) >> 2] = 12639;
     HEAP32[($3_1 + 1012 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1016 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1020 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 1008 | 0 | 0) | 0;
     break label$1;
    case 133:
     HEAP32[($3_1 + 1024 | 0) >> 2] = 12645;
     HEAP32[($3_1 + 1028 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1032 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1036 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 1024 | 0 | 0) | 0;
     break label$1;
    case 154:
     HEAP32[($3_1 + 1040 | 0) >> 2] = 12651;
     HEAP32[($3_1 + 1044 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1048 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1052 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 1040 | 0 | 0) | 0;
     break label$1;
    case 155:
     HEAP32[($3_1 + 1056 | 0) >> 2] = 12658;
     HEAP32[($3_1 + 1060 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1064 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1068 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 1056 | 0 | 0) | 0;
     break label$1;
    case 156:
     HEAP32[($3_1 + 1072 | 0) >> 2] = 12665;
     HEAP32[($3_1 + 1076 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1080 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1084 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 1072 | 0 | 0) | 0;
     break label$1;
    case 157:
     HEAP32[($3_1 + 1088 | 0) >> 2] = 12672;
     HEAP32[($3_1 + 1092 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1096 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1100 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12588 | 0, $3_1 + 1088 | 0 | 0) | 0;
     break label$1;
    case 141:
     HEAP32[($3_1 + 1104 | 0) >> 2] = 12694;
     HEAP32[($3_1 + 1108 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1116 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1112 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12679 | 0, $3_1 + 1104 | 0 | 0) | 0;
     break label$1;
    case 142:
     HEAP32[($3_1 + 1120 | 0) >> 2] = 12698;
     HEAP32[($3_1 + 1124 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1132 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1128 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12679 | 0, $3_1 + 1120 | 0 | 0) | 0;
     break label$1;
    case 128:
     HEAP32[($3_1 + 1136 | 0) >> 2] = 12702;
     HEAP32[($3_1 + 1140 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1148 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1144 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12679 | 0, $3_1 + 1136 | 0 | 0) | 0;
     break label$1;
    case 129:
     HEAP32[($3_1 + 1152 | 0) >> 2] = 12706;
     HEAP32[($3_1 + 1156 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1164 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1160 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12679 | 0, $3_1 + 1152 | 0 | 0) | 0;
     break label$1;
    case 180:
     HEAP32[($3_1 + 1168 | 0) >> 2] = 12710;
     HEAP32[($3_1 + 1172 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1180 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1176 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12679 | 0, $3_1 + 1168 | 0 | 0) | 0;
     break label$1;
    case 181:
     HEAP32[($3_1 + 1184 | 0) >> 2] = 12715;
     HEAP32[($3_1 + 1188 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1196 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1192 | 0) >> 2] = $3_1 + 1566 | 0;
     $99($0_1 | 0, 12679 | 0, $3_1 + 1184 | 0 | 0) | 0;
     break label$1;
    case 150:
     HEAP32[($3_1 + 1200 | 0) >> 2] = 12736;
     HEAP32[($3_1 + 1204 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1208 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1200 | 0 | 0) | 0;
     break label$1;
    case 151:
     HEAP32[($3_1 + 1216 | 0) >> 2] = 12743;
     HEAP32[($3_1 + 1220 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1224 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1216 | 0 | 0) | 0;
     break label$1;
    case 149:
     HEAP32[($3_1 + 1232 | 0) >> 2] = 12736;
     HEAP32[($3_1 + 1236 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1240 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1232 | 0 | 0) | 0;
     break label$1;
    case 152:
     HEAP32[($3_1 + 1248 | 0) >> 2] = 12750;
     HEAP32[($3_1 + 1252 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1256 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1248 | 0 | 0) | 0;
     break label$1;
    case 148:
     HEAP32[($3_1 + 1264 | 0) >> 2] = 12757;
     HEAP32[($3_1 + 1268 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1272 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1264 | 0 | 0) | 0;
     break label$1;
    case 153:
     HEAP32[($3_1 + 1280 | 0) >> 2] = 12764;
     HEAP32[($3_1 + 1284 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1288 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1280 | 0 | 0) | 0;
     break label$1;
    case 137:
     HEAP32[($3_1 + 1296 | 0) >> 2] = 12771;
     HEAP32[($3_1 + 1300 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1304 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1296 | 0 | 0) | 0;
     break label$1;
    case 138:
     HEAP32[($3_1 + 1312 | 0) >> 2] = 12778;
     HEAP32[($3_1 + 1316 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1320 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1312 | 0 | 0) | 0;
     break label$1;
    case 136:
     HEAP32[($3_1 + 1328 | 0) >> 2] = 12785;
     HEAP32[($3_1 + 1332 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1336 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1328 | 0 | 0) | 0;
     break label$1;
    case 139:
     HEAP32[($3_1 + 1344 | 0) >> 2] = 12793;
     HEAP32[($3_1 + 1348 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1352 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1344 | 0 | 0) | 0;
     break label$1;
    case 135:
     HEAP32[($3_1 + 1360 | 0) >> 2] = 12800;
     HEAP32[($3_1 + 1364 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1368 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1360 | 0 | 0) | 0;
     break label$1;
    case 140:
     HEAP32[($3_1 + 1376 | 0) >> 2] = 12807;
     HEAP32[($3_1 + 1380 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1384 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
     $99($0_1 | 0, 12720 | 0, $3_1 + 1376 | 0 | 0) | 0;
     break label$1;
    case 183:
     HEAP32[($3_1 + 1392 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1396 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     $99($0_1 | 0, 12814 | 0, $3_1 + 1392 | 0 | 0) | 0;
     break label$1;
    case 182:
     HEAP32[($3_1 + 1408 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
     HEAP32[($3_1 + 1412 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
     $99($0_1 | 0, 12828 | 0, $3_1 + 1408 | 0 | 0) | 0;
     break label$1;
    default:
     break label$4;
    };
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = HEAPU8[($3_1 + 1562 | 0) >> 0] | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = HEAPU8[($3_1 + 1560 | 0) >> 0] | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = HEAPU8[($3_1 + 1561 | 0) >> 0] | 0;
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAP16[($3_1 + 1564 | 0) >> 1] | 0;
   $99($0_1 | 0, 12842 | 0, $3_1 + 16 | 0 | 0) | 0;
  }
  label$94 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$94
   }
   $2_1 = $92($3_1 + 1424 | 0 | 0, $0_1 | 0) | 0;
   i64toi32_i32$3 = $1$hi;
   $213($3_1 + 1552 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0);
   HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
   HEAP32[$3_1 >> 2] = $3_1 + 1552 | 0;
   $99($0_1 | 0, 12875 | 0, $3_1 | 0) | 0;
  }
  global$0 = $3_1 + 1696 | 0;
 }
 
 function $215() {
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $0_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $1_1 = 0, $10_1 = 0, $10$hi = 0, $11_1 = 0, $11$hi = 0, $5_1 = 0, i64toi32_i32$6 = 0, $12_1 = 0, $12$hi = 0, $9_1 = 0, $6_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $8_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $0_1 = global$0 - 64 | 0;
  global$0 = $0_1;
  $1_1 = HEAP32[(0 + 1032 | 0) >> 2] | 0;
  $35(12902 | 0, 17 | 0, 1 | 0, $1_1 | 0) | 0;
  $35(12920 | 0, 27 | 0, 1 | 0, $1_1 | 0) | 0;
  $35(12948 | 0, 46 | 0, 1 | 0, $1_1 | 0) | 0;
  $2_1 = ($0_1 + 32 | 0) + 24 | 0;
  $3_1 = ($0_1 + 32 | 0) + 16 | 0;
  $4_1 = $0_1 + 28 | 0;
  $5_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $6_1 = $5_1 << 5 | 0;
    $7_1 = (HEAP32[(0 + 34080 | 0) >> 2] | 0) + $6_1 | 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$5 = $3_1;
    HEAP32[i64toi32_i32$5 >> 2] = $12_1;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$5 = $0_1;
    HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] = $10_1;
    HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] = i64toi32_i32$0;
    $64($1_1 | 0, 12995 | 0, i64toi32_i32$5 + 32 | 0 | 0) | 0;
    $7_1 = 0;
    if ((HEAP32[(77992 + 4 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      $8_1 = (HEAP32[(0 + 77992 | 0) >> 2] | 0) + Math_imul($7_1, 4328) | 0;
      $9_1 = $8_1 + $6_1 | 0;
      i64toi32_i32$3 = $9_1 + 4120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$0;
      $10$hi = i64toi32_i32$5;
      i64toi32_i32$3 = $9_1 + 4112 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
      $12_1 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
       $26_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $27_1 = 0
        } else {
         $27_1 = 1
        }
        $28_1 = $27_1;
       } else {
        $28_1 = 0
       }
       $26_1 = $28_1;
      }
      if ($26_1) {
       break label$4
      }
      HEAP32[$4_1 >> 2] = HEAP32[($9_1 + 4136 | 0) >> 2] | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$4 = $0_1 + 16 | 0;
      HEAP32[i64toi32_i32$4 >> 2] = $12_1;
      HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$4 = $0_1;
      HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $10_1;
      HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      HEAP32[i64toi32_i32$4 >> 2] = $11_1;
      HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
      $64($1_1 | 0, 13022 | 0, i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) < (HEAP32[(77992 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $5_1 = $5_1 + 1 | 0;
   if (($5_1 | 0) != (4 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $88(10 | 0, $1_1 | 0) | 0;
  global$0 = $0_1 + 64 | 0;
 }
 
 function $216() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 112 | 0;
  global$0 = $0_1;
  $1_1 = HEAP32[(0 + 1032 | 0) >> 2] | 0;
  $35(13060 | 0, 25 | 0, 1 | 0, $1_1 | 0) | 0;
  label$1 : {
   label$2 : {
    switch (HEAP32[(0 + 77984 | 0) >> 2] | 0 | 0) {
    case 0:
     $35(13086 | 0, 12 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$1;
    case 1:
     $35(13099 | 0, 32 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$1;
    case 2:
     $35(13132 | 0, 31 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$1;
    case 3:
     break label$2;
    default:
     break label$1;
    };
   }
   $35(13164 | 0, 33 | 0, 1 | 0, $1_1 | 0) | 0;
  }
  label$6 : {
   label$7 : {
    switch (HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) {
    case 2:
     $35(13198 | 0, 26 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$6;
    case 0:
     $35(13225 | 0, 35 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$6;
    case 1:
     break label$7;
    default:
     break label$6;
    };
   }
   $35(13261 | 0, 32 | 0, 1 | 0, $1_1 | 0) | 0;
  }
  label$10 : {
   label$11 : {
    switch (HEAP32[(0 + 77816 | 0) >> 2] | 0 | 0) {
    case 6:
     $35(13294 | 0, 43 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 7:
     $35(13338 | 0, 43 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 8:
     $35(13382 | 0, 43 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 3:
     $35(13426 | 0, 46 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 4:
     $35(13473 | 0, 46 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 5:
     $35(13520 | 0, 46 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 0:
     $35(13567 | 0, 45 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 1:
     $35(13613 | 0, 45 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$10;
    case 2:
     break label$11;
    default:
     break label$10;
    };
   }
   $35(13659 | 0, 45 | 0, 1 | 0, $1_1 | 0) | 0;
  }
  $88(10 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = 32;
  $64($1_1 | 0, 13705 | 0, $0_1 + 96 | 0 | 0) | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 4096;
  $64($1_1 | 0, 13724 | 0, $0_1 + 80 | 0 | 0) | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 16384;
  $64($1_1 | 0, 13756 | 0, $0_1 + 64 | 0 | 0) | 0;
  $35(13780 | 0, 20 | 0, 1 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[(0 + 32096 | 0) >> 2] | 0;
  $64($1_1 | 0, 13801 | 0, $0_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[(0 + 32084 | 0) >> 2] | 0;
  $64($1_1 | 0, 13812 | 0, $0_1 + 32 | 0 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[(0 + 32092 | 0) >> 2] | 0;
  $64($1_1 | 0, 13824 | 0, $0_1 + 16 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = HEAP32[(0 + 32088 | 0) >> 2] | 0;
  $64($1_1 | 0, 13836 | 0, $0_1 | 0) | 0;
  $35(13848 | 0, 2 | 0, 1 | 0, $1_1 | 0) | 0;
  global$0 = $0_1 + 112 | 0;
 }
 
 function $217() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 112 | 0;
  global$0 = $0_1;
  $1_1 = HEAP32[(0 + 1032 | 0) >> 2] | 0;
  $35(13851 | 0, 23 | 0, 1 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = HEAP32[(0 + 78360 | 0) >> 2] | 0;
  $64($1_1 | 0, 13875 | 0, $0_1 + 96 | 0 | 0) | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[(78360 + 4 | 0) >> 2] | 0;
  $64($1_1 | 0, 13888 | 0, $0_1 + 80 | 0 | 0) | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[(78360 + 8 | 0) >> 2] | 0;
  $64($1_1 | 0, 13908 | 0, $0_1 + 64 | 0 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[(78360 + 12 | 0) >> 2] | 0;
  $64($1_1 | 0, 13927 | 0, $0_1 + 48 | 0 | 0) | 0;
  HEAPF64[($0_1 + 32 | 0) >> 3] = +Math_fround(Math_fround(HEAP32[(0 + 78360 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[(78360 + 4 | 0) >> 2] | 0 | 0));
  $65($1_1 | 0, 13949 | 0, $0_1 + 32 | 0 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[(78360 + 16 | 0) >> 2] | 0;
  $64($1_1 | 0, 13961 | 0, $0_1 + 16 | 0 | 0) | 0;
  HEAPF64[$0_1 >> 3] = +Math_fround(Math_fround(HEAP32[(78360 + 16 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[(0 + 78360 | 0) >> 2] | 0 | 0));
  $65($1_1 | 0, 13974 | 0, $0_1 | 0) | 0;
  $35(13848 | 0, 2 | 0, 1 | 0, $1_1 | 0) | 0;
  global$0 = $0_1 + 112 | 0;
 }
 
 function $218() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $16_1 = 0, $57_1 = 0;
  $0_1 = global$0 - 48 | 0;
  global$0 = $0_1;
  $1_1 = 0;
  $2_1 = HEAP32[(0 + 1032 | 0) >> 2] | 0;
  $35(13994 | 0, 19 | 0, 1 | 0, $2_1 | 0) | 0;
  $3_1 = 1;
  label$1 : while (1) {
   HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
   i64toi32_i32$2 = 78400 + ($1_1 << 3 | 0) | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 40 | 0) >> 2] = $16_1;
   HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$1;
   $64($2_1 | 0, 14014 | 0, $0_1 + 32 | 0 | 0) | 0;
   label$2 : {
    if ($3_1 & 3 | 0) {
     break label$2
    }
    $88(10 | 0, $2_1 | 0) | 0;
   }
   $3_1 = $3_1 + 1 | 0;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (32 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $88(10 | 0, $2_1 | 0) | 0;
  $1_1 = 0;
  label$3 : {
   if (!(HEAP32[(0 + 77764 | 0) >> 2] | 0)) {
    break label$3
   }
   $3_1 = 1;
   label$4 : while (1) {
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
    HEAPF64[($0_1 + 24 | 0) >> 3] = +HEAPF64[(78672 + ($1_1 << 4 | 0) | 0) >> 3];
    $65($2_1 | 0, 14033 | 0, $0_1 + 16 | 0 | 0) | 0;
    label$5 : {
     if ($3_1 & 3 | 0) {
      break label$5
     }
     $88(10 | 0, $2_1 | 0) | 0;
    }
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != (32 | 0)) {
     continue label$4
    }
    break label$4;
   };
   i64toi32_i32$2 = 78400;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 256 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 260 | 0) >> 2] | 0;
   $57_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[$0_1 >> 2] = $57_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $64($2_1 | 0, 14052 | 0, $0_1 | 0) | 0;
  }
  $35(13848 | 0, 2 | 0, 1 | 0, $2_1 | 0) | 0;
  global$0 = $0_1 + 48 | 0;
 }
 
 function $219() {
  var $0_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $2_1 = 0, $7_1 = 0, $7$hi = 0, i64toi32_i32$5 = 0, $3_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $6_1 = 0, $8_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $23_1 = 0, $23$hi = 0, $25_1 = 0, $25$hi = 0, $38_1 = 0, $38$hi = 0, $190_1 = 0, $250_1 = 0, $284_1 = 0, $284$hi = 0;
  $0_1 = global$0 - 528 | 0;
  global$0 = $0_1;
  $1_1 = HEAP32[(0 + 1032 | 0) >> 2] | 0;
  $35(14066 | 0, 23 | 0, 1 | 0, $1_1 | 0) | 0;
  $2_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1 >>> 0 < 2 >>> 0) {
     break label$2
    }
    $3_1 = $2_1 << 5 | 0;
    $4_1 = (HEAP32[(0 + 34080 | 0) >> 2] | 0) + $3_1 | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$0;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $25_1 = i64toi32_i32$1;
    $25$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $23$hi;
    i64toi32_i32$2 = $23_1;
    i64toi32_i32$1 = $25$hi;
    i64toi32_i32$3 = $25_1;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
     break label$2
    }
    HEAP32[($0_1 + 240 | 0) >> 2] = $2_1;
    $64($1_1 | 0, 14090 | 0, $0_1 + 240 | 0 | 0) | 0;
    $4_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
    $5_1 = $4_1 + $3_1 | 0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
    $38_1 = i64toi32_i32$2;
    $38$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$2 = $26_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
     $27_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
     $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $27_1;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $38$hi;
    i64toi32_i32$0 = $38_1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
     $28_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0) {
       $29_1 = 0
      } else {
       $29_1 = 1
      }
      $30_1 = $29_1;
     } else {
      $30_1 = 0
     }
     $28_1 = $30_1;
    }
    if ($28_1) {
     break label$2
    }
    $5_1 = 0;
    label$3 : while (1) {
     i64toi32_i32$0 = $7$hi;
     $4_1 = $7_1 - (HEAP32[($4_1 + $3_1 | 0) >> 2] | 0) | 0;
     label$4 : {
      label$5 : {
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 3;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$5
       }
       i64toi32_i32$0 = $7$hi;
       $203(HEAP32[(77992 + 8 | 0) >> 2] | 0 | 0, $7_1 | 0, i64toi32_i32$0 | 0, $0_1 + 400 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
       HEAP32[($0_1 + 208 | 0) >> 2] = $0_1 + 400 | 0;
       $64($1_1 | 0, 14108 | 0, $0_1 + 208 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[($0_1 + 224 | 0) >> 2] = 14114;
      $64($1_1 | 0, 14108 | 0, $0_1 + 224 | 0 | 0) | 0;
     }
     label$6 : {
      if (($4_1 | 0) != ($5_1 | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              $5_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
              $6_1 = HEAP32[((HEAP32[(($5_1 + ($2_1 << 2 | 0) | 0) + 176 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] | 0;
              switch ($6_1 + -1 | 0 | 0) {
              case 5:
               break label$10;
              case 4:
               break label$11;
              case 3:
               break label$12;
              case 2:
               break label$13;
              case 0:
              case 1:
               break label$14;
              case 7:
               break label$9;
              default:
               break label$8;
              };
             }
             i64toi32_i32$3 = $4_1;
             i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
             $110($0_1 + 256 | 0 | 0, $5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, $6_1 | 0, $0_1 + 268 | 0 | 0);
             $5_1 = HEAP8[($0_1 + 256 | 0) >> 0] | 0;
             HEAP32[($0_1 + 32 | 0) >> 2] = $5_1;
             HEAP32[($0_1 + 36 | 0) >> 2] = $5_1;
             $99($0_1 + 272 | 0 | 0, 14116 | 0, $0_1 + 32 | 0 | 0) | 0;
             $5_1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
             HEAP32[($0_1 + 16 | 0) >> 2] = $0_1 + 272 | 0;
             $64($1_1 | 0, ($5_1 ? 14123 : 14130) | 0, $0_1 + 16 | 0 | 0) | 0;
             break label$7;
            }
            i64toi32_i32$3 = $4_1;
            i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
            $110($0_1 + 256 | 0 | 0, $5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 3 | 0, $0_1 + 268 | 0 | 0);
            HEAP32[($0_1 + 64 | 0) >> 2] = HEAP16[($0_1 + 256 | 0) >> 1] | 0;
            $99($0_1 + 272 | 0 | 0, 14136 | 0, $0_1 + 64 | 0 | 0) | 0;
            $5_1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
            HEAP32[($0_1 + 48 | 0) >> 2] = $0_1 + 272 | 0;
            $64($1_1 | 0, ($5_1 ? 14139 : 14147) | 0, $0_1 + 48 | 0 | 0) | 0;
            $5_1 = i64toi32_i32$3 + 2 | 0;
            break label$6;
           }
           i64toi32_i32$3 = $4_1;
           i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
           $110($0_1 + 256 | 0 | 0, $5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 4 | 0, $0_1 + 268 | 0 | 0);
           HEAP32[($0_1 + 96 | 0) >> 2] = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
           $99($0_1 + 272 | 0 | 0, 14136 | 0, $0_1 + 96 | 0 | 0) | 0;
           $5_1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
           HEAP32[($0_1 + 80 | 0) >> 2] = $0_1 + 272 | 0;
           $64($1_1 | 0, ($5_1 ? 14154 : 14162) | 0, $0_1 + 80 | 0 | 0) | 0;
           $5_1 = i64toi32_i32$3 + 4 | 0;
           break label$6;
          }
          i64toi32_i32$3 = $4_1;
          i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
          $110($0_1 + 256 | 0 | 0, $5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 5 | 0, $0_1 + 268 | 0 | 0);
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($0_1 + 260 | 0) >> 2] | 0;
          $8_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[($0_1 + 128 | 0) >> 2] = $8_1;
          HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$3;
          $190_1 = $0_1 + 272 | 0;
          i64toi32_i32$2 = $8_1;
          i64toi32_i32$0 = 1;
          i64toi32_i32$1 = 0;
          if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
           $31_1 = 1
          } else {
           if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
             $32_1 = 0
            } else {
             $32_1 = 1
            }
            $33_1 = $32_1;
           } else {
            $33_1 = 0
           }
           $31_1 = $33_1;
          }
          $99($190_1 | 0, ($31_1 ? 14169 : 14174) | 0, $0_1 + 128 | 0 | 0) | 0;
          $5_1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
          HEAP32[($0_1 + 112 | 0) >> 2] = $0_1 + 272 | 0;
          $64($1_1 | 0, ($5_1 ? 14154 : 14162) | 0, $0_1 + 112 | 0 | 0) | 0;
          $5_1 = $4_1 + 8 | 0;
          break label$6;
         }
         i64toi32_i32$3 = $4_1;
         i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
         $110($0_1 + 256 | 0 | 0, $5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 6 | 0, $0_1 + 268 | 0 | 0);
         HEAPF64[($0_1 + 160 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]);
         $100($0_1 + 272 | 0 | 0, 14179 | 0, $0_1 + 160 | 0 | 0) | 0;
         $5_1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
         HEAP32[($0_1 + 144 | 0) >> 2] = $0_1 + 272 | 0;
         $64($1_1 | 0, ($5_1 ? 14154 : 14162) | 0, $0_1 + 144 | 0 | 0) | 0;
         $5_1 = i64toi32_i32$3 + 4 | 0;
         break label$6;
        }
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
        $110($0_1 + 256 | 0 | 0, $5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 8 | 0, $0_1 + 268 | 0 | 0);
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$2 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($0_1 + 260 | 0) >> 2] | 0;
        $250_1 = i64toi32_i32$2;
        i64toi32_i32$2 = $0_1;
        HEAP32[($0_1 + 192 | 0) >> 2] = $250_1;
        HEAP32[($0_1 + 196 | 0) >> 2] = i64toi32_i32$3;
        $100($0_1 + 272 | 0 | 0, 14185 | 0, $0_1 + 192 | 0 | 0) | 0;
        $5_1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
        HEAP32[($0_1 + 176 | 0) >> 2] = $0_1 + 272 | 0;
        $64($1_1 | 0, ($5_1 ? 14154 : 14162) | 0, $0_1 + 176 | 0 | 0) | 0;
        $5_1 = $4_1 + 8 | 0;
        break label$6;
       }
       HEAP32[$0_1 >> 2] = 14200;
       $64($1_1 | 0, 14192 | 0, $0_1 | 0) | 0;
      }
      $5_1 = $4_1 + 1 | 0;
     }
     label$15 : {
      if (($4_1 + 1 | 0) & 3 | 0) {
       break label$15
      }
      $88(10 | 0, $1_1 | 0) | 0;
     }
     $4_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
     i64toi32_i32$1 = $4_1 + $3_1 | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     $284_1 = i64toi32_i32$3;
     $284$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7_1 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $284$hi;
     i64toi32_i32$2 = $284_1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$1 | 0)) {
      $34_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $35_1 = 0
       } else {
        $35_1 = 1
       }
       $36_1 = $35_1;
      } else {
       $36_1 = 0
      }
      $34_1 = $36_1;
     }
     if ($34_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (4 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $88(10 | 0, $1_1 | 0) | 0;
  global$0 = $0_1 + 528 | 0;
 }
 
 function $220($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $221($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $220($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $31($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $220($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $32($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $222($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  return $221($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $1_1 = 0, $28_1 = 0, $28$hi = 0, $29$hi = 0, $35_1 = 0, $35$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 ? 2 : 1;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1 | 0]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$2
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $28_1 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$0 = $28_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $29$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$2 | 0;
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $223($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $31($0_1 | 0) | 0;
  i64toi32_i32$0 = $223($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $32($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $1$hi = 0, i64toi32_i32$3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   i64toi32_i32$0 = $224($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$1
   }
   (wasm2js_i32$0 = $1() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return -1 | 0;
  }
  i64toi32_i32$2 = $1$hi;
  return $1_1 | 0;
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $1_1 = $31($0_1 | 0) | 0;
    i64toi32_i32$0 = 0;
    $220($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0) | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -33 | 0;
    if (!$1_1) {
     break label$1
    }
    $32($0_1 | 0);
    return;
   }
   i64toi32_i32$0 = 0;
   $220($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0) | 0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -33 | 0;
  }
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $17(fimport$11($0_1 | 0, $1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $92($0_1 + ($11($0_1 | 0) | 0) | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $229() {
  var $0_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $1_1 = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $153_1 = 0, $154_1 = 0, $156_1 = 0, $77_1 = 0, $80_1 = 0, $95_1 = 0, $98_1 = 0, $152_1 = 0, $155_1 = 0, $176_1 = 0, $179_1 = 0, $192_1 = 0, $195_1 = 0, $204_1 = 0, $207_1 = 0, $241_1 = 0, $244_1 = 0, $257_1 = 0, $260_1 = 0, $273_1 = 0, $276_1 = 0, $332_1 = 0, $349_1 = 0, $364 = 0, $367 = 0, $376 = 0, $379 = 0, $388 = 0, $391 = 0, $400 = 0, $403 = 0, $452 = 0, $466 = 0, $469 = 0, $481 = 0, $484 = 0, $496 = 0, $499 = 0, $515 = 0, $536 = 0, $552 = 0, $589 = 0, $592 = 0, $603 = 0, $638 = 0, $641 = 0, $652 = 0, $672 = 0, $675 = 0, $757 = 0, $760 = 0, $772 = 0, $775 = 0, $826 = 0, $829 = 0, $861 = 0, $864 = 0, $873 = 0, $876 = 0, $889 = 0, $892 = 0, $905 = 0, $908 = 0, $921 = 0, $924 = 0, $937 = 0, $940 = 0, $965 = 0, $968 = 0, $977 = 0, $980 = 0, $992 = 0, $995 = 0, $1008 = 0, $1011 = 0, $1105 = 0, $1108 = 0, $1117 = 0, $1120 = 0, $1129 = 0, $1132 = 0, $1144 = 0, $1147 = 0, $1170 = 0, $1173 = 0, $1186 = 0, $1189 = 0, $1203 = 0, $1217 = 0, $1220 = 0, $1264 = 0, $1279 = 0, $1282 = 0, $1317 = 0, $1331 = 0, $1334 = 0, $1343 = 0, $1346 = 0, $1355 = 0, $1358 = 0, $1371 = 0, $1374 = 0, $1401 = 0, $1404 = 0, $1413 = 0, $1416 = 0, $1429 = 0, $1432 = 0, $1445 = 0, $1448 = 0, $1478 = 0, $1481 = 0, $1490 = 0, $1493 = 0, $1504 = 0, $1520 = 0, $1543 = 0, $1559 = 0, $1575 = 0, $1591 = 0, $1612 = 0, $1615 = 0, $1629 = 0, $1659 = 0, $1662 = 0, $1671 = 0, $1674 = 0, $1683 = 0, $1686 = 0, $1700 = 0, $1703 = 0, $1721 = 0, $1737 = 0, $1753 = 0, $1769 = 0, $1791 = 0, $1807 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0_1 = global$0 - 58656 | 0;
  global$0 = $0_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79776 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79780 | 0) >> 2] | 0;
  $213($0_1 + 1408 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$2 = 79952;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $213($0_1 + 1376 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$2 = 80312;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
  $213($0_1 + 1344 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$2 = 80688;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
  $213($0_1 + 1312 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$2 = 81048;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
  $213($0_1 + 1280 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  $35(14204 | 0, 25 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 1264 | 0) >> 2] = 14365;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 14230 | 0, $0_1 + 1264 | 0 | 0) | 0;
  $35(14371 | 0, 23 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79776 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79780 | 0) >> 2] | 0;
  $214($0_1 + 58528 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0);
  $230(60 | 0, 15 | 0, $0_1 + 58528 | 0 | 0, $0_1 + 1408 | 0 | 0, 18 | 0);
  i64toi32_i32$2 = 79952;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $214($0_1 + 58528 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0);
  $230(300 | 0, 15 | 0, $0_1 + 58528 | 0 | 0, $0_1 + 1376 | 0 | 0, 18 | 0);
  i64toi32_i32$2 = 80312;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
  $214($0_1 + 58528 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0);
  $230(500 | 0, 15 | 0, $0_1 + 58528 | 0 | 0, $0_1 + 1344 | 0 | 0, 18 | 0);
  i64toi32_i32$2 = 80688;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
  $214($0_1 + 58528 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0);
  $230(700 | 0, 15 | 0, $0_1 + 58528 | 0 | 0, $0_1 + 1312 | 0 | 0, 18 | 0);
  i64toi32_i32$2 = 81048;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
  $214($0_1 + 58528 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0);
  $230(910 | 0, 15 | 0, $0_1 + 58528 | 0 | 0, $0_1 + 1280 | 0 | 0, 18 | 0);
  $231($0_1 + 56440 | 0 | 0);
  $232($0_1 + 33104 | 0 | 0, $0_1 + 1408 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 56472 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 56476 | 0) >> 2] | 0;
  $77_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1256 | 0) >> 2] = $77_1;
  HEAP32[($0_1 + 1260 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 33128 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 33132 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1248 | 0) >> 2] = $80_1;
  HEAP32[($0_1 + 1252 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 1256 | 0 | 0, $0_1 + 1248 | 0 | 0, $0_1 + 1408 | 0 | 0);
  $234($0_1 + 43584 | 0 | 0, 70 | 0, $0_1 + 1408 | 0 | 0, 4 | 0, HEAP32[(0 + 79776 | 0) >> 2] | 0 | 0, HEAP32[(79784 + 144 | 0) >> 2] | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 56472 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 56476 | 0) >> 2] | 0;
  $95_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1240 | 0) >> 2] = $95_1;
  HEAP32[($0_1 + 1244 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 43616 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 43620 | 0) >> 2] | 0;
  $98_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1232 | 0) >> 2] = $98_1;
  HEAP32[($0_1 + 1236 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 1240 | 0 | 0, $0_1 + 1232 | 0 | 0, $0_1 + 1408 | 0 | 0);
  $230(20 | 0, 310 | 0, (HEAP32[(0 + 101144 | 0) >> 2] | 0 ? 14417 : 14395) | 0, 14399 | 0, 14 | 0);
  HEAP32[($0_1 + 1440 | 0) >> 2] = 2;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
    if ($1_1 >>> 0 > 8 >>> 0) {
     break label$2
    }
    label$3 : {
     if ((1 << $1_1 | 0) & 146 | 0) {
      break label$3
     }
     if (!((1 << $1_1 | 0) & 292 | 0)) {
      break label$2
     }
     label$4 : {
      if (HEAP32[(0 + 101168 | 0) >> 2] | 0) {
       break label$4
      }
      $2_1 = $0_1 + 1408 | 0;
      break label$1;
     }
     $1_1 = 1;
     label$5 : {
      switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -109 | 0 | 0) {
      default:
       $1_1 = 0;
       break;
      case 0:
      case 2:
       break label$5;
      };
     }
     HEAP32[($0_1 + 1440 | 0) >> 2] = $1_1;
     $2_1 = $0_1 + 1376 | 0;
     break label$1;
    }
    label$7 : {
     if (HEAP32[(0 + 101168 | 0) >> 2] | 0) {
      break label$7
     }
     $2_1 = $0_1 + 1408 | 0;
     break label$1;
    }
    HEAP32[($0_1 + 1440 | 0) >> 2] = 0;
    $2_1 = $0_1 + 1344 | 0;
    break label$1;
   }
   label$8 : {
    if (HEAP32[(0 + 101168 | 0) >> 2] | 0) {
     break label$8
    }
    $2_1 = $0_1 + 1408 | 0;
    break label$1;
   }
   HEAP32[($0_1 + 1440 | 0) >> 2] = 0;
   $2_1 = $0_1 + 1312 | 0;
  }
  $1_1 = $0_1 + 1440 | 0 | 4 | 0;
  $92($1_1 | 0, $2_1 | 0) | 0;
  $235($0_1 + 14088 | 0 | 0, 160 | 0, 110 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $1_1 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 43624 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 43628 | 0) >> 2] | 0;
  $152_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1224 | 0) >> 2] = $152_1;
  HEAP32[($0_1 + 1228 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 14128 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 14132 | 0) >> 2] | 0;
  $155_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1216 | 0) >> 2] = $155_1;
  HEAP32[($0_1 + 1220 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 1224 | 0 | 0, $0_1 + 1216 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 14088 | 0) + 44 | 0) >> 2] | 0 | 0, -10 | 0, $0_1 + 1408 | 0 | 0);
  $3_1 = 14431;
  $237($0_1 + 52184 | 0 | 0, 200 | 0, 160 | 0, HEAP32[(($0_1 + 33104 | 0) + 44 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 14425 | 0, 14431 | 0, 14435 | 0, 14395 | 0, 14395 | 0, 14395 | 0, 14395 | 0);
  $230(200 | 0, 500 | 0, (HEAP32[(0 + 101148 | 0) >> 2] | 0 ? 14447 : 14395) | 0, 14399 | 0, 14 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 43624 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 43628 | 0) >> 2] | 0;
  $176_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1208 | 0) >> 2] = $176_1;
  HEAP32[($0_1 + 1212 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 52208 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 52212 | 0) >> 2] | 0;
  $179_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1200 | 0) >> 2] = $179_1;
  HEAP32[($0_1 + 1204 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 1208 | 0 | 0, $0_1 + 1200 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 52184 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1408 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 33144 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 33148 | 0) >> 2] | 0;
  $192_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1192 | 0) >> 2] = $192_1;
  HEAP32[($0_1 + 1196 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 52224 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 52228 | 0) >> 2] | 0;
  $195_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1184 | 0) >> 2] = $195_1;
  HEAP32[($0_1 + 1188 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 1192 | 0 | 0, $0_1 + 1184 | 0 | 0, $0_1 + 1408 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 14144 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 14148 | 0) >> 2] | 0;
  $204_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1176 | 0) >> 2] = $204_1;
  HEAP32[($0_1 + 1180 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 56464 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 56468 | 0) >> 2] | 0;
  $207_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1168 | 0) >> 2] = $207_1;
  HEAP32[($0_1 + 1172 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = HEAP32[(($0_1 + 43584 | 0) + 12 | 0) >> 2] | 0;
  $236($0_1 + 1176 | 0 | 0, $0_1 + 1168 | 0 | 0, 10 | 0, (((HEAP32[($0_1 + 56444 | 0) >> 2] | 0) - $2_1 | 0 | 0) / (2 | 0) | 0) + $2_1 | 0 | 0, -10 | 0, $0_1 + 1408 | 0 | 0);
  $238($0_1 + 28888 | 0 | 0, HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0, HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0, $0_1 + 1376 | 0 | 0, HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0, HEAP32[(0 + 83352 | 0) >> 2] | 0 | 0, $0_1 + 1280 | 0 | 0);
  $239($0_1 + 54352 | 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 52232 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 52236 | 0) >> 2] | 0;
  $241_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1160 | 0) >> 2] = $241_1;
  HEAP32[($0_1 + 1164 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 28912 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 28916 | 0) >> 2] | 0;
  $244_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1152 | 0) >> 2] = $244_1;
  HEAP32[($0_1 + 1156 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 1160 | 0 | 0, $0_1 + 1152 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 28888 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 52232 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 52236 | 0) >> 2] | 0;
  $257_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1144 | 0) >> 2] = $257_1;
  HEAP32[($0_1 + 1148 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 28920 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 28924 | 0) >> 2] | 0;
  $260_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1136 | 0) >> 2] = $260_1;
  HEAP32[($0_1 + 1140 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 1144 | 0 | 0, $0_1 + 1136 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 28888 | 0) + 36 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 52232 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 52236 | 0) >> 2] | 0;
  $273_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1128 | 0) >> 2] = $273_1;
  HEAP32[($0_1 + 1132 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 54376 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 54380 | 0) >> 2] | 0;
  $276_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1120 | 0) >> 2] = $276_1;
  HEAP32[($0_1 + 1124 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 1128 | 0 | 0, $0_1 + 1120 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 54352 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1376 | 0 | 0);
  $2_1 = $0_1 + 52232 | 0;
  label$9 : {
   $4_1 = (HEAP32[(0 + 77816 | 0) >> 2] | 0) + -2 | 0;
   if ($4_1 >>> 0 > 6 >>> 0) {
    break label$9
   }
   $3_1 = HEAP32[(($4_1 << 2 | 0) + 17036 | 0) >> 2] | 0;
  }
  $237($0_1 + 50016 | 0 | 0, 460 | 0, 0 | 0, HEAP32[(($0_1 + 52184 | 0) + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28948 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28956 | 0) >> 2] | 0 | 0, HEAP32[(($0_1 + 54352 | 0) + 36 | 0) >> 2] | 0 | 0, (HEAP32[(($0_1 + 54352 | 0) + 12 | 0) >> 2] | 0) + 30 | 0 | 0, 14465 | 0, 14395 | 0, $3_1 | 0, 14471 | 0, 14473 | 0, 14475 | 0, 14435 | 0);
  $3_1 = (HEAP32[(79952 + 4 | 0) >> 2] | 0 | 0) != (0 | 0);
  HEAP32[($0_1 + 1440 | 0) >> 2] = $3_1;
  $240($0_1 + 11984 | 0 | 0, 290 | 0, 470 | 0, $3_1 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 12016 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 12020 | 0) >> 2] | 0;
  $332_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1104 | 0) >> 2] = $332_1;
  HEAP32[($0_1 + 1108 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1112 | 0) >> 2] = $6_1;
  HEAP32[($0_1 + 1116 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 1112 | 0 | 0, $0_1 + 1104 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 11984 | 0) + 36 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 12008 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 12012 | 0) >> 2] | 0;
  $349_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1088 | 0) >> 2] = $349_1;
  HEAP32[($0_1 + 1092 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1096 | 0) >> 2] = $6_1;
  HEAP32[($0_1 + 1100 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 1096 | 0 | 0, $0_1 + 1088 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 11984 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 28944 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 28948 | 0) >> 2] | 0;
  $364 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1080 | 0) >> 2] = $364;
  HEAP32[($0_1 + 1084 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 50072 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 50076 | 0) >> 2] | 0;
  $367 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1072 | 0) >> 2] = $367;
  HEAP32[($0_1 + 1076 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 1080 | 0 | 0, $0_1 + 1072 | 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 28952 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 28956 | 0) >> 2] | 0;
  $376 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1064 | 0) >> 2] = $376;
  HEAP32[($0_1 + 1068 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 50088 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 50092 | 0) >> 2] | 0;
  $379 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1056 | 0) >> 2] = $379;
  HEAP32[($0_1 + 1060 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 1064 | 0 | 0, $0_1 + 1056 | 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 54384 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 54388 | 0) >> 2] | 0;
  $388 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1048 | 0) >> 2] = $388;
  HEAP32[($0_1 + 1052 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 50104 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 50108 | 0) >> 2] | 0;
  $391 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1040 | 0) >> 2] = $391;
  HEAP32[($0_1 + 1044 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 1048 | 0 | 0, $0_1 + 1040 | 0 | 0, $0_1 + 1376 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 12032 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 12036 | 0) >> 2] | 0;
  $400 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 1032 | 0) >> 2] = $400;
  HEAP32[($0_1 + 1036 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 50120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 50124 | 0) >> 2] | 0;
  $403 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 1024 | 0) >> 2] = $403;
  HEAP32[($0_1 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 1032 | 0 | 0, $0_1 + 1024 | 0 | 0, $0_1 + 1376 | 0 | 0);
  label$10 : {
   $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
   if ($2_1 >>> 0 > 8 >>> 0) {
    break label$10
   }
   if (!((1 << $2_1 | 0) & 292 | 0)) {
    break label$10
   }
   $2_1 = $0_1 + 28952 | 0;
   $241($0_1 + 37296 | 0 | 0, 400 | 0, (wasm2js_i32$0 = HEAP32[(0 + 101144 | 0) >> 2] | 0 ? 14405 : $0_1 + 1376 | 0, wasm2js_i32$1 = 14405, wasm2js_i32$2 = (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -100 | 0) & 255 | 0) >>> 0 < 6 >>> 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, HEAP32[(0 + 83240 | 0) >> 2] | 0 | 0, HEAP32[(83240 + 8 | 0) >> 2] | 0 | 0, HEAP32[(83240 + 16 | 0) >> 2] | 0 | 0);
   $234($0_1 + 39392 | 0 | 0, 270 | 0, (wasm2js_i32$0 = HEAP32[(0 + 101144 | 0) >> 2] | 0 ? 14405 : $0_1 + 1376 | 0, wasm2js_i32$1 = 14405, wasm2js_i32$2 = (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -100 | 0) & 255 | 0) >>> 0 < 6 >>> 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, HEAP32[(79952 + 144 | 0) >> 2] | 0 | 0, HEAP16[(79952 + 12 | 0) >> 1] | 0 | 0, HEAP32[(83240 + 24 | 0) >> 2] | 0 | 0);
   i64toi32_i32$2 = $0_1 + 54384 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 39424 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 39428 | 0) >> 2] | 0;
   $452 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 1008 | 0) >> 2] = $452;
   HEAP32[($0_1 + 1012 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 1016 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 1020 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 1016 | 0 | 0, $0_1 + 1008 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 54356 | 0) >> 2] | 0) + -10 | 0 | 0, -10 | 0, $0_1 + 1376 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 52216 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 52220 | 0) >> 2] | 0;
   $466 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 1e3 | 0) >> 2] = $466;
   HEAP32[($0_1 + 1004 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 39416 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 39420 | 0) >> 2] | 0;
   $469 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 992 | 0) >> 2] = $469;
   HEAP32[($0_1 + 996 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 1e3 | 0 | 0, $0_1 + 992 | 0 | 0, 20 | 0, HEAP32[($0_1 + 39420 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1376 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 37336 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 37340 | 0) >> 2] | 0;
   $481 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 984 | 0) >> 2] = $481;
   HEAP32[($0_1 + 988 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 14136 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 14140 | 0) >> 2] | 0;
   $484 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 976 | 0) >> 2] = $484;
   HEAP32[($0_1 + 980 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 984 | 0 | 0, $0_1 + 976 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 52188 | 0) >> 2] | 0) + -30 | 0 | 0, 0 | 0, $0_1 + 1376 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 39432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 39436 | 0) >> 2] | 0;
   $496 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 968 | 0) >> 2] = $496;
   HEAP32[($0_1 + 972 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 14112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 14116 | 0) >> 2] | 0;
   $499 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 960 | 0) >> 2] = $499;
   HEAP32[($0_1 + 964 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 968 | 0 | 0, $0_1 + 960 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 52188 | 0) >> 2] | 0) + -40 | 0 | 0, -10 | 0, $0_1 + 1376 | 0 | 0);
   $3_1 = $0_1 + 28944 | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 14120 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 14124 | 0) >> 2] | 0;
   $515 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 944 | 0) >> 2] = $515;
   HEAP32[($0_1 + 948 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 952 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 956 | 0) >> 2] = i64toi32_i32$0;
   $242($0_1 + 952 | 0 | 0, $0_1 + 944 | 0 | 0, (HEAP32[($0_1 + 28892 | 0) >> 2] | 0) + -10 | 0 | 0, (HEAP32[($0_1 + 52188 | 0) >> 2] | 0) + -50 | 0 | 0, $0_1 + 1376 | 0 | 0);
   label$11 : {
    if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$11
    }
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 37320 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 37324 | 0) >> 2] | 0;
    $536 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 928 | 0) >> 2] = $536;
    HEAP32[($0_1 + 932 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 936 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 940 | 0) >> 2] = i64toi32_i32$0;
    $236($0_1 + 936 | 0 | 0, $0_1 + 928 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 28892 | 0) >> 2] | 0) + -10 | 0 | 0, -20 | 0, $0_1 + 1376 | 0 | 0);
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 37328 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 37332 | 0) >> 2] | 0;
    $552 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 912 | 0) >> 2] = $552;
    HEAP32[($0_1 + 916 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 920 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 924 | 0) >> 2] = i64toi32_i32$0;
    $236($0_1 + 920 | 0 | 0, $0_1 + 912 | 0 | 0, 20 | 0, (HEAP32[($0_1 + 28892 | 0) >> 2] | 0) + -20 | 0 | 0, -10 | 0, $0_1 + 1376 | 0 | 0);
   }
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$10
   }
   $4_1 = HEAP32[(0 + 101080 | 0) >> 2] | 0;
   HEAP32[($0_1 + 1440 | 0) >> 2] = !$4_1 << 1 | 0;
   $4_1 = $92($1_1 | 0, ($4_1 ? $0_1 + 1312 | 0 : $0_1 + 1376 | 0) | 0) | 0;
   $235($0_1 + 22536 | 0 | 0, 360 | 0, HEAP32[($0_1 + 37324 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $4_1 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 22592 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 22596 | 0) >> 2] | 0;
   $589 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 904 | 0) >> 2] = $589;
   HEAP32[($0_1 + 908 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 37320 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 37324 | 0) >> 2] | 0;
   $592 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 896 | 0) >> 2] = $592;
   HEAP32[($0_1 + 900 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 904 | 0 | 0, $0_1 + 896 | 0 | 0, $0_1 + 1376 | 0 | 0);
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 22576 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 22580 | 0) >> 2] | 0;
   $603 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 880 | 0) >> 2] = $603;
   HEAP32[($0_1 + 884 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 888 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 892 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 888 | 0 | 0, $0_1 + 880 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 28892 | 0) >> 2] | 0) + -10 | 0 | 0, -20 | 0, $0_1 + 1376 | 0 | 0);
   $3_1 = HEAP32[(0 + 101084 | 0) >> 2] | 0;
   HEAP32[($0_1 + 1440 | 0) >> 2] = !$3_1 << 1 | 0;
   $3_1 = $92($4_1 | 0, ($3_1 ? $0_1 + 1312 | 0 : $0_1 + 1376 | 0) | 0) | 0;
   $235($0_1 + 20424 | 0 | 0, 360 | 0, HEAP32[($0_1 + 37332 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $3_1 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 20480 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 20484 | 0) >> 2] | 0;
   $638 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 872 | 0) >> 2] = $638;
   HEAP32[($0_1 + 876 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 37328 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 37332 | 0) >> 2] | 0;
   $641 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 864 | 0) >> 2] = $641;
   HEAP32[($0_1 + 868 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 872 | 0 | 0, $0_1 + 864 | 0 | 0, $0_1 + 1376 | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 20464 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 20468 | 0) >> 2] | 0;
   $652 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 848 | 0) >> 2] = $652;
   HEAP32[($0_1 + 852 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 856 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 860 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 856 | 0 | 0, $0_1 + 848 | 0 | 0, 20 | 0, (HEAP32[($0_1 + 28892 | 0) >> 2] | 0) + -20 | 0 | 0, -10 | 0, $0_1 + 1376 | 0 | 0);
  }
  label$12 : {
   label$13 : {
    $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
    if ($2_1 >>> 0 > 8 >>> 0) {
     break label$13
    }
    if ((1 << $2_1 | 0) & 292 | 0) {
     break label$12
    }
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 52216 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 52220 | 0) >> 2] | 0;
   $672 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 840 | 0) >> 2] = $672;
   HEAP32[($0_1 + 844 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 50056 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 50060 | 0) >> 2] | 0;
   $675 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 832 | 0) >> 2] = $675;
   HEAP32[($0_1 + 836 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 840 | 0 | 0, $0_1 + 832 | 0 | 0, $0_1 + 1376 | 0 | 0);
  }
  $243($0_1 + 41488 | 0 | 0, $0_1 + 1344 | 0 | 0, HEAP32[(0 + 83272 | 0) >> 2] | 0 | 0, HEAP32[(83272 + 8 | 0) >> 2] | 0 | 0, HEAP32[(83272 + 16 | 0) >> 2] | 0 | 0);
  label$14 : {
   $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
   if ($2_1 >>> 0 > 8 >>> 0) {
    break label$14
   }
   if (!((1 << $2_1 | 0) & 292 | 0)) {
    break label$14
   }
   $237($0_1 + 47848 | 0 | 0, 660 | 0, HEAP32[($0_1 + 50052 | 0) >> 2] | 0 | 0, HEAP32[(($0_1 + 37296 | 0) + 44 | 0) >> 2] | 0 | 0, HEAP32[(($0_1 + 41488 | 0) + 44 | 0) >> 2] | 0 | 0, (HEAP32[($0_1 + 50116 | 0) >> 2] | 0) + -10 | 0 | 0, HEAP32[($0_1 + 50132 | 0) >> 2] | 0 | 0, 0 | 0, 14487 | 0, 14395 | 0, 14395 | 0, 14492 | 0, 14473 | 0, 14435 | 0, 14395 | 0);
  }
  label$15 : {
   $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
   if ($2_1 >>> 0 > 7 >>> 0) {
    break label$15
   }
   if (!((1 << $2_1 | 0) & 146 | 0)) {
    break label$15
   }
   $241($0_1 + 35200 | 0 | 0, 590 | 0, ((((HEAPU8[(0 + 80312 | 0) >> 0] | 0) + -100 | 0) & 255 | 0) >>> 0 < 6 >>> 0 ? $0_1 + 1344 | 0 : 14405) | 0, HEAP32[(83272 + 24 | 0) >> 2] | 0 | 0, HEAP32[(83272 + 32 | 0) >> 2] | 0 | 0, HEAP32[(83272 + 40 | 0) >> 2] | 0 | 0);
   $237($0_1 + 47848 | 0 | 0, 660 | 0, HEAP32[($0_1 + 50052 | 0) >> 2] | 0 | 0, HEAP32[(($0_1 + 35200 | 0) + 44 | 0) >> 2] | 0 | 0, HEAP32[(($0_1 + 41488 | 0) + 44 | 0) >> 2] | 0 | 0, (HEAP32[($0_1 + 41500 | 0) >> 2] | 0) + 50 | 0 | 0, HEAP32[($0_1 + 50132 | 0) >> 2] | 0 | 0, 0 | 0, 14487 | 0, 14395 | 0, 14499 | 0, 14492 | 0, 14473 | 0, 14435 | 0, 14395 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 35240 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 35244 | 0) >> 2] | 0;
   $757 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 824 | 0) >> 2] = $757;
   HEAP32[($0_1 + 828 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 14136 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 14140 | 0) >> 2] | 0;
   $760 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 816 | 0) >> 2] = $760;
   HEAP32[($0_1 + 820 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 824 | 0 | 0, $0_1 + 816 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 50020 | 0) >> 2] | 0) + -30 | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 41528 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 41532 | 0) >> 2] | 0;
   $772 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 808 | 0) >> 2] = $772;
   HEAP32[($0_1 + 812 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 14112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 14116 | 0) >> 2] | 0;
   $775 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 800 | 0) >> 2] = $775;
   HEAP32[($0_1 + 804 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 808 | 0 | 0, $0_1 + 800 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 50020 | 0) >> 2] | 0) + -50 | 0 | 0, -10 | 0, $0_1 + 1344 | 0 | 0);
  }
  label$16 : {
   $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
   if ($2_1 >>> 0 > 6 >>> 0) {
    break label$16
   }
   if (!((1 << $2_1 | 0) & 73 | 0)) {
    break label$16
   }
   $241($0_1 + 35200 | 0 | 0, 590 | 0, ((((HEAPU8[(0 + 80312 | 0) >> 0] | 0) + -100 | 0) & 255 | 0) >>> 0 < 6 >>> 0 ? $0_1 + 1344 | 0 : 14405) | 0, HEAP32[(83272 + 24 | 0) >> 2] | 0 | 0, HEAP32[(83272 + 32 | 0) >> 2] | 0 | 0, HEAP32[(83272 + 40 | 0) >> 2] | 0 | 0);
   $237($0_1 + 47848 | 0 | 0, 660 | 0, HEAP32[($0_1 + 50052 | 0) >> 2] | 0 | 0, HEAP32[(($0_1 + 35200 | 0) + 44 | 0) >> 2] | 0 | 0, HEAP32[(($0_1 + 41488 | 0) + 44 | 0) >> 2] | 0 | 0, (HEAP32[($0_1 + 41500 | 0) >> 2] | 0) + 50 | 0 | 0, HEAP32[($0_1 + 50132 | 0) >> 2] | 0 | 0, 0 | 0, 14487 | 0, 14395 | 0, 14499 | 0, 14492 | 0, 14473 | 0, 14435 | 0, 14395 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 35240 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 35244 | 0) >> 2] | 0;
   $826 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 792 | 0) >> 2] = $826;
   HEAP32[($0_1 + 796 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 47888 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 47892 | 0) >> 2] | 0;
   $829 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 784 | 0) >> 2] = $829;
   HEAP32[($0_1 + 788 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 792 | 0 | 0, $0_1 + 784 | 0 | 0, $0_1 + 1344 | 0 | 0);
  }
  label$17 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$17
   }
   label$18 : {
    label$19 : {
     label$20 : {
      $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
      if ($2_1 >>> 0 > 8 >>> 0) {
       break label$20
      }
      if ((1 << $2_1 | 0) & 292 | 0) {
       break label$19
      }
     }
     $2_1 = (((HEAPU8[(0 + 80312 | 0) >> 0] | 0) + -100 | 0) & 255 | 0) >>> 0 > 5 >>> 0;
     HEAP32[($0_1 + 1440 | 0) >> 2] = $2_1;
     $240($0_1 + 9880 | 0 | 0, 550 | 0, HEAP32[(($0_1 + 41488 | 0) + 28 | 0) >> 2] | 0 | 0, $2_1 | 0, $0_1 + 1344 | 0 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 9928 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 9932 | 0) >> 2] | 0;
     $861 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 760 | 0) >> 2] = $861;
     HEAP32[($0_1 + 764 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 41512 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 41516 | 0) >> 2] | 0;
     $864 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 752 | 0) >> 2] = $864;
     HEAP32[($0_1 + 756 | 0) >> 2] = i64toi32_i32$0;
     $233($0_1 + 760 | 0 | 0, $0_1 + 752 | 0 | 0, $0_1 + 1344 | 0 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 50080 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 50084 | 0) >> 2] | 0;
     $873 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 744 | 0) >> 2] = $873;
     HEAP32[($0_1 + 748 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 9912 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 9916 | 0) >> 2] | 0;
     $876 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 736 | 0) >> 2] = $876;
     HEAP32[($0_1 + 740 | 0) >> 2] = i64toi32_i32$0;
     $236($0_1 + 744 | 0 | 0, $0_1 + 736 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 9880 | 0) + 36 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 50064 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 50068 | 0) >> 2] | 0;
     $889 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 728 | 0) >> 2] = $889;
     HEAP32[($0_1 + 732 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 9904 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 9908 | 0) >> 2] | 0;
     $892 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 720 | 0) >> 2] = $892;
     HEAP32[($0_1 + 724 | 0) >> 2] = i64toi32_i32$0;
     $236($0_1 + 728 | 0 | 0, $0_1 + 720 | 0 | 0, 30 | 0, HEAP32[(($0_1 + 9880 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 50080 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 50084 | 0) >> 2] | 0;
     $905 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 712 | 0) >> 2] = $905;
     HEAP32[($0_1 + 716 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 35224 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 35228 | 0) >> 2] | 0;
     $908 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 704 | 0) >> 2] = $908;
     HEAP32[($0_1 + 708 | 0) >> 2] = i64toi32_i32$0;
     $236($0_1 + 712 | 0 | 0, $0_1 + 704 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 35200 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 50096 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 50100 | 0) >> 2] | 0;
     $921 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 696 | 0) >> 2] = $921;
     HEAP32[($0_1 + 700 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 35232 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 35236 | 0) >> 2] | 0;
     $924 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 688 | 0) >> 2] = $924;
     HEAP32[($0_1 + 692 | 0) >> 2] = i64toi32_i32$0;
     $236($0_1 + 696 | 0 | 0, $0_1 + 688 | 0 | 0, 20 | 0, HEAP32[(($0_1 + 35200 | 0) + 36 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
     break label$18;
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 50080 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 50084 | 0) >> 2] | 0;
    $937 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 776 | 0) >> 2] = $937;
    HEAP32[($0_1 + 780 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 41512 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 41516 | 0) >> 2] | 0;
    $940 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 768 | 0) >> 2] = $940;
    HEAP32[($0_1 + 772 | 0) >> 2] = i64toi32_i32$0;
    $236($0_1 + 776 | 0 | 0, $0_1 + 768 | 0 | 0, 10 | 0, HEAP32[($0_1 + 41516 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   }
   $2_1 = (HEAP32[(80312 + 4 | 0) >> 2] | 0 | 0) != (0 | 0);
   HEAP32[($0_1 + 1440 | 0) >> 2] = $2_1;
   $240($0_1 + 7776 | 0 | 0, 550 | 0, HEAP32[(($0_1 + 41488 | 0) + 36 | 0) >> 2] | 0 | 0, $2_1 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 7824 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 7828 | 0) >> 2] | 0;
   $965 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 680 | 0) >> 2] = $965;
   HEAP32[($0_1 + 684 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 41520 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 41524 | 0) >> 2] | 0;
   $968 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 672 | 0) >> 2] = $968;
   HEAP32[($0_1 + 676 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 680 | 0 | 0, $0_1 + 672 | 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 50096 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 50100 | 0) >> 2] | 0;
   $977 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 664 | 0) >> 2] = $977;
   HEAP32[($0_1 + 668 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 7800 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 7804 | 0) >> 2] | 0;
   $980 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 656 | 0) >> 2] = $980;
   HEAP32[($0_1 + 660 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 664 | 0 | 0, $0_1 + 656 | 0 | 0, 20 | 0, HEAP32[($0_1 + 7804 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 50112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 50116 | 0) >> 2] | 0;
   $992 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 648 | 0) >> 2] = $992;
   HEAP32[($0_1 + 652 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 7808 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 7812 | 0) >> 2] | 0;
   $995 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 640 | 0) >> 2] = $995;
   HEAP32[($0_1 + 644 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 648 | 0 | 0, $0_1 + 640 | 0 | 0, 30 | 0, HEAP32[(($0_1 + 7776 | 0) + 36 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 50096 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 50100 | 0) >> 2] | 0;
   $1008 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 632 | 0) >> 2] = $1008;
   HEAP32[($0_1 + 636 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 47920 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 47924 | 0) >> 2] | 0;
   $1011 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 624 | 0) >> 2] = $1011;
   HEAP32[($0_1 + 628 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 632 | 0 | 0, $0_1 + 624 | 0 | 0, 20 | 0, HEAP32[($0_1 + 47924 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
  }
  label$21 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$21
   }
   $2_1 = HEAP32[(83272 + 56 | 0) >> 2] | 0;
   HEAP32[($0_1 + 1440 | 0) >> 2] = $2_1;
   label$22 : {
    label$23 : {
     switch ($2_1 | 0) {
     case 0:
     case 3:
      $92($1_1 | 0, $0_1 + 1344 | 0 | 0) | 0;
      break label$22;
     case 1:
      $92($1_1 | 0, $0_1 + 1312 | 0 | 0) | 0;
      break label$22;
     case 2:
      $92($1_1 | 0, $0_1 + 1280 | 0 | 0) | 0;
      break label$22;
     default:
      break label$23;
     };
    }
    $149_1 = 0;
    $150_1 = $1_1 + 4 | 0;
    $151_1 = HEAPU8[($149_1 + 14508 | 0) >> 0] | 0 | ((HEAPU8[($149_1 + 14509 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$150_1 >> 0] = $151_1;
    HEAP8[($150_1 + 1 | 0) >> 0] = $151_1 >>> 8 | 0;
    $145_1 = 0;
    $146_1 = HEAPU8[($145_1 + 14504 | 0) >> 0] | 0 | ((HEAPU8[($145_1 + 14505 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($145_1 + 14506 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($145_1 + 14507 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP8[$1_1 >> 0] = $146_1;
    HEAP8[($1_1 + 1 | 0) >> 0] = $146_1 >>> 8 | 0;
    HEAP8[($1_1 + 2 | 0) >> 0] = $146_1 >>> 16 | 0;
    HEAP8[($1_1 + 3 | 0) >> 0] = $146_1 >>> 24 | 0;
   }
   $244($0_1 + 26768 | 0 | 0, HEAP32[($0_1 + 41516 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $1_1 | 0);
   $2_1 = HEAP32[(83272 + 60 | 0) >> 2] | 0;
   HEAP32[($0_1 + 1440 | 0) >> 2] = $2_1;
   $3_1 = $0_1 + 41512 | 0;
   label$27 : {
    label$28 : {
     switch ($2_1 | 0) {
     case 0:
     case 3:
      $92($1_1 | 0, $0_1 + 1344 | 0 | 0) | 0;
      break label$27;
     case 1:
      $92($1_1 | 0, $0_1 + 1312 | 0 | 0) | 0;
      break label$27;
     case 2:
      $92($1_1 | 0, $0_1 + 1280 | 0 | 0) | 0;
      break label$27;
     default:
      break label$28;
     };
    }
    $153_1 = 0;
    $154_1 = $1_1 + 4 | 0;
    $156_1 = HEAPU8[($153_1 + 14508 | 0) >> 0] | 0 | ((HEAPU8[($153_1 + 14509 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$154_1 >> 0] = $156_1;
    HEAP8[($154_1 + 1 | 0) >> 0] = $156_1 >>> 8 | 0;
    $147_1 = 0;
    $148_1 = HEAPU8[($147_1 + 14504 | 0) >> 0] | 0 | ((HEAPU8[($147_1 + 14505 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($147_1 + 14506 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($147_1 + 14507 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP8[$1_1 >> 0] = $148_1;
    HEAP8[($1_1 + 1 | 0) >> 0] = $148_1 >>> 8 | 0;
    HEAP8[($1_1 + 2 | 0) >> 0] = $148_1 >>> 16 | 0;
    HEAP8[($1_1 + 3 | 0) >> 0] = $148_1 >>> 24 | 0;
   }
   $244($0_1 + 24648 | 0 | 0, HEAP32[($0_1 + 41524 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $1_1 | 0);
   $2_1 = HEAP32[(0 + 101072 | 0) >> 2] | 0;
   HEAP32[($0_1 + 1440 | 0) >> 2] = ($2_1 | 0) != (0 | 0);
   $2_1 = $92($1_1 | 0, ($2_1 ? $0_1 + 1280 | 0 : $0_1 + 1344 | 0) | 0) | 0;
   $240($0_1 + 3568 | 0 | 0, 550 | 0, HEAP32[($0_1 + 47924 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $2_1 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 26832 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 26836 | 0) >> 2] | 0;
   $1105 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 616 | 0) >> 2] = $1105;
   HEAP32[($0_1 + 620 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1108 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 608 | 0) >> 2] = $1108;
   HEAP32[($0_1 + 612 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 616 | 0 | 0, $0_1 + 608 | 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 24712 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 24716 | 0) >> 2] | 0;
   $1117 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 600 | 0) >> 2] = $1117;
   HEAP32[($0_1 + 604 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 41520 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 41524 | 0) >> 2] | 0;
   $1120 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 592 | 0) >> 2] = $1120;
   HEAP32[($0_1 + 596 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 600 | 0 | 0, $0_1 + 592 | 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 50080 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 50084 | 0) >> 2] | 0;
   $1129 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 584 | 0) >> 2] = $1129;
   HEAP32[($0_1 + 588 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 26816 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 26820 | 0) >> 2] | 0;
   $1132 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 576 | 0) >> 2] = $1132;
   HEAP32[($0_1 + 580 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 584 | 0 | 0, $0_1 + 576 | 0 | 0, 10 | 0, HEAP32[($0_1 + 26820 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 50096 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 50100 | 0) >> 2] | 0;
   $1144 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 568 | 0) >> 2] = $1144;
   HEAP32[($0_1 + 572 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 24672 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 24676 | 0) >> 2] | 0;
   $1147 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 560 | 0) >> 2] = $1147;
   HEAP32[($0_1 + 564 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 568 | 0 | 0, $0_1 + 560 | 0 | 0, 20 | 0, HEAP32[(($0_1 + 24648 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   $3_1 = $0_1 + 50096 | 0;
   $4_1 = $0_1 + 47920 | 0;
   label$32 : {
    label$33 : {
     $5_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
     if ($5_1 >>> 0 > 8 >>> 0) {
      break label$33
     }
     if ((1 << $5_1 | 0) & 292 | 0) {
      break label$32
     }
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 50064 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 50068 | 0) >> 2] | 0;
    $1170 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 552 | 0) >> 2] = $1170;
    HEAP32[($0_1 + 556 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 26792 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 26796 | 0) >> 2] | 0;
    $1173 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 544 | 0) >> 2] = $1173;
    HEAP32[($0_1 + 548 | 0) >> 2] = i64toi32_i32$0;
    $236($0_1 + 552 | 0 | 0, $0_1 + 544 | 0 | 0, 30 | 0, HEAP32[(($0_1 + 26768 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 50112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 50116 | 0) >> 2] | 0;
   $1186 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 536 | 0) >> 2] = $1186;
   HEAP32[($0_1 + 540 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 24696 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 24700 | 0) >> 2] | 0;
   $1189 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 528 | 0) >> 2] = $1189;
   HEAP32[($0_1 + 532 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 536 | 0 | 0, $0_1 + 528 | 0 | 0, 30 | 0, HEAP32[($0_1 + 24700 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 3592 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 3596 | 0) >> 2] | 0;
   $1203 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 512 | 0) >> 2] = $1203;
   HEAP32[($0_1 + 516 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 520 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 524 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 520 | 0 | 0, $0_1 + 512 | 0 | 0, 20 | 0, HEAP32[($0_1 + 3596 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 3616 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 3620 | 0) >> 2] | 0;
   $1217 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 504 | 0) >> 2] = $1217;
   HEAP32[($0_1 + 508 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1220 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 496 | 0) >> 2] = $1220;
   HEAP32[($0_1 + 500 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 504 | 0 | 0, $0_1 + 496 | 0 | 0, $0_1 + 1344 | 0 | 0);
   label$34 : {
    $4_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
    if ($4_1 >>> 0 > 8 >>> 0) {
     break label$34
    }
    if ((1 << $4_1 | 0) & 292 | 0) {
     break label$21
    }
   }
   $4_1 = $0_1 + 50080 | 0;
   label$35 : {
    label$36 : {
     if (!(HEAP32[(0 + 101064 | 0) >> 2] | 0)) {
      break label$36
     }
     HEAP32[($0_1 + 1440 | 0) >> 2] = 2;
     $5_1 = $0_1 + 1280 | 0;
     break label$35;
    }
    label$37 : {
     if (!(HEAP32[(0 + 101048 | 0) >> 2] | 0)) {
      break label$37
     }
     HEAP32[($0_1 + 1440 | 0) >> 2] = 1;
     $5_1 = $0_1 + 1312 | 0;
     break label$35;
    }
    HEAP32[($0_1 + 1440 | 0) >> 2] = 0;
    $5_1 = $0_1 + 1344 | 0;
   }
   $2_1 = $92($2_1 | 0, $5_1 | 0) | 0;
   $235($0_1 + 18312 | 0 | 0, 550 | 0, HEAP32[(($0_1 + 35200 | 0) + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $2_1 | 0);
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 18336 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 18340 | 0) >> 2] | 0;
   $1264 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 480 | 0) >> 2] = $1264;
   HEAP32[($0_1 + 484 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 488 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 492 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 488 | 0 | 0, $0_1 + 480 | 0 | 0, 10 | 0, HEAP32[(($0_1 + 18312 | 0) + 28 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 18368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 18372 | 0) >> 2] | 0;
   $1279 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 472 | 0) >> 2] = $1279;
   HEAP32[($0_1 + 476 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 35224 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 35228 | 0) >> 2] | 0;
   $1282 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 464 | 0) >> 2] = $1282;
   HEAP32[($0_1 + 468 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 472 | 0 | 0, $0_1 + 464 | 0 | 0, $0_1 + 1344 | 0 | 0);
   label$38 : {
    label$39 : {
     if (!(HEAP32[(0 + 101068 | 0) >> 2] | 0)) {
      break label$39
     }
     HEAP32[($0_1 + 1440 | 0) >> 2] = 2;
     $4_1 = $0_1 + 1280 | 0;
     break label$38;
    }
    label$40 : {
     if (!(HEAP32[(0 + 101052 | 0) >> 2] | 0)) {
      break label$40
     }
     HEAP32[($0_1 + 1440 | 0) >> 2] = 1;
     $4_1 = $0_1 + 1312 | 0;
     break label$38;
    }
    HEAP32[($0_1 + 1440 | 0) >> 2] = 0;
    $4_1 = $0_1 + 1344 | 0;
   }
   $2_1 = $92($2_1 | 0, $4_1 | 0) | 0;
   $235($0_1 + 16200 | 0 | 0, 550 | 0, HEAP32[($0_1 + 35236 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $2_1 | 0);
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 16224 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 16228 | 0) >> 2] | 0;
   $1317 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 448 | 0) >> 2] = $1317;
   HEAP32[($0_1 + 452 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 456 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 460 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 456 | 0 | 0, $0_1 + 448 | 0 | 0, 20 | 0, HEAP32[($0_1 + 16228 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1344 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 16256 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 16260 | 0) >> 2] | 0;
   $1331 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 440 | 0) >> 2] = $1331;
   HEAP32[($0_1 + 444 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 35232 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 35236 | 0) >> 2] | 0;
   $1334 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 432 | 0) >> 2] = $1334;
   HEAP32[($0_1 + 436 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 440 | 0 | 0, $0_1 + 432 | 0 | 0, $0_1 + 1344 | 0 | 0);
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 41528 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 41532 | 0) >> 2] | 0;
  $1343 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 424 | 0) >> 2] = $1343;
  HEAP32[($0_1 + 428 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 47904 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 47908 | 0) >> 2] | 0;
  $1346 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 416 | 0) >> 2] = $1346;
  HEAP32[($0_1 + 420 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 424 | 0 | 0, $0_1 + 416 | 0 | 0, $0_1 + 1344 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 50128 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 50132 | 0) >> 2] | 0;
  $1355 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 408 | 0) >> 2] = $1355;
  HEAP32[($0_1 + 412 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 47936 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 47940 | 0) >> 2] | 0;
  $1358 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 400 | 0) >> 2] = $1358;
  HEAP32[($0_1 + 404 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 408 | 0 | 0, $0_1 + 400 | 0 | 0, $0_1 + 1344 | 0 | 0);
  $245($0_1 + 31008 | 0 | 0, $0_1 + 1312 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 47912 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 47916 | 0) >> 2] | 0;
  $1371 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 392 | 0) >> 2] = $1371;
  HEAP32[($0_1 + 396 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 31032 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 31036 | 0) >> 2] | 0;
  $1374 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 384 | 0) >> 2] = $1374;
  HEAP32[($0_1 + 388 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 392 | 0 | 0, $0_1 + 384 | 0 | 0, 30 | 0, HEAP32[($0_1 + 31036 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1312 | 0 | 0);
  $237($0_1 + 45680 | 0 | 0, 880 | 0, HEAP32[($0_1 + 47884 | 0) >> 2] | 0 | 0, (HEAP32[($0_1 + 31012 | 0) >> 2] | 0) + -30 | 0 | 0, HEAP32[(($0_1 + 31008 | 0) + 44 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 47948 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 14510 | 0, 14395 | 0, 14492 | 0, 14517 | 0, 14435 | 0, 14395 | 0, 14395 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 31048 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 31052 | 0) >> 2] | 0;
  $1401 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 376 | 0) >> 2] = $1401;
  HEAP32[($0_1 + 380 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 45736 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 45740 | 0) >> 2] | 0;
  $1404 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 368 | 0) >> 2] = $1404;
  HEAP32[($0_1 + 372 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 376 | 0 | 0, $0_1 + 368 | 0 | 0, $0_1 + 1312 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 47912 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 47916 | 0) >> 2] | 0;
  $1413 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 360 | 0) >> 2] = $1413;
  HEAP32[($0_1 + 364 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 45720 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 45724 | 0) >> 2] | 0;
  $1416 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 352 | 0) >> 2] = $1416;
  HEAP32[($0_1 + 356 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 360 | 0 | 0, $0_1 + 352 | 0 | 0, 30 | 0, HEAP32[(($0_1 + 45680 | 0) + 44 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 + 1312 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 47944 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 47948 | 0) >> 2] | 0;
  $1429 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 344 | 0) >> 2] = $1429;
  HEAP32[($0_1 + 348 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 45752 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 45756 | 0) >> 2] | 0;
  $1432 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 336 | 0) >> 2] = $1432;
  HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 344 | 0 | 0, $0_1 + 336 | 0 | 0, $0_1 + 1312 | 0 | 0);
  $2_1 = $0_1 + 47912 | 0;
  label$41 : {
   label$42 : {
    if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$42
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 47928 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 47932 | 0) >> 2] | 0;
    $1445 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 328 | 0) >> 2] = $1445;
    HEAP32[($0_1 + 332 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 31040 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 31044 | 0) >> 2] | 0;
    $1448 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 320 | 0) >> 2] = $1448;
    HEAP32[($0_1 + 324 | 0) >> 2] = i64toi32_i32$0;
    $233($0_1 + 328 | 0 | 0, $0_1 + 320 | 0 | 0, $0_1 + 1312 | 0 | 0);
    break label$41;
   }
   $3_1 = HEAP32[(0 + 101076 | 0) >> 2] | 0;
   HEAP32[($0_1 + 1440 | 0) >> 2] = ($3_1 | 0) != (0 | 0);
   $1_1 = $92($1_1 | 0, ($3_1 ? $0_1 + 1280 | 0 : $0_1 + 1312 | 0) | 0) | 0;
   $240($0_1 + 1464 | 0 | 0, 720 | 0, (HEAP32[($0_1 + 47924 | 0) >> 2] | 0) + 5 | 0 | 0, HEAP32[($0_1 + 1440 | 0) >> 2] | 0 | 0, $1_1 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 1512 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 1516 | 0) >> 2] | 0;
   $1478 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 312 | 0) >> 2] = $1478;
   HEAP32[($0_1 + 316 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 31040 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 31044 | 0) >> 2] | 0;
   $1481 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 304 | 0) >> 2] = $1481;
   HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 312 | 0 | 0, $0_1 + 304 | 0 | 0, $0_1 + 1312 | 0 | 0);
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 47928 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 47932 | 0) >> 2] | 0;
   $1490 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 296 | 0) >> 2] = $1490;
   HEAP32[($0_1 + 300 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 1488 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 1492 | 0) >> 2] | 0;
   $1493 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 288 | 0) >> 2] = $1493;
   HEAP32[($0_1 + 292 | 0) >> 2] = i64toi32_i32$0;
   $233($0_1 + 296 | 0 | 0, $0_1 + 288 | 0 | 0, $0_1 + 1312 | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 26800 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 26804 | 0) >> 2] | 0;
   $1504 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 272 | 0) >> 2] = $1504;
   HEAP32[($0_1 + 276 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 280 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 284 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 280 | 0 | 0, $0_1 + 272 | 0 | 0, 30 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -40 | 0 | 0, -20 | 0, $0_1 + 1312 | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 24680 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 24684 | 0) >> 2] | 0;
   $1520 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 256 | 0) >> 2] = $1520;
   HEAP32[($0_1 + 260 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 264 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 268 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 264 | 0 | 0, $0_1 + 256 | 0 | 0, 30 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -40 | 0 | 0, -20 | 0, $0_1 + 1312 | 0 | 0);
   label$43 : {
    $1_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
    if ($1_1 >>> 0 > 8 >>> 0) {
     break label$43
    }
    if (!((1 << $1_1 | 0) & 292 | 0)) {
     break label$43
    }
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 22560 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 22564 | 0) >> 2] | 0;
    $1543 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 240 | 0) >> 2] = $1543;
    HEAP32[($0_1 + 244 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 248 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 252 | 0) >> 2] = i64toi32_i32$0;
    $236($0_1 + 248 | 0 | 0, $0_1 + 240 | 0 | 0, 30 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -40 | 0 | 0, -10 | 0, $0_1 + 1312 | 0 | 0);
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 20448 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 20452 | 0) >> 2] | 0;
    $1559 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 224 | 0) >> 2] = $1559;
    HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 232 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 236 | 0) >> 2] = i64toi32_i32$0;
    $236($0_1 + 232 | 0 | 0, $0_1 + 224 | 0 | 0, 30 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -40 | 0 | 0, -10 | 0, $0_1 + 1312 | 0 | 0);
    break label$41;
   }
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 18344 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 18348 | 0) >> 2] | 0;
   $1575 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 208 | 0) >> 2] = $1575;
   HEAP32[($0_1 + 212 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 216 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 220 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 216 | 0 | 0, $0_1 + 208 | 0 | 0, 30 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -40 | 0 | 0, -20 | 0, $0_1 + 1312 | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 16232 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 16236 | 0) >> 2] | 0;
   $1591 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 192 | 0) >> 2] = $1591;
   HEAP32[($0_1 + 196 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 200 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 204 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 200 | 0 | 0, $0_1 + 192 | 0 | 0, 30 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -40 | 0 | 0, -20 | 0, $0_1 + 1312 | 0 | 0);
  }
  label$44 : {
   $1_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
   if ($1_1 >>> 0 > 6 >>> 0) {
    break label$44
   }
   if (!((1 << $1_1 | 0) & 73 | 0)) {
    break label$44
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 47896 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 47900 | 0) >> 2] | 0;
   $1612 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 184 | 0) >> 2] = $1612;
   HEAP32[($0_1 + 188 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 14136 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 14140 | 0) >> 2] | 0;
   $1615 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 176 | 0) >> 2] = $1615;
   HEAP32[($0_1 + 180 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 184 | 0 | 0, $0_1 + 176 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -30 | 0 | 0, 0 | 0, $0_1 + 1312 | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 14112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 14116 | 0) >> 2] | 0;
   $1629 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 160 | 0) >> 2] = $1629;
   HEAP32[($0_1 + 164 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 168 | 0 | 0, $0_1 + 160 | 0 | 0, 30 | 0, (HEAP32[($0_1 + 47852 | 0) >> 2] | 0) + -40 | 0 | 0, -10 | 0, $0_1 + 1312 | 0 | 0);
  }
  $1_1 = 1;
  label$45 : {
   $2_1 = HEAPU8[(0 + 81048 | 0) >> 0] | 0;
   if (($2_1 + -10 | 0) >>> 0 < 5 >>> 0) {
    break label$45
   }
   $1_1 = 1;
   if (($2_1 | 0) == (64 | 0)) {
    break label$45
   }
   $1_1 = 0;
  }
  HEAP32[($0_1 + 1440 | 0) >> 2] = $1_1;
  $240($0_1 + 5672 | 0 | 0, 940 | 0, (HEAP32[($0_1 + 31052 | 0) >> 2] | 0) + -15 | 0 | 0, $1_1 | 0, $0_1 + 1280 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 45728 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 45732 | 0) >> 2] | 0;
  $1659 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 152 | 0) >> 2] = $1659;
  HEAP32[($0_1 + 156 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 5696 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 5700 | 0) >> 2] | 0;
  $1662 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 144 | 0) >> 2] = $1662;
  HEAP32[($0_1 + 148 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 152 | 0 | 0, $0_1 + 144 | 0 | 0, $0_1 + 1280 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 45744 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 45748 | 0) >> 2] | 0;
  $1671 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 136 | 0) >> 2] = $1671;
  HEAP32[($0_1 + 140 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 5704 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 5708 | 0) >> 2] | 0;
  $1674 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 128 | 0) >> 2] = $1674;
  HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  $233($0_1 + 136 | 0 | 0, $0_1 + 128 | 0 | 0, $0_1 + 1280 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 45760 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 45764 | 0) >> 2] | 0;
  $1683 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 120 | 0) >> 2] = $1683;
  HEAP32[($0_1 + 124 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 28928 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 28932 | 0) >> 2] | 0;
  $1686 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 112 | 0) >> 2] = $1686;
  HEAP32[($0_1 + 116 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $0_1 + 11996 | 0;
  $236($0_1 + 120 | 0 | 0, $0_1 + 112 | 0 | 0, 10 | 0, (HEAP32[$1_1 >> 2] | 0) + 10 | 0 | 0, -10 | 0, $0_1 + 1280 | 0 | 0);
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 5720 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 5724 | 0) >> 2] | 0;
  $1700 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 104 | 0) >> 2] = $1700;
  HEAP32[($0_1 + 108 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 28936 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 28940 | 0) >> 2] | 0;
  $1703 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 96 | 0) >> 2] = $1703;
  HEAP32[($0_1 + 100 | 0) >> 2] = i64toi32_i32$0;
  $236($0_1 + 104 | 0 | 0, $0_1 + 96 | 0 | 0, 10 | 0, (HEAP32[$1_1 >> 2] | 0) + 20 | 0 | 0, -20 | 0, $0_1 + 1280 | 0 | 0);
  label$46 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$46
   }
   $1_1 = $0_1 + 5720 | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 24688 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 24692 | 0) >> 2] | 0;
   $1721 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 80 | 0) >> 2] = $1721;
   HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 88 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 88 | 0 | 0, $0_1 + 80 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 11996 | 0) >> 2] | 0) + 20 | 0 | 0, -10 | 0, $0_1 + 1280 | 0 | 0);
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 26808 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 26812 | 0) >> 2] | 0;
   $1737 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 64 | 0) >> 2] = $1737;
   HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 72 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 72 | 0 | 0, $0_1 + 64 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 11996 | 0) >> 2] | 0) + 20 | 0 | 0, -10 | 0, $0_1 + 1280 | 0 | 0);
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 1496 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 1500 | 0) >> 2] | 0;
   $1753 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1753;
   HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 56 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 56 | 0 | 0, $0_1 + 48 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 11996 | 0) >> 2] | 0) + 20 | 0 | 0, -10 | 0, $0_1 + 1280 | 0 | 0);
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 3600 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 3604 | 0) >> 2] | 0;
   $1769 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 32 | 0) >> 2] = $1769;
   HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 40 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 40 | 0 | 0, $0_1 + 32 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 11996 | 0) >> 2] | 0) + 20 | 0 | 0, -10 | 0, $0_1 + 1280 | 0 | 0);
   label$47 : {
    $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
    if ($2_1 >>> 0 > 8 >>> 0) {
     break label$47
    }
    if ((1 << $2_1 | 0) & 292 | 0) {
     break label$46
    }
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 18352 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 18356 | 0) >> 2] | 0;
   $1791 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $1791;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 24 | 0 | 0, $0_1 + 16 | 0 | 0, 10 | 0, (HEAP32[($0_1 + 11996 | 0) >> 2] | 0) + 20 | 0 | 0, -10 | 0, $0_1 + 1280 | 0 | 0);
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 16240 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 16244 | 0) >> 2] | 0;
   $1807 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[$0_1 >> 2] = $1807;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $236($0_1 + 8 | 0 | 0, $0_1 | 0, 10 | 0, (HEAP32[($0_1 + 11996 | 0) >> 2] | 0) + 20 | 0 | 0, -10 | 0, $0_1 + 1280 | 0 | 0);
  }
  $35(14521 | 0, 11 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(14533 | 0, 28 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(14562 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 58656 | 0;
 }
 
 function $230($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $35(14571 | 0, 15 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 14691;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 14587 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
 }
 
 function $231($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 400 | 0;
  global$0 = $1_1;
  HEAP8[($0_1 + 40 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 240;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 50;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 240;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 20;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 100;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 30;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 290;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 50;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 190;
  HEAP32[i64toi32_i32$1 >> 2] = 20;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($1_1 + 80 | 0) + 16 | 0;
  i64toi32_i32$0 = 290;
  HEAP32[i64toi32_i32$1 >> 2] = 50;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 104 | 0;
  i64toi32_i32$0 = 190;
  HEAP32[i64toi32_i32$1 >> 2] = 50;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 112 | 0;
  i64toi32_i32$0 = 190;
  HEAP32[i64toi32_i32$1 >> 2] = 20;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($1_1 + 80 | 0) + 40 | 0) >> 2] = 14405;
  HEAP32[($1_1 + 124 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $1_1 + 128 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 190;
  HEAP32[($1_1 + 80 | 0) >> 2] = 20;
  HEAP32[($1_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 290;
  HEAP32[($1_1 + 88 | 0) >> 2] = 20;
  HEAP32[($1_1 + 92 | 0) >> 2] = i64toi32_i32$0;
  $100($1_1 + 144 | 0 | 0, 14696 | 0, $1_1 + 80 | 0 | 0) | 0;
  $2_1 = $228($0_1 + 40 | 0 | 0, $1_1 + 144 | 0 | 0) | 0;
  HEAP32[(($1_1 + 48 | 0) + 16 | 0) >> 2] = 14395;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 180;
  HEAP32[($1_1 + 48 | 0) >> 2] = 35;
  HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 56 | 0) >> 2] = 14399;
  HEAP32[($1_1 + 60 | 0) >> 2] = 14399;
  $99($1_1 + 144 | 0 | 0, 14802 | 0, $1_1 + 48 | 0 | 0) | 0;
  $2_1 = $228($2_1 | 0, $1_1 + 144 | 0 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[(($1_1 + 16 | 0) + 16 | 0) >> 2] = 14396;
  HEAP32[($1_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($1_1 + 24 | 0) >> 2] = 14399;
  HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + -2 | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = $0_1 + 15 | 0;
  $99($1_1 + 144 | 0 | 0, 14920 | 0, $1_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($2_1 | 0, $1_1 + 144 | 0 | 0) | 0;
  $35(15048 | 0, 15 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $1_1 | 0) | 0;
  global$0 = $1_1 + 400 | 0;
 }
 
 function $232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $6$hi = 0, $19_1 = 0, $20_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $21_1 = 0, $31_1 = 0, i64toi32_i32$3 = 0;
  $2_1 = global$0 - 640 | 0;
  global$0 = $2_1;
  $16_1 = 0;
  HEAP16[(($2_1 + 560 | 0) + 8 | 0) >> 1] = HEAPU8[($16_1 + 15076 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 15077 | 0) >> 0] | 0) << 8 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 15068 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 15069 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 15070 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 15071 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 15072 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 15073 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 15074 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 15075 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 560 | 0) >> 2] = $15_1;
  HEAP32[($2_1 + 564 | 0) >> 2] = i64toi32_i32$1;
  $17_1 = 0;
  HEAP16[(($2_1 + 544 | 0) + 8 | 0) >> 1] = HEAPU8[($17_1 + 15086 | 0) >> 0] | 0 | ((HEAPU8[($17_1 + 15087 | 0) >> 0] | 0) << 8 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 15078 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 15079 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 15080 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 15081 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 15082 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 15083 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 15084 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 15085 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $21_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 544 | 0) >> 2] = $21_1;
  HEAP32[($2_1 + 548 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(($2_1 + 528 | 0) + 8 | 0) >> 1] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 528 | 0) >> 2] = 0;
  HEAP32[($2_1 + 532 | 0) >> 2] = i64toi32_i32$0;
  $18_1 = 0;
  HEAP16[(($2_1 + 512 | 0) + 8 | 0) >> 1] = HEAPU8[($18_1 + 15096 | 0) >> 0] | 0 | ((HEAPU8[($18_1 + 15097 | 0) >> 0] | 0) << 8 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 15088 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 15089 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 15090 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 15091 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 15092 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 15093 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 15094 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 15095 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $31_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 512 | 0) >> 2] = $31_1;
  HEAP32[($2_1 + 516 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($0_1 + 48 | 0) >> 0] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 240;
  HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = 170;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 265;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = 70;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 215;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = 70;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 100;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 100;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 290;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 170;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 190;
  HEAP32[i64toi32_i32$0 >> 2] = 70;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = ($2_1 + 192 | 0) + 16 | 0;
  i64toi32_i32$1 = 290;
  HEAP32[i64toi32_i32$0 >> 2] = 170;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1 + 216 | 0;
  i64toi32_i32$1 = 190;
  HEAP32[i64toi32_i32$0 >> 2] = 170;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1 + 224 | 0;
  i64toi32_i32$1 = 190;
  HEAP32[i64toi32_i32$0 >> 2] = 70;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2_1 + 232 | 0) >> 2] = 14405;
  HEAP32[(($2_1 + 192 | 0) + 44 | 0) >> 2] = 14399;
  i64toi32_i32$0 = ($2_1 + 192 | 0) + 48 | 0;
  i64toi32_i32$1 = 1073217536;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 190;
  HEAP32[($2_1 + 192 | 0) >> 2] = 70;
  HEAP32[($2_1 + 196 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 290;
  HEAP32[($2_1 + 200 | 0) >> 2] = 70;
  HEAP32[($2_1 + 204 | 0) >> 2] = i64toi32_i32$1;
  $100($2_1 + 256 | 0 | 0, 14696 | 0, $2_1 + 192 | 0 | 0) | 0;
  $3_1 = $228($0_1 + 48 | 0 | 0, $2_1 + 256 | 0 | 0) | 0;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 252;
  HEAP32[($2_1 + 160 | 0) >> 2] = 120;
  HEAP32[($2_1 + 164 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2_1 + 168 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 172 | 0) >> 2] = 15043;
  HEAP32[(($2_1 + 160 | 0) + 16 | 0) >> 2] = $2_1 + 560 | 0;
  $99($2_1 + 256 | 0 | 0, 14802 | 0, $2_1 + 160 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 256 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[(($2_1 + 128 | 0) + 16 | 0) >> 2] = $2_1 + 544 | 0;
  HEAP32[($2_1 + 140 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 136 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 132 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 128 | 0) >> 2] = $5_1 + 5 | 0;
  $99($2_1 + 256 | 0 | 0, 15098 | 0, $2_1 + 128 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 256 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = $2_1 + 528 | 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 104 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 100 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 96 | 0) >> 2] = $5_1 + 5 | 0;
  $99($2_1 + 256 | 0 | 0, 15098 | 0, $2_1 + 96 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 256 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[(($2_1 + 64 | 0) + 16 | 0) >> 2] = $2_1 + 512 | 0;
  HEAP32[($2_1 + 76 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 72 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 68 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 64 | 0) >> 2] = $5_1 + -5 | 0;
  $99($2_1 + 256 | 0 | 0, 15215 | 0, $2_1 + 64 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 256 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79776 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79780 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    $4_1 = i64toi32_i32$1;
    $4_1 = i64toi32_i32$1 >> 31 | 0;
    if (((i64toi32_i32$1 + $4_1 | 0) ^ $4_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 48 | 0) >> 2] = $6_1;
    HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
    $99($2_1 + 576 | 0 | 0, 15335 | 0, $2_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $22_1 = $20_1;
     } else {
      $22_1 = 0
     }
     $19_1 = $22_1;
    }
    if ($19_1) {
     break label$3
    }
    HEAP8[($2_1 + 578 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $23_1 = 0;
    HEAP16[($2_1 + 576 | 0) >> 1] = HEAPU8[($23_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($23_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$1;
   }
   HEAP8[($2_1 + 578 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $24_1 = 0;
   HEAP16[($2_1 + 576 | 0) >> 1] = HEAPU8[($24_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($24_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $2_1 + 576 | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $4_1 + 25 | 0;
  $99($2_1 + 256 | 0 | 0, 15098 | 0, $2_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($3_1 | 0, $2_1 + 256 | 0 | 0) | 0;
  $35(15344 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 640 | 0;
 }
 
 function $233($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $35(15358 | 0, 17 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 15043;
  HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
  i64toi32_i32$1 = $3_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1073217536;
  $1_1 = $4_1 + (($5_1 - $4_1 | 0 | 0) / (2 | 0) | 0) | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = $4_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  $65(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15376 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 48 | 0;
 }
 
 function $234($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  HEAP8[($0_1 + 48 | 0) >> 0] = 0;
  $7_1 = $0_1 + 44 | 0;
  HEAP32[$7_1 >> 2] = 110;
  $8_1 = $1_1 + 50 | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $8_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = 144;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 76;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = 100;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 50;
  HEAP32[i64toi32_i32$1 >> 2] = 160;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 60;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[(($6_1 + 192 | 0) + 16 | 0) >> 2] = $1_1 + 12 | 0;
  HEAP32[($6_1 + 212 | 0) >> 2] = 110;
  HEAP32[($6_1 + 216 | 0) >> 2] = $1_1;
  HEAP32[(($6_1 + 192 | 0) + 28 | 0) >> 2] = 122;
  HEAP32[($6_1 + 224 | 0) >> 2] = $1_1;
  HEAP32[(($6_1 + 192 | 0) + 36 | 0) >> 2] = 160;
  HEAP32[($6_1 + 232 | 0) >> 2] = $8_1;
  HEAP32[(($6_1 + 192 | 0) + 44 | 0) >> 2] = 135;
  HEAP32[(($6_1 + 192 | 0) + 48 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 244 | 0) >> 2] = 85;
  HEAP32[($6_1 + 248 | 0) >> 2] = $1_1;
  HEAP32[(($6_1 + 192 | 0) + 60 | 0) >> 2] = 60;
  HEAP32[($6_1 + 256 | 0) >> 2] = 14405;
  HEAP32[($6_1 + 260 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $6_1 + 264 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6_1 + 192 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 196 | 0) >> 2] = 60;
  HEAP32[($6_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 204 | 0) >> 2] = 97;
  $100($6_1 + 272 | 0 | 0, 15471 | 0, $6_1 + 192 | 0 | 0) | 0;
  $8_1 = $228($0_1 + 48 | 0 | 0, $6_1 + 272 | 0 | 0) | 0;
  $7_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[(($6_1 + 160 | 0) + 16 | 0) >> 2] = 14415;
  HEAP32[($6_1 + 172 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 168 | 0) >> 2] = 14399;
  HEAP32[($6_1 + 160 | 0) >> 2] = $1_1 + 30 | 0;
  HEAP32[($6_1 + 164 | 0) >> 2] = $7_1 + 15 | 0;
  $99($6_1 + 272 | 0 | 0, 14920 | 0, $6_1 + 160 | 0 | 0) | 0;
  $1_1 = $228($8_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    $8_1 = $3_1 >> 31 | 0;
    if ((($3_1 + $8_1 | 0) ^ $8_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$2
    }
    HEAP32[($6_1 + 144 | 0) >> 2] = $3_1;
    $99($6_1 + 554 | 0 | 0, 15335 | 0, $6_1 + 144 | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$3
    }
    HEAP8[($6_1 + 556 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $11_1 = 0;
    HEAP16[($6_1 + 554 | 0) >> 1] = HEAPU8[($11_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$1;
   }
   HEAP8[($6_1 + 556 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $12_1 = 0;
   HEAP16[($6_1 + 554 | 0) >> 1] = HEAPU8[($12_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$4 : {
   label$5 : {
    $3_1 = $4_1 >> 31 | 0;
    if ((($4_1 + $3_1 | 0) ^ $3_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$5
    }
    HEAP32[($6_1 + 128 | 0) >> 2] = $4_1;
    $99($6_1 + 548 | 0 | 0, 15335 | 0, $6_1 + 128 | 0 | 0) | 0;
    break label$4;
   }
   label$6 : {
    if (($4_1 | 0) < (1 | 0)) {
     break label$6
    }
    HEAP8[($6_1 + 550 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $13_1 = 0;
    HEAP16[($6_1 + 548 | 0) >> 1] = HEAPU8[($13_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$4;
   }
   HEAP8[($6_1 + 550 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $14_1 = 0;
   HEAP16[($6_1 + 548 | 0) >> 1] = HEAPU8[($14_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$7 : {
   label$8 : {
    $4_1 = $5_1 >> 31 | 0;
    if ((($5_1 + $4_1 | 0) ^ $4_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$8
    }
    HEAP32[($6_1 + 112 | 0) >> 2] = $5_1;
    $99($6_1 + 542 | 0 | 0, 15335 | 0, $6_1 + 112 | 0 | 0) | 0;
    break label$7;
   }
   label$9 : {
    if (($5_1 | 0) < (1 | 0)) {
     break label$9
    }
    HEAP8[($6_1 + 544 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $15_1 = 0;
    HEAP16[($6_1 + 542 | 0) >> 1] = HEAPU8[($15_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($15_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$7;
   }
   HEAP8[($6_1 + 544 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $16_1 = 0;
   HEAP16[($6_1 + 542 | 0) >> 1] = HEAPU8[($16_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[(($6_1 + 80 | 0) + 16 | 0) >> 2] = $6_1 + 554 | 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 88 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $5_1 + 15 | 0;
  HEAP32[($6_1 + 80 | 0) >> 2] = $4_1 + 5 | 0;
  $99($6_1 + 272 | 0 | 0, 15595 | 0, $6_1 + 80 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[(($6_1 + 48 | 0) + 16 | 0) >> 2] = $6_1 + 548 | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $5_1 + -5 | 0;
  HEAP32[($6_1 + 48 | 0) >> 2] = $4_1 + 5 | 0;
  $99($6_1 + 272 | 0 | 0, 15595 | 0, $6_1 + 48 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[(($6_1 + 16 | 0) + 16 | 0) >> 2] = $6_1 + 542 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $4_1 + -5 | 0;
  $99($6_1 + 272 | 0 | 0, 15215 | 0, $6_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($1_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  $35(15717 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $6_1 | 0) | 0;
  global$0 = $6_1 + 560 | 0;
 }
 
 function $235($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $11$hi = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 40;
  HEAP32[($0_1 + 16 | 0) >> 2] = 20;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 60 | 0) >> 2] = $2_1;
  $6_1 = $1_1 + 20 | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $6_1;
  $7_1 = $2_1 + -20 | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = $7_1;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1 + 10 | 0;
  $8_1 = $2_1 + 10 | 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
  $9_1 = $2_1 + -10 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $9_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + 20 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
  $7_1 = 0;
  $10_1 = 0;
  label$1 : {
   label$2 : {
    switch ($3_1 | 0) {
    case 0:
     $7_1 = $1_1;
     $10_1 = $9_1;
     break label$1;
    case 1:
     $7_1 = $1_1;
     $10_1 = $2_1;
     break label$1;
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $7_1 = $1_1;
   $10_1 = $8_1;
  }
  HEAP8[($0_1 + 64 | 0) >> 0] = 0;
  HEAP32[(($5_1 + 48 | 0) + 16 | 0) >> 2] = $6_1;
  HEAP32[(($5_1 + 48 | 0) + 20 | 0) >> 2] = $9_1;
  HEAP32[(($5_1 + 48 | 0) + 24 | 0) >> 2] = $6_1;
  HEAP32[(($5_1 + 48 | 0) + 28 | 0) >> 2] = $8_1;
  i64toi32_i32$1 = $5_1 + 80 | 0;
  i64toi32_i32$0 = 10;
  HEAP32[i64toi32_i32$1 >> 2] = 10;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[(($5_1 + 48 | 0) + 44 | 0) >> 2] = $8_1;
  HEAP32[($5_1 + 96 | 0) >> 2] = $1_1;
  HEAP32[(($5_1 + 48 | 0) + 52 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = 14405;
  HEAP32[(($5_1 + 48 | 0) + 60 | 0) >> 2] = 14399;
  i64toi32_i32$1 = ($5_1 + 48 | 0) + 64 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $9_1;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 10;
  HEAP32[($5_1 + 56 | 0) >> 2] = 10;
  HEAP32[($5_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  $100($5_1 + 128 | 0 | 0, 15731 | 0, $5_1 + 48 | 0 | 0) | 0;
  $1_1 = $228($0_1 + 64 | 0 | 0, $5_1 + 128 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + 24 | 0;
  i64toi32_i32$1 = 1074266112;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(($5_1 + 16 | 0) + 20 | 0) >> 2] = $4_1;
  HEAP32[(($5_1 + 16 | 0) + 16 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 20 | 0) >> 2] = $10_1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $11_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $7_1;
  $100($5_1 + 128 | 0 | 0, 15875 | 0, $5_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($1_1 | 0, $5_1 + 128 | 0 | 0) | 0;
  $35(15961 | 0, 14 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 384 | 0;
 }
 
 function $236($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[$1_1 >> 2] | 0;
  $8_1 = HEAP32[$0_1 >> 2] | 0;
  $35(15976 | 0, 33 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $2_1 = $8_1 + $2_1 | 0;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  $4_1 = $7_1 + $4_1 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 52 | 0) >> 2] = $5_1;
  i64toi32_i32$1 = $6_1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1073217536;
  HEAP32[$6_1 >> 2] = $8_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  $65(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 16010 | 0, $6_1 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
 }
 
 function $237($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $15_1 = 0, $16_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $17_1 = 0;
  $15_1 = global$0 - 560 | 0;
  global$0 = $15_1;
  HEAP8[($0_1 + 120 | 0) >> 0] = 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = 400;
  HEAP32[($0_1 + 4 | 0) >> 2] = 80;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 116 | 0) >> 2] = $7_1;
  $16_1 = $1_1 + 30 | 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = $16_1;
  $17_1 = $0_1 + 108 | 0;
  HEAP32[$17_1 >> 2] = $7_1;
  HEAP32[($0_1 + 100 | 0) >> 2] = $6_1;
  HEAP32[($0_1 + 96 | 0) >> 2] = $16_1;
  $7_1 = $0_1 + 92 | 0;
  HEAP32[$7_1 >> 2] = $6_1;
  HEAP32[($0_1 + 84 | 0) >> 2] = $5_1;
  HEAP32[($0_1 + 80 | 0) >> 2] = $16_1;
  $6_1 = $0_1 + 76 | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = $16_1;
  $5_1 = $0_1 + 60 | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  HEAP32[($0_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 48 | 0) >> 2] = $16_1;
  $4_1 = $0_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = $3_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $16_1;
  $3_1 = $0_1 + 28 | 0;
  HEAP32[$3_1 >> 2] = $2_1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 30;
  HEAP32[i64toi32_i32$1 >> 2] = 480;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(($15_1 + 240 | 0) + 16 | 0) >> 2] = $16_1;
  HEAP32[($15_1 + 260 | 0) >> 2] = 480;
  HEAP32[($15_1 + 264 | 0) >> 2] = $16_1;
  HEAP32[(($15_1 + 240 | 0) + 28 | 0) >> 2] = 80;
  HEAP32[($15_1 + 272 | 0) >> 2] = $1_1;
  HEAP32[(($15_1 + 240 | 0) + 36 | 0) >> 2] = 80;
  HEAP32[($15_1 + 280 | 0) >> 2] = 14405;
  HEAP32[(($15_1 + 240 | 0) + 44 | 0) >> 2] = 14442;
  i64toi32_i32$1 = $15_1 + 288 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($15_1 + 240 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 244 | 0) >> 2] = 80;
  HEAP32[($15_1 + 248 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 252 | 0) >> 2] = 480;
  $100($15_1 + 304 | 0 | 0, 16116 | 0, $15_1 + 240 | 0 | 0) | 0;
  $16_1 = $228($0_1 + 120 | 0 | 0, $15_1 + 304 | 0 | 0) | 0;
  HEAP32[(($15_1 + 208 | 0) + 16 | 0) >> 2] = $8_1;
  HEAP32[($15_1 + 208 | 0) >> 2] = $1_1 + 15 | 0;
  HEAP32[($15_1 + 212 | 0) >> 2] = 70;
  HEAP32[($15_1 + 216 | 0) >> 2] = 14442;
  HEAP32[($15_1 + 220 | 0) >> 2] = 15043;
  $99($15_1 + 304 | 0 | 0, 14802 | 0, $15_1 + 208 | 0 | 0) | 0;
  $1_1 = $228($16_1 | 0, $15_1 + 304 | 0 | 0) | 0;
  $16_1 = HEAP32[$3_1 >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[(($15_1 + 176 | 0) + 16 | 0) >> 2] = $9_1;
  HEAP32[($15_1 + 188 | 0) >> 2] = 15043;
  HEAP32[($15_1 + 184 | 0) >> 2] = 14438;
  HEAP32[($15_1 + 180 | 0) >> 2] = $16_1 + -4 | 0;
  HEAP32[($15_1 + 176 | 0) >> 2] = $2_1 + 15 | 0;
  $99($15_1 + 304 | 0 | 0, 14802 | 0, $15_1 + 176 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $15_1 + 304 | 0 | 0) | 0;
  $16_1 = HEAP32[$4_1 >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[(($15_1 + 144 | 0) + 16 | 0) >> 2] = $10_1;
  HEAP32[($15_1 + 156 | 0) >> 2] = 15043;
  HEAP32[($15_1 + 152 | 0) >> 2] = 14438;
  HEAP32[($15_1 + 148 | 0) >> 2] = $16_1 + -4 | 0;
  HEAP32[($15_1 + 144 | 0) >> 2] = $2_1 + 15 | 0;
  $99($15_1 + 304 | 0 | 0, 14802 | 0, $15_1 + 144 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $15_1 + 304 | 0 | 0) | 0;
  $16_1 = HEAP32[$5_1 >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[(($15_1 + 112 | 0) + 16 | 0) >> 2] = $11_1;
  HEAP32[($15_1 + 124 | 0) >> 2] = 15043;
  HEAP32[($15_1 + 120 | 0) >> 2] = 14438;
  HEAP32[($15_1 + 116 | 0) >> 2] = $16_1 + -4 | 0;
  HEAP32[($15_1 + 112 | 0) >> 2] = $2_1 + 15 | 0;
  $99($15_1 + 304 | 0 | 0, 14802 | 0, $15_1 + 112 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $15_1 + 304 | 0 | 0) | 0;
  $16_1 = HEAP32[$6_1 >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[(($15_1 + 80 | 0) + 16 | 0) >> 2] = $12_1;
  HEAP32[($15_1 + 92 | 0) >> 2] = 15043;
  HEAP32[($15_1 + 88 | 0) >> 2] = 14438;
  HEAP32[($15_1 + 84 | 0) >> 2] = $16_1 + -4 | 0;
  HEAP32[($15_1 + 80 | 0) >> 2] = $2_1 + 15 | 0;
  $99($15_1 + 304 | 0 | 0, 14802 | 0, $15_1 + 80 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $15_1 + 304 | 0 | 0) | 0;
  $16_1 = HEAP32[$7_1 >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  HEAP32[(($15_1 + 48 | 0) + 16 | 0) >> 2] = $13_1;
  HEAP32[($15_1 + 60 | 0) >> 2] = 15043;
  HEAP32[($15_1 + 56 | 0) >> 2] = 14438;
  HEAP32[($15_1 + 52 | 0) >> 2] = $16_1 + -4 | 0;
  HEAP32[($15_1 + 48 | 0) >> 2] = $2_1 + 15 | 0;
  $99($15_1 + 304 | 0 | 0, 14802 | 0, $15_1 + 48 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $15_1 + 304 | 0 | 0) | 0;
  $16_1 = HEAP32[$17_1 >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
  HEAP32[(($15_1 + 16 | 0) + 16 | 0) >> 2] = $14_1;
  HEAP32[($15_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($15_1 + 24 | 0) >> 2] = 14438;
  HEAP32[($15_1 + 20 | 0) >> 2] = $16_1 + -2 | 0;
  HEAP32[($15_1 + 16 | 0) >> 2] = $0_1 + 15 | 0;
  $99($15_1 + 304 | 0 | 0, 14920 | 0, $15_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($1_1 | 0, $15_1 + 304 | 0 | 0) | 0;
  $35(16220 | 0, 16 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$15_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $15_1 | 0) | 0;
  global$0 = $15_1 + 560 | 0;
 }
 
 function $238($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $8_1 = 0, i64toi32_i32$3 = 0, $11_1 = 0, $11$hi = 0, $9_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 672 | 0;
  global$0 = $7_1;
  HEAP8[($0_1 + 72 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 302;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 390;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 227;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = 390;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 315;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 290;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 240;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 215;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 150;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 100;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 340;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 390;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 190;
  HEAP32[i64toi32_i32$1 >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($7_1 + 336 | 0) + 16 | 0;
  i64toi32_i32$0 = 340;
  HEAP32[i64toi32_i32$1 >> 2] = 390;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1 + 360 | 0;
  i64toi32_i32$0 = 190;
  HEAP32[i64toi32_i32$1 >> 2] = 390;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1 + 368 | 0;
  i64toi32_i32$0 = 190;
  HEAP32[i64toi32_i32$1 >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 376 | 0) >> 2] = 14405;
  HEAP32[(($7_1 + 336 | 0) + 44 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $7_1 + 384 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 190;
  HEAP32[($7_1 + 336 | 0) >> 2] = 290;
  HEAP32[($7_1 + 340 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 340;
  HEAP32[($7_1 + 344 | 0) >> 2] = 290;
  HEAP32[($7_1 + 348 | 0) >> 2] = i64toi32_i32$0;
  $100($7_1 + 400 | 0 | 0, 16237 | 0, $7_1 + 336 | 0 | 0) | 0;
  $8_1 = $228($0_1 + 72 | 0 | 0, $7_1 + 400 | 0 | 0) | 0;
  HEAP32[(($7_1 + 304 | 0) + 16 | 0) >> 2] = 16342;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 265;
  HEAP32[($7_1 + 304 | 0) >> 2] = 340;
  HEAP32[($7_1 + 308 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 312 | 0) >> 2] = 14399;
  HEAP32[($7_1 + 316 | 0) >> 2] = 15043;
  $99($7_1 + 400 | 0 | 0, 14802 | 0, $7_1 + 304 | 0 | 0) | 0;
  $8_1 = $228($8_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $9_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 272 | 0) + 16 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 284 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 280 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 276 | 0) >> 2] = $9_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $10_1 + 5 | 0;
  $99($7_1 + 400 | 0 | 0, 16347 | 0, $7_1 + 272 | 0 | 0) | 0;
  $1_1 = $228($8_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 240 | 0) + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 252 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 248 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 244 | 0) >> 2] = $8_1;
  HEAP32[($7_1 + 240 | 0) >> 2] = $9_1 + 5 | 0;
  $99($7_1 + 400 | 0 | 0, 16347 | 0, $7_1 + 240 | 0 | 0) | 0;
  $2_1 = $228($1_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 208 | 0) + 16 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 220 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 216 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 212 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 208 | 0) >> 2] = $8_1 + 5 | 0;
  $99($7_1 + 400 | 0 | 0, 16347 | 0, $7_1 + 208 | 0 | 0) | 0;
  $4_1 = $228($2_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 176 | 0) + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 188 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 184 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 176 | 0) >> 2] = $1_1 + 5 | 0;
  $99($7_1 + 400 | 0 | 0, 16465 | 0, $7_1 + 176 | 0 | 0) | 0;
  $6_1 = $228($4_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $5_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 144 | 0) + 16 | 0) >> 2] = 14471;
  HEAP32[($7_1 + 156 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 152 | 0) >> 2] = 14399;
  HEAP32[($7_1 + 148 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $4_1 + -5 | 0;
  $99($7_1 + 400 | 0 | 0, 16582 | 0, $7_1 + 144 | 0 | 0) | 0;
  $6_1 = $228($6_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $5_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 112 | 0) + 16 | 0) >> 2] = 14473;
  HEAP32[($7_1 + 124 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 120 | 0) >> 2] = 14399;
  HEAP32[($7_1 + 116 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 112 | 0) >> 2] = $4_1 + -5 | 0;
  $99($7_1 + 400 | 0 | 0, 15215 | 0, $7_1 + 112 | 0 | 0) | 0;
  $6_1 = $228($6_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$2 = 80120;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$1;
    $5_1 = i64toi32_i32$0;
    $5_1 = i64toi32_i32$0 >> 31 | 0;
    if (((i64toi32_i32$0 + $5_1 | 0) ^ $5_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$2
    }
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = $7_1;
    HEAP32[($7_1 + 96 | 0) >> 2] = $11_1;
    HEAP32[($7_1 + 100 | 0) >> 2] = i64toi32_i32$1;
    $99($7_1 + 664 | 0 | 0, 15335 | 0, $7_1 + 96 | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $17_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $18_1 = 0
      } else {
       $18_1 = 1
      }
      $19_1 = $18_1;
     } else {
      $19_1 = 0
     }
     $17_1 = $19_1;
    }
    if ($17_1) {
     break label$3
    }
    HEAP8[($7_1 + 666 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $20_1 = 0;
    HEAP16[($7_1 + 664 | 0) >> 1] = HEAPU8[($20_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($20_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$1;
   }
   HEAP8[($7_1 + 666 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $21_1 = 0;
   HEAP16[($7_1 + 664 | 0) >> 1] = HEAPU8[($21_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($21_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$3 = 80120;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$1;
    $5_1 = i64toi32_i32$2;
    $5_1 = $5_1 >> 31 | 0;
    if (((i64toi32_i32$2 + $5_1 | 0) ^ $5_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$5
    }
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $7_1;
    HEAP32[($7_1 + 80 | 0) >> 2] = $11_1;
    HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$1;
    $99($7_1 + 656 | 0 | 0, 15335 | 0, $7_1 + 80 | 0 | 0) | 0;
    break label$4;
   }
   label$6 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$6
    }
    HEAP8[($7_1 + 658 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $25_1 = 0;
    HEAP16[($7_1 + 656 | 0) >> 1] = HEAPU8[($25_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($25_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$4;
   }
   HEAP8[($7_1 + 658 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $26_1 = 0;
   HEAP16[($7_1 + 656 | 0) >> 1] = HEAPU8[($26_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($26_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 48 | 0) + 16 | 0) >> 2] = $7_1 + 664 | 0;
  HEAP32[($7_1 + 60 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 56 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $4_1 + -15 | 0;
  HEAP32[($7_1 + 48 | 0) >> 2] = $5_1 + -5 | 0;
  $99($7_1 + 400 | 0 | 0, 16582 | 0, $7_1 + 48 | 0 | 0) | 0;
  $6_1 = $228($6_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $5_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[(($7_1 + 16 | 0) + 16 | 0) >> 2] = $7_1 + 656 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $0_1 + 15 | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1 + -5 | 0;
  $99($7_1 + 400 | 0 | 0, 16582 | 0, $7_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($6_1 | 0, $7_1 + 400 | 0 | 0) | 0;
  $35(16697 | 0, 14 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$7_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $7_1 | 0) | 0;
  global$0 = $7_1 + 672 | 0;
 }
 
 function $239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$3 = 0;
  $2_1 = global$0 - 464 | 0;
  global$0 = $2_1;
  HEAP8[($0_1 + 40 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 400;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 360;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 400;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 80;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 70;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 440;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 360;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 360;
  HEAP32[i64toi32_i32$1 >> 2] = 290;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($2_1 + 160 | 0) + 16 | 0) >> 2] = 14405;
  HEAP32[($2_1 + 180 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $2_1 + 184 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 400;
  HEAP32[($2_1 + 160 | 0) >> 2] = 325;
  HEAP32[($2_1 + 164 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 40;
  HEAP32[($2_1 + 168 | 0) >> 2] = 35;
  HEAP32[($2_1 + 172 | 0) >> 2] = i64toi32_i32$0;
  $100($2_1 + 192 | 0 | 0, 16712 | 0, $2_1 + 160 | 0 | 0) | 0;
  $3_1 = $228($0_1 + 40 | 0 | 0, $2_1 + 192 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[(($2_1 + 128 | 0) + 16 | 0) >> 2] = 14455;
  HEAP32[($2_1 + 140 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 136 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 128 | 0) >> 2] = 325;
  HEAP32[($2_1 + 132 | 0) >> 2] = $4_1 + 15 | 0;
  $99($2_1 + 192 | 0 | 0, 14802 | 0, $2_1 + 128 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 192 | 0 | 0) | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = 14395;
  HEAP32[($2_1 + 108 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 104 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 96 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 100 | 0) >> 2] = i64toi32_i32$1;
  $99($2_1 + 192 | 0 | 0, 15098 | 0, $2_1 + 96 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 192 | 0 | 0) | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$1;
  $5$hi = i64toi32_i32$0;
  HEAP32[(($2_1 + 64 | 0) + 16 | 0) >> 2] = 14395;
  HEAP32[($2_1 + 76 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 72 | 0) >> 2] = $1_1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 64 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  $99($2_1 + 192 | 0 | 0, 15215 | 0, $2_1 + 64 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 192 | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[(79952 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = 80120;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     $4_1 = i64toi32_i32$0;
     $4_1 = i64toi32_i32$0 >> 31 | 0;
     if (((i64toi32_i32$0 + $4_1 | 0) ^ $4_1 | 0) >>> 0 > 9999 >>> 0) {
      break label$3
     }
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 48 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$1;
     $99($2_1 + 458 | 0 | 0, 15335 | 0, $2_1 + 48 | 0 | 0) | 0;
     break label$2;
    }
    label$4 : {
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
      $11_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $12_1 = 0
       } else {
        $12_1 = 1
       }
       $13_1 = $12_1;
      } else {
       $13_1 = 0
      }
      $11_1 = $13_1;
     }
     if ($11_1) {
      break label$4
     }
     HEAP8[($2_1 + 460 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
     $14_1 = 0;
     HEAP16[($2_1 + 458 | 0) >> 1] = HEAPU8[($14_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
     break label$2;
    }
    HEAP8[($2_1 + 460 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
    $15_1 = 0;
    HEAP16[($2_1 + 458 | 0) >> 1] = HEAPU8[($15_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($15_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
   }
   $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = $2_1 + 458 | 0;
   HEAP32[($2_1 + 28 | 0) >> 2] = 15043;
   HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $4_1 + -5 | 0;
   $99($2_1 + 192 | 0 | 0, 16582 | 0, $2_1 + 16 | 0 | 0) | 0;
   $228($3_1 | 0, $2_1 + 192 | 0 | 0) | 0;
  }
  HEAP32[$2_1 >> 2] = $3_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 464 | 0;
 }
 
 function $240($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $12$hi = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 30;
  HEAP32[($0_1 + 16 | 0) >> 2] = 20;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
  $6_1 = $1_1 + 20 | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $6_1;
  $7_1 = $2_1 + -15 | 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = $1_1 + 10 | 0;
  $8_1 = $0_1 + 36 | 0;
  $9_1 = $2_1 + 5 | 0;
  HEAP32[$8_1 >> 2] = $9_1;
  $10_1 = $0_1 + 28 | 0;
  $11_1 = $2_1 + -5 | 0;
  HEAP32[$10_1 >> 2] = $11_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + 15 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
  $2_1 = HEAP32[($3_1 ? $0_1 + 32 | 0 : $0_1 + 24 | 0) >> 2] | 0;
  HEAP8[($0_1 + 56 | 0) >> 0] = 0;
  $3_1 = HEAP32[($3_1 ? $8_1 : $10_1) >> 2] | 0;
  HEAP32[(($5_1 + 48 | 0) + 16 | 0) >> 2] = $6_1;
  HEAP32[(($5_1 + 48 | 0) + 20 | 0) >> 2] = $11_1;
  HEAP32[(($5_1 + 48 | 0) + 24 | 0) >> 2] = $6_1;
  HEAP32[(($5_1 + 48 | 0) + 28 | 0) >> 2] = $9_1;
  i64toi32_i32$1 = ($5_1 + 48 | 0) + 32 | 0;
  i64toi32_i32$0 = 10;
  HEAP32[i64toi32_i32$1 >> 2] = 10;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[(($5_1 + 48 | 0) + 44 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 96 | 0) >> 2] = $1_1;
  HEAP32[(($5_1 + 48 | 0) + 52 | 0) >> 2] = $11_1;
  HEAP32[(($5_1 + 48 | 0) + 56 | 0) >> 2] = 14405;
  HEAP32[($5_1 + 108 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $5_1 + 112 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $11_1;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 10;
  HEAP32[($5_1 + 56 | 0) >> 2] = 10;
  HEAP32[($5_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  $100($5_1 + 128 | 0 | 0, 15731 | 0, $5_1 + 48 | 0 | 0) | 0;
  $1_1 = $228($0_1 + 56 | 0 | 0, $5_1 + 128 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + 24 | 0;
  i64toi32_i32$1 = 1074266112;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(($5_1 + 16 | 0) + 20 | 0) >> 2] = $4_1;
  HEAP32[(($5_1 + 16 | 0) + 16 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 20 | 0) >> 2] = $3_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $12_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $100($5_1 + 128 | 0 | 0, 15875 | 0, $5_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($1_1 | 0, $5_1 + 128 | 0 | 0) | 0;
  $35(16809 | 0, 14 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 384 | 0;
 }
 
 function $241($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  HEAP8[($0_1 + 48 | 0) >> 0] = 0;
  $7_1 = $0_1 + 44 | 0;
  HEAP32[$7_1 >> 2] = 110;
  $8_1 = $1_1 + 40 | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $8_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = 137;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 83;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = 80;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 40;
  HEAP32[i64toi32_i32$1 >> 2] = 150;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 70;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[(($6_1 + 192 | 0) + 16 | 0) >> 2] = $1_1 + 10 | 0;
  HEAP32[($6_1 + 212 | 0) >> 2] = 110;
  HEAP32[($6_1 + 216 | 0) >> 2] = $1_1;
  HEAP32[(($6_1 + 192 | 0) + 28 | 0) >> 2] = 120;
  HEAP32[($6_1 + 224 | 0) >> 2] = $1_1;
  HEAP32[(($6_1 + 192 | 0) + 36 | 0) >> 2] = 150;
  HEAP32[(($6_1 + 192 | 0) + 40 | 0) >> 2] = $8_1;
  HEAP32[(($6_1 + 192 | 0) + 44 | 0) >> 2] = 130;
  HEAP32[(($6_1 + 192 | 0) + 48 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 244 | 0) >> 2] = 90;
  HEAP32[($6_1 + 248 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = 70;
  HEAP32[($6_1 + 256 | 0) >> 2] = 14405;
  HEAP32[($6_1 + 260 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $6_1 + 264 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6_1 + 192 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 196 | 0) >> 2] = 70;
  HEAP32[($6_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 204 | 0) >> 2] = 100;
  $100($6_1 + 272 | 0 | 0, 15471 | 0, $6_1 + 192 | 0 | 0) | 0;
  $8_1 = $228($0_1 + 48 | 0 | 0, $6_1 + 272 | 0 | 0) | 0;
  $7_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[(($6_1 + 160 | 0) + 16 | 0) >> 2] = 14479;
  HEAP32[($6_1 + 172 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 168 | 0) >> 2] = 14399;
  HEAP32[($6_1 + 160 | 0) >> 2] = $1_1 + 25 | 0;
  HEAP32[($6_1 + 164 | 0) >> 2] = $7_1 + 15 | 0;
  $99($6_1 + 272 | 0 | 0, 14920 | 0, $6_1 + 160 | 0 | 0) | 0;
  $1_1 = $228($8_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    $8_1 = $3_1 >> 31 | 0;
    if ((($3_1 + $8_1 | 0) ^ $8_1 | 0) >>> 0 > 99 >>> 0) {
     break label$2
    }
    HEAP32[($6_1 + 144 | 0) >> 2] = $3_1;
    $99($6_1 + 554 | 0 | 0, 15335 | 0, $6_1 + 144 | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$3
    }
    HEAP8[($6_1 + 556 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $11_1 = 0;
    HEAP16[($6_1 + 554 | 0) >> 1] = HEAPU8[($11_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$1;
   }
   HEAP8[($6_1 + 556 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $12_1 = 0;
   HEAP16[($6_1 + 554 | 0) >> 1] = HEAPU8[($12_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$4 : {
   label$5 : {
    $3_1 = $4_1 >> 31 | 0;
    if ((($4_1 + $3_1 | 0) ^ $3_1 | 0) >>> 0 > 99 >>> 0) {
     break label$5
    }
    HEAP32[($6_1 + 128 | 0) >> 2] = $4_1;
    $99($6_1 + 548 | 0 | 0, 15335 | 0, $6_1 + 128 | 0 | 0) | 0;
    break label$4;
   }
   label$6 : {
    if (($4_1 | 0) < (1 | 0)) {
     break label$6
    }
    HEAP8[($6_1 + 550 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $13_1 = 0;
    HEAP16[($6_1 + 548 | 0) >> 1] = HEAPU8[($13_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$4;
   }
   HEAP8[($6_1 + 550 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $14_1 = 0;
   HEAP16[($6_1 + 548 | 0) >> 1] = HEAPU8[($14_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$7 : {
   label$8 : {
    $4_1 = $5_1 >> 31 | 0;
    if ((($5_1 + $4_1 | 0) ^ $4_1 | 0) >>> 0 > 99 >>> 0) {
     break label$8
    }
    HEAP32[($6_1 + 112 | 0) >> 2] = $5_1;
    $99($6_1 + 542 | 0 | 0, 15335 | 0, $6_1 + 112 | 0 | 0) | 0;
    break label$7;
   }
   label$9 : {
    if (($5_1 | 0) < (1 | 0)) {
     break label$9
    }
    HEAP8[($6_1 + 544 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $15_1 = 0;
    HEAP16[($6_1 + 542 | 0) >> 1] = HEAPU8[($15_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($15_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$7;
   }
   HEAP8[($6_1 + 544 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $16_1 = 0;
   HEAP16[($6_1 + 542 | 0) >> 1] = HEAPU8[($16_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[(($6_1 + 80 | 0) + 16 | 0) >> 2] = $6_1 + 554 | 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 88 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $5_1 + 15 | 0;
  HEAP32[($6_1 + 80 | 0) >> 2] = $4_1 + 5 | 0;
  $99($6_1 + 272 | 0 | 0, 15595 | 0, $6_1 + 80 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[(($6_1 + 48 | 0) + 16 | 0) >> 2] = $6_1 + 548 | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $4_1 + 5 | 0;
  $99($6_1 + 272 | 0 | 0, 15595 | 0, $6_1 + 48 | 0 | 0) | 0;
  $1_1 = $228($1_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[(($6_1 + 16 | 0) + 16 | 0) >> 2] = $6_1 + 542 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $4_1 + -5 | 0;
  $99($6_1 + 272 | 0 | 0, 15215 | 0, $6_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($1_1 | 0, $6_1 + 272 | 0 | 0) | 0;
  $35(15717 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $6_1 | 0) | 0;
  global$0 = $6_1 + 560 | 0;
 }
 
 function $242($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = HEAP32[$0_1 >> 2] | 0;
  $35(15976 | 0, 33 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $8_1 = $7_1 + 10 | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $8_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $9_1 = $7_1 + -50 | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $3_1;
  $2_1 = $6_1 + -20 | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 68 | 0) >> 2] = $4_1;
  i64toi32_i32$1 = $5_1 + 72 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1073217536;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $8_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  $65(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 16824 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 80 | 0;
 }
 
 function $243($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $6_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $242_1 = 0, $258_1 = 0;
  $5_1 = global$0 - 592 | 0;
  global$0 = $5_1;
  HEAP8[($0_1 + 48 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 285;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 640;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 325;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 590;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 245;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 590;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 120;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 50;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 345;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 640;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 225;
  HEAP32[i64toi32_i32$1 >> 2] = 590;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 224 | 0) + 16 | 0;
  i64toi32_i32$0 = 285;
  HEAP32[i64toi32_i32$1 >> 2] = 602;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 248 | 0;
  i64toi32_i32$0 = 300;
  HEAP32[i64toi32_i32$1 >> 2] = 590;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 256 | 0;
  i64toi32_i32$0 = 345;
  HEAP32[i64toi32_i32$1 >> 2] = 590;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 264 | 0;
  i64toi32_i32$0 = 315;
  HEAP32[i64toi32_i32$1 >> 2] = 640;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 224 | 0) + 48 | 0;
  i64toi32_i32$0 = 255;
  HEAP32[i64toi32_i32$1 >> 2] = 640;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 280 | 0;
  i64toi32_i32$0 = 225;
  HEAP32[i64toi32_i32$1 >> 2] = 590;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5_1 + 288 | 0) >> 2] = 14405;
  HEAP32[($5_1 + 292 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $5_1 + 296 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 225;
  HEAP32[($5_1 + 224 | 0) >> 2] = 590;
  HEAP32[($5_1 + 228 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 270;
  HEAP32[($5_1 + 232 | 0) >> 2] = 590;
  HEAP32[($5_1 + 236 | 0) >> 2] = i64toi32_i32$0;
  $100($5_1 + 304 | 0 | 0, 15471 | 0, $5_1 + 224 | 0 | 0) | 0;
  $6_1 = $228($0_1 + 48 | 0 | 0, $5_1 + 304 | 0 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[(($5_1 + 192 | 0) + 16 | 0) >> 2] = 14483;
  HEAP32[($5_1 + 204 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 200 | 0) >> 2] = 14399;
  HEAP32[($5_1 + 192 | 0) >> 2] = 620;
  HEAP32[($5_1 + 196 | 0) >> 2] = $7_1 + 15 | 0;
  $99($5_1 + 304 | 0 | 0, 14920 | 0, $5_1 + 192 | 0 | 0) | 0;
  $6_1 = $228($6_1 | 0, $5_1 + 304 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    $7_1 = $2_1 >> 31 | 0;
    if ((($2_1 + $7_1 | 0) ^ $7_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$2
    }
    HEAP32[($5_1 + 176 | 0) >> 2] = $2_1;
    $99($5_1 + 586 | 0 | 0, 15335 | 0, $5_1 + 176 | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$3
    }
    HEAP8[($5_1 + 588 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $17_1 = 0;
    HEAP16[($5_1 + 586 | 0) >> 1] = HEAPU8[($17_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($17_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$1;
   }
   HEAP8[($5_1 + 588 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $18_1 = 0;
   HEAP16[($5_1 + 586 | 0) >> 1] = HEAPU8[($18_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($18_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$4 : {
   label$5 : {
    $2_1 = $3_1 >> 31 | 0;
    if ((($3_1 + $2_1 | 0) ^ $2_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$5
    }
    HEAP32[($5_1 + 160 | 0) >> 2] = $3_1;
    $99($5_1 + 580 | 0 | 0, 15335 | 0, $5_1 + 160 | 0 | 0) | 0;
    break label$4;
   }
   label$6 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$6
    }
    HEAP8[($5_1 + 582 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $19_1 = 0;
    HEAP16[($5_1 + 580 | 0) >> 1] = HEAPU8[($19_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($19_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$4;
   }
   HEAP8[($5_1 + 582 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $20_1 = 0;
   HEAP16[($5_1 + 580 | 0) >> 1] = HEAPU8[($20_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($20_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$7 : {
   label$8 : {
    $3_1 = $4_1 >> 31 | 0;
    if ((($4_1 + $3_1 | 0) ^ $3_1 | 0) >>> 0 > 9999 >>> 0) {
     break label$8
    }
    HEAP32[($5_1 + 144 | 0) >> 2] = $4_1;
    $99($5_1 + 574 | 0 | 0, 15335 | 0, $5_1 + 144 | 0 | 0) | 0;
    break label$7;
   }
   label$9 : {
    if (($4_1 | 0) < (1 | 0)) {
     break label$9
    }
    HEAP8[($5_1 + 576 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
    $21_1 = 0;
    HEAP16[($5_1 + 574 | 0) >> 1] = HEAPU8[($21_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($21_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
    break label$7;
   }
   HEAP8[($5_1 + 576 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
   $22_1 = 0;
   HEAP16[($5_1 + 574 | 0) >> 1] = HEAPU8[($22_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($22_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[(($5_1 + 112 | 0) + 16 | 0) >> 2] = $5_1 + 586 | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 116 | 0) >> 2] = $4_1 + 15 | 0;
  HEAP32[($5_1 + 112 | 0) >> 2] = $3_1 + 5 | 0;
  $99($5_1 + 304 | 0 | 0, 15595 | 0, $5_1 + 112 | 0 | 0) | 0;
  $3_1 = $228($6_1 | 0, $5_1 + 304 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[(($5_1 + 80 | 0) + 16 | 0) >> 2] = $5_1 + 580 | 0;
  HEAP32[($5_1 + 92 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = $2_1 + -10 | 0;
  HEAP32[($5_1 + 80 | 0) >> 2] = $4_1 + 5 | 0;
  $99($5_1 + 304 | 0 | 0, 15595 | 0, $5_1 + 80 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $5_1 + 304 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[(($5_1 + 48 | 0) + 16 | 0) >> 2] = $5_1 + 574 | 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $4_1 + -5 | 0;
  $99($5_1 + 304 | 0 | 0, 15215 | 0, $5_1 + 48 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $5_1 + 304 | 0 | 0) | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      $4_1 = HEAPU8[(0 + 80312 | 0) >> 0] | 0;
      switch ($4_1 + -10 | 0 | 0) {
      case 5:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
       break label$11;
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 7:
      case 8:
      case 54:
      case 55:
      case 118:
      case 119:
      case 131:
      case 132:
       break label$12;
      default:
       break label$13;
      };
     }
     if (($4_1 + -180 | 0) >>> 0 >= 2 >>> 0) {
      break label$11
     }
    }
    HEAP8[($5_1 + 568 | 0) >> 0] = HEAPU8[(0 + 16950 | 0) >> 0] | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 16942 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 16943 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 16944 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16945 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 16946 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 16947 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 16948 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16949 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $242_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 560 | 0) >> 2] = $242_1;
    HEAP32[($5_1 + 564 | 0) >> 2] = i64toi32_i32$1;
    break label$10;
   }
   label$14 : {
    $2_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
    if ($2_1 >>> 0 > 7 >>> 0) {
     break label$14
    }
    if (!((1 << $2_1 | 0) & 219 | 0)) {
     break label$14
    }
    if ((($4_1 + -100 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
     break label$14
    }
    $13_1 = 0;
    HEAP32[($5_1 + 568 | 0) >> 2] = HEAPU8[($13_1 + 16959 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 16960 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 16961 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 16962 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 16951 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 16952 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 16953 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16954 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 16955 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 16956 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 16957 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16958 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $258_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 560 | 0) >> 2] = $258_1;
    HEAP32[($5_1 + 564 | 0) >> 2] = i64toi32_i32$0;
    break label$10;
   }
   $14_1 = 0;
   $15_1 = HEAPU8[($14_1 + 16966 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 16967 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 16968 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 16969 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($5_1 + 563 | 0) >> 0] = $15_1;
   HEAP8[($5_1 + 564 | 0) >> 0] = $15_1 >>> 8 | 0;
   HEAP8[($5_1 + 565 | 0) >> 0] = $15_1 >>> 16 | 0;
   HEAP8[($5_1 + 566 | 0) >> 0] = $15_1 >>> 24 | 0;
   $16_1 = 0;
   HEAP32[($5_1 + 560 | 0) >> 2] = HEAPU8[($16_1 + 16963 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 16964 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 16965 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 16966 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  }
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $5_1 + 560 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1 + -5 | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $4_1 + -10 | 0;
  $99($5_1 + 304 | 0 | 0, 15595 | 0, $5_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($3_1 | 0, $5_1 + 304 | 0 | 0) | 0;
  $35(15717 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 592 | 0;
 }
 
 function $244($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $11_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $12$hi = 0;
  $4_1 = global$0 - 384 | 0;
  global$0 = $4_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = 570;
  HEAP32[($0_1 + 56 | 0) >> 2] = 560;
  HEAP32[($0_1 + 48 | 0) >> 2] = 550;
  HEAP32[($0_1 + 40 | 0) >> 2] = 550;
  HEAP32[($0_1 + 32 | 0) >> 2] = 550;
  HEAP32[($0_1 + 24 | 0) >> 2] = 550;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 50;
  HEAP32[($0_1 + 16 | 0) >> 2] = 20;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 570;
  HEAP32[$0_1 >> 2] = 550;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
  $5_1 = $1_1 + -25 | 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = $5_1;
  $6_1 = $0_1 + 52 | 0;
  $7_1 = $1_1 + 15 | 0;
  HEAP32[$6_1 >> 2] = $7_1;
  $8_1 = $0_1 + 44 | 0;
  HEAP32[$8_1 >> 2] = $1_1 + 5 | 0;
  $9_1 = $0_1 + 36 | 0;
  HEAP32[$9_1 >> 2] = $1_1 + -5 | 0;
  $10_1 = $0_1 + 28 | 0;
  $11_1 = $1_1 + -15 | 0;
  HEAP32[$10_1 >> 2] = $11_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 25 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
  $1_1 = $0_1 + 24 | 0;
  label$1 : {
   label$2 : {
    switch ($2_1 | 0) {
    case 1:
     $1_1 = $0_1 + 32 | 0;
     $10_1 = $9_1;
     break label$1;
    case 2:
     $1_1 = $0_1 + 40 | 0;
     $10_1 = $8_1;
     break label$1;
    case 0:
     break label$1;
    default:
     break label$2;
    };
   }
   $1_1 = $0_1 + 48 | 0;
   $10_1 = $6_1;
  }
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  $10_1 = HEAP32[$10_1 >> 2] | 0;
  HEAP8[($0_1 + 72 | 0) >> 0] = 0;
  HEAP32[(($4_1 + 48 | 0) + 20 | 0) >> 2] = $11_1;
  HEAP32[(($4_1 + 48 | 0) + 24 | 0) >> 2] = 570;
  HEAP32[(($4_1 + 48 | 0) + 28 | 0) >> 2] = $7_1;
  HEAP32[(($4_1 + 48 | 0) + 32 | 0) >> 2] = 10;
  i64toi32_i32$1 = ($4_1 + 48 | 0) + 36 | 0;
  i64toi32_i32$0 = 550;
  HEAP32[i64toi32_i32$1 >> 2] = 10;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($4_1 + 48 | 0) + 44 | 0) >> 2] = $7_1;
  HEAP32[(($4_1 + 48 | 0) + 48 | 0) >> 2] = 550;
  HEAP32[(($4_1 + 48 | 0) + 52 | 0) >> 2] = $11_1;
  HEAP32[($4_1 + 104 | 0) >> 2] = 14405;
  HEAP32[(($4_1 + 48 | 0) + 60 | 0) >> 2] = 14399;
  i64toi32_i32$1 = $4_1 + 112 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 48 | 0) >> 2] = 550;
  HEAP32[($4_1 + 52 | 0) >> 2] = $11_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = 10;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 570;
  HEAP32[($4_1 + 60 | 0) >> 2] = 10;
  HEAP32[($4_1 + 64 | 0) >> 2] = i64toi32_i32$0;
  $100($4_1 + 128 | 0 | 0, 15731 | 0, $4_1 + 48 | 0 | 0) | 0;
  $11_1 = $228($0_1 + 72 | 0 | 0, $4_1 + 128 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = ($4_1 + 16 | 0) + 24 | 0;
  i64toi32_i32$1 = 1074266112;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(($4_1 + 16 | 0) + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = 15043;
  HEAP32[($4_1 + 20 | 0) >> 2] = $10_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $12_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $100($4_1 + 128 | 0 | 0, 15875 | 0, $4_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($11_1 | 0, $4_1 + 128 | 0 | 0) | 0;
  $35(16970 | 0, 14 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 384 | 0;
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $6$hi = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $15_1 = 0, $21_1 = 0, $27_1 = 0, $33_1 = 0;
  $2_1 = global$0 - 912 | 0;
  global$0 = $2_1;
  $18_1 = 0;
  HEAP16[(($2_1 + 704 | 0) + 8 | 0) >> 1] = HEAPU8[($18_1 + 16993 | 0) >> 0] | 0 | ((HEAPU8[($18_1 + 16994 | 0) >> 0] | 0) << 8 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 16985 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 16986 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 16987 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16988 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 16989 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 16990 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 16991 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16992 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 704 | 0) >> 2] = $15_1;
  HEAP32[($2_1 + 708 | 0) >> 2] = i64toi32_i32$1;
  $19_1 = 0;
  HEAP16[(($2_1 + 688 | 0) + 8 | 0) >> 1] = HEAPU8[($19_1 + 17003 | 0) >> 0] | 0 | ((HEAPU8[($19_1 + 17004 | 0) >> 0] | 0) << 8 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 16995 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 16996 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 16997 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16998 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 16999 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 17e3 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 17001 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 17002 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $21_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 688 | 0) >> 2] = $21_1;
  HEAP32[($2_1 + 692 | 0) >> 2] = i64toi32_i32$0;
  $20_1 = 0;
  HEAP16[(($2_1 + 672 | 0) + 8 | 0) >> 1] = HEAPU8[($20_1 + 17013 | 0) >> 0] | 0 | ((HEAPU8[($20_1 + 17014 | 0) >> 0] | 0) << 8 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 17005 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 17006 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 17007 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 17008 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 17009 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 17010 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 17011 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 17012 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $27_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 672 | 0) >> 2] = $27_1;
  HEAP32[($2_1 + 676 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 0;
  HEAP16[(($2_1 + 656 | 0) + 8 | 0) >> 1] = HEAPU8[($22_1 + 17023 | 0) >> 0] | 0 | ((HEAPU8[($22_1 + 17024 | 0) >> 0] | 0) << 8 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 17015 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 17016 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 17017 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 17018 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 17019 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 17020 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 17021 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 17022 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $33_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 656 | 0) >> 2] = $33_1;
  HEAP32[($2_1 + 660 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 48 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 275;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 860;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 300;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 760;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 250;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 760;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 100;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 100;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 325;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 860;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 225;
  HEAP32[i64toi32_i32$1 >> 2] = 760;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($2_1 + 320 | 0) + 16 | 0;
  i64toi32_i32$0 = 325;
  HEAP32[i64toi32_i32$1 >> 2] = 860;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 344 | 0;
  i64toi32_i32$0 = 225;
  HEAP32[i64toi32_i32$1 >> 2] = 860;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 352 | 0;
  i64toi32_i32$0 = 225;
  HEAP32[i64toi32_i32$1 >> 2] = 760;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 360 | 0) >> 2] = 14405;
  HEAP32[(($2_1 + 320 | 0) + 44 | 0) >> 2] = 14399;
  i64toi32_i32$1 = ($2_1 + 320 | 0) + 48 | 0;
  i64toi32_i32$0 = 1073217536;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 225;
  HEAP32[($2_1 + 320 | 0) >> 2] = 760;
  HEAP32[($2_1 + 324 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 325;
  HEAP32[($2_1 + 328 | 0) >> 2] = 760;
  HEAP32[($2_1 + 332 | 0) >> 2] = i64toi32_i32$0;
  $100($2_1 + 384 | 0 | 0, 14696 | 0, $2_1 + 320 | 0 | 0) | 0;
  $3_1 = $228($0_1 + 48 | 0 | 0, $2_1 + 384 | 0 | 0) | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 312;
  HEAP32[($2_1 + 288 | 0) >> 2] = 810;
  HEAP32[($2_1 + 292 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 296 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 300 | 0) >> 2] = 15043;
  HEAP32[(($2_1 + 288 | 0) + 16 | 0) >> 2] = $2_1 + 704 | 0;
  $99($2_1 + 384 | 0 | 0, 14802 | 0, $2_1 + 288 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[(($2_1 + 256 | 0) + 16 | 0) >> 2] = $2_1 + 688 | 0;
  HEAP32[($2_1 + 268 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 264 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 260 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 256 | 0) >> 2] = $5_1 + 5 | 0;
  $99($2_1 + 384 | 0 | 0, 15098 | 0, $2_1 + 256 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[(($2_1 + 224 | 0) + 16 | 0) >> 2] = $2_1 + 672 | 0;
  HEAP32[($2_1 + 236 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 232 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 228 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 224 | 0) >> 2] = $5_1 + 5 | 0;
  $99($2_1 + 384 | 0 | 0, 15098 | 0, $2_1 + 224 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[(($2_1 + 192 | 0) + 16 | 0) >> 2] = $2_1 + 656 | 0;
  HEAP32[($2_1 + 204 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 200 | 0) >> 2] = 14399;
  HEAP32[($2_1 + 196 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 192 | 0) >> 2] = $5_1 + -5 | 0;
  $99($2_1 + 384 | 0 | 0, 15215 | 0, $2_1 + 192 | 0 | 0) | 0;
  $3_1 = $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
     switch ($4_1 + -10 | 0 | 0) {
     case 5:
     case 9:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 23:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 31:
     case 32:
     case 33:
     case 34:
     case 35:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 49:
     case 50:
     case 51:
     case 52:
     case 53:
     case 56:
     case 57:
     case 58:
     case 59:
     case 60:
     case 61:
     case 62:
     case 63:
     case 64:
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 71:
     case 72:
     case 73:
     case 74:
     case 75:
     case 76:
     case 77:
     case 78:
     case 79:
     case 80:
     case 81:
     case 82:
     case 83:
     case 84:
     case 85:
     case 86:
     case 87:
     case 88:
     case 89:
     case 90:
     case 91:
     case 92:
     case 93:
     case 94:
     case 95:
     case 96:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
     case 103:
     case 104:
     case 105:
     case 106:
     case 107:
     case 108:
     case 109:
     case 110:
     case 111:
     case 112:
     case 113:
     case 114:
     case 115:
     case 116:
     case 117:
     case 120:
     case 121:
     case 122:
     case 123:
     case 124:
     case 125:
     case 126:
     case 127:
     case 128:
     case 129:
     case 130:
      break label$1;
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
     case 6:
     case 7:
     case 8:
     case 54:
     case 55:
     case 118:
     case 119:
     case 131:
     case 132:
      break label$2;
     default:
      break label$3;
     };
    }
    if (($4_1 + -180 | 0) >>> 0 >= 2 >>> 0) {
     break label$1
    }
   }
   label$4 : {
    label$5 : {
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 83336 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 83340 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     $4_1 = i64toi32_i32$0;
     $4_1 = i64toi32_i32$0 >> 31 | 0;
     if (((i64toi32_i32$0 + $4_1 | 0) ^ $4_1 | 0) >>> 0 > 9999 >>> 0) {
      break label$5
     }
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 176 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$1;
     $99($2_1 + 848 | 0 | 0, 15335 | 0, $2_1 + 176 | 0 | 0) | 0;
     break label$4;
    }
    label$6 : {
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$6
     }
     HEAP8[($2_1 + 850 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
     $26_1 = 0;
     HEAP16[($2_1 + 848 | 0) >> 1] = HEAPU8[($26_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($26_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
     break label$4;
    }
    HEAP8[($2_1 + 850 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
    $28_1 = 0;
    HEAP16[($2_1 + 848 | 0) >> 1] = HEAPU8[($28_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($28_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   HEAP32[($2_1 + 160 | 0) >> 2] = $2_1 + 848 | 0;
   HEAP32[($2_1 + 156 | 0) >> 2] = 15043;
   HEAP32[($2_1 + 152 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 148 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 144 | 0) >> 2] = $4_1 + 25 | 0;
   $99($2_1 + 384 | 0 | 0, 15098 | 0, $2_1 + 144 | 0 | 0) | 0;
   $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
     switch ($4_1 + -10 | 0 | 0) {
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 23:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 31:
     case 32:
     case 33:
     case 34:
     case 35:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 49:
     case 50:
     case 51:
     case 52:
     case 53:
      break label$7;
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
     case 54:
      break label$8;
     default:
      break label$9;
     };
    }
    label$10 : {
     switch ($4_1 + -128 | 0 | 0) {
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
      break label$7;
     case 0:
     case 13:
      break label$8;
     default:
      break label$10;
     };
    }
    if (($4_1 | 0) != (180 | 0)) {
     break label$7
    }
   }
   HEAP8[($2_1 + 648 | 0) >> 0] = HEAPU8[(0 + 17029 | 0) >> 0] | 0;
   $16_1 = 0;
   HEAP32[($2_1 + 644 | 0) >> 2] = HEAPU8[($16_1 + 17025 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 17026 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 17027 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 17028 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   label$11 : {
    label$12 : {
     i64toi32_i32$3 = 80872;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$2;
     $6$hi = i64toi32_i32$1;
     $4_1 = i64toi32_i32$2;
     $4_1 = i64toi32_i32$2 >> 31 | 0;
     if (((i64toi32_i32$2 + $4_1 | 0) ^ $4_1 | 0) >>> 0 > 9999 >>> 0) {
      break label$12
     }
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$2 = $2_1;
     HEAP32[($2_1 + 128 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 132 | 0) >> 2] = i64toi32_i32$1;
     $99($2_1 + 720 | 0 | 0, 15335 | 0, $2_1 + 128 | 0 | 0) | 0;
     break label$11;
    }
    label$13 : {
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $29_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $30_1 = 0
       } else {
        $30_1 = 1
       }
       $31_1 = $30_1;
      } else {
       $31_1 = 0
      }
      $29_1 = $31_1;
     }
     if ($29_1) {
      break label$13
     }
     HEAP8[($2_1 + 722 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
     $32_1 = 0;
     HEAP16[($2_1 + 720 | 0) >> 1] = HEAPU8[($32_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($32_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
     break label$11;
    }
    HEAP8[($2_1 + 722 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
    $34_1 = 0;
    HEAP16[($2_1 + 720 | 0) >> 1] = HEAPU8[($34_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($34_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
   }
   $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($2_1 + 112 | 0) >> 2] = $2_1 + 720 | 0;
   HEAP32[($2_1 + 108 | 0) >> 2] = 15043;
   HEAP32[($2_1 + 104 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 100 | 0) >> 2] = $5_1 + 15 | 0;
   HEAP32[($2_1 + 96 | 0) >> 2] = $4_1 + -5 | 0;
   $99($2_1 + 384 | 0 | 0, 16582 | 0, $2_1 + 96 | 0 | 0) | 0;
   $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  }
  label$14 : {
   label$15 : {
    label$16 : {
     $4_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
     if (($4_1 | 0) > (128 | 0)) {
      break label$16
     }
     if (($4_1 + -16 | 0) >>> 0 < 3 >>> 0) {
      break label$15
     }
     if (($4_1 | 0) == (65 | 0)) {
      break label$15
     }
     break label$14;
    }
    label$17 : {
     switch ($4_1 + -129 | 0 | 0) {
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
      break label$14;
     case 0:
     case 13:
      break label$15;
     default:
      break label$17;
     };
    }
    if (($4_1 | 0) != (181 | 0)) {
     break label$14
    }
   }
   $35_1 = 0;
   HEAP16[($2_1 + 648 | 0) >> 1] = HEAPU8[($35_1 + 17034 | 0) >> 0] | 0 | ((HEAPU8[($35_1 + 17035 | 0) >> 0] | 0) << 8 | 0) | 0;
   $17_1 = 0;
   HEAP32[($2_1 + 644 | 0) >> 2] = HEAPU8[($17_1 + 17030 | 0) >> 0] | 0 | ((HEAPU8[($17_1 + 17031 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($17_1 + 17032 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($17_1 + 17033 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   label$18 : {
    label$19 : {
     i64toi32_i32$0 = 80688;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$3;
     $6$hi = i64toi32_i32$1;
     $4_1 = i64toi32_i32$3;
     $4_1 = $4_1 >> 31 | 0;
     if (((i64toi32_i32$3 + $4_1 | 0) ^ $4_1 | 0) >>> 0 > 9999 >>> 0) {
      break label$19
     }
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$3 = $2_1;
     HEAP32[($2_1 + 80 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 84 | 0) >> 2] = i64toi32_i32$1;
     $99($2_1 + 784 | 0 | 0, 15335 | 0, $2_1 + 80 | 0 | 0) | 0;
     break label$18;
    }
    label$20 : {
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
      $36_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $37_1 = 0
       } else {
        $37_1 = 1
       }
       $38_1 = $37_1;
      } else {
       $38_1 = 0
      }
      $36_1 = $38_1;
     }
     if ($36_1) {
      break label$20
     }
     HEAP8[($2_1 + 786 | 0) >> 0] = HEAPU8[(0 + 15340 | 0) >> 0] | 0;
     $39_1 = 0;
     HEAP16[($2_1 + 784 | 0) >> 1] = HEAPU8[($39_1 + 15338 | 0) >> 0] | 0 | ((HEAPU8[($39_1 + 15339 | 0) >> 0] | 0) << 8 | 0) | 0;
     break label$18;
    }
    HEAP8[($2_1 + 786 | 0) >> 0] = HEAPU8[(0 + 15343 | 0) >> 0] | 0;
    $40_1 = 0;
    HEAP16[($2_1 + 784 | 0) >> 1] = HEAPU8[($40_1 + 15341 | 0) >> 0] | 0 | ((HEAPU8[($40_1 + 15342 | 0) >> 0] | 0) << 8 | 0) | 0;
   }
   $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   HEAP32[($2_1 + 64 | 0) >> 2] = $2_1 + 784 | 0;
   HEAP32[($2_1 + 60 | 0) >> 2] = 15043;
   HEAP32[($2_1 + 56 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 52 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 48 | 0) >> 2] = $4_1 + 25 | 0;
   $99($2_1 + 384 | 0 | 0, 15098 | 0, $2_1 + 48 | 0 | 0) | 0;
   $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $2_1 + 644 | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 15043;
  HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = $4_1 + -5 | 0;
  $99($2_1 + 384 | 0 | 0, 15595 | 0, $2_1 + 16 | 0 | 0) | 0;
  $0_1 = $228($3_1 | 0, $2_1 + 384 | 0 | 0) | 0;
  $35(15344 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 15064 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 912 | 0;
 }
 
 function $246() {
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  HEAP16[(79784 + 12 | 0) >> 1] = 0;
  HEAP32[(79784 + 4 | 0) >> 2] = 0;
  HEAP32[(79784 + 160 | 0) >> 2] = -1;
  i64toi32_i32$1 = 79784;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = -1;
  $1_1 = 79784 + 7 | 0;
  $2_1 = 0;
  HEAP8[$1_1 >> 0] = $2_1;
  HEAP8[($1_1 + 1 | 0) >> 0] = $2_1 >>> 8 | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = $2_1 >>> 16 | 0;
  HEAP8[($1_1 + 3 | 0) >> 0] = $2_1 >>> 24 | 0;
  HEAP8[(0 + 79784 | 0) >> 0] = 0;
 }
 
 function $247() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  HEAP16[(80120 + 12 | 0) >> 1] = 0;
  HEAP32[(80120 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = 80120;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(80120 + 184 | 0) >> 2] = -1;
  i64toi32_i32$1 = 80120;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 80120 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  i64toi32_i32$1 = 80120 + 160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 80120 + 168 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 77796 | 0) >> 2] = (HEAP32[(0 + 77796 | 0) >> 2] | 0) & -5 | 0;
  HEAP8[(0 + 80120 | 0) >> 0] = 0;
 }
 
 function $248() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  HEAP16[(80504 + 12 | 0) >> 1] = 0;
  HEAP32[(80504 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = 80504;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(80504 + 176 | 0) >> 2] = -1;
  i64toi32_i32$1 = 80504;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 80504 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  i64toi32_i32$1 = 80504 + 152 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(80504 + 160 | 0) >> 2] = 0;
  HEAP32[(0 + 77796 | 0) >> 2] = (HEAP32[(0 + 77796 | 0) >> 2] | 0) & -3 | 0;
  HEAP8[(0 + 80504 | 0) >> 0] = 0;
 }
 
 function $249() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  HEAP16[(80872 + 12 | 0) >> 1] = 0;
  HEAP32[(80872 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = 80872;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(80872 + 168 | 0) >> 2] = -1;
  i64toi32_i32$1 = 80872;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 80872 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  i64toi32_i32$1 = 80872 + 152 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(0 + 80872 | 0) >> 0] = 0;
 }
 
 function $250() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  HEAP16[(81784 + 12 | 0) >> 1] = 0;
  HEAP32[(81784 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = 81784;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(81784 + 200 | 0) >> 2] = -1;
  i64toi32_i32$1 = 81784;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 81784 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  i64toi32_i32$1 = 81784 + 160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(0 + 81784 | 0) >> 0] = 0;
 }
 
 function $251() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  HEAP16[(81992 + 12 | 0) >> 1] = 0;
  HEAP32[(81992 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = 81992;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(81992 + 200 | 0) >> 2] = -1;
  i64toi32_i32$1 = 81992;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 81992 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  i64toi32_i32$1 = 81992 + 160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(0 + 81992 | 0) >> 0] = 0;
 }
 
 function $252() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  HEAP16[(82408 + 12 | 0) >> 1] = 0;
  HEAP32[(82408 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = 82408;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(82408 + 200 | 0) >> 2] = -1;
  i64toi32_i32$1 = 82408;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 82408 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  i64toi32_i32$1 = 82408 + 160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(0 + 82408 | 0) >> 0] = 0;
 }
 
 function $253() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  HEAP16[(82824 + 12 | 0) >> 1] = 0;
  HEAP32[(82824 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = 82824;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(82824 + 200 | 0) >> 2] = -1;
  i64toi32_i32$1 = 82824;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 82824 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  i64toi32_i32$1 = 82824 + 160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(0 + 82824 | 0) >> 0] = 0;
 }
 
 function $254() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0, $1_1 = 0;
  HEAP8[(85360 + 400 | 0) >> 0] = 0;
  i64toi32_i32$1 = 85360 + 552 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(85360 + 408 | 0) >> 1] = 0;
  HEAP32[(85360 + 404 | 0) >> 2] = 0;
  i64toi32_i32$1 = 85360 + 560 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 85360 + 568 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 85360 + 576 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $0_1 = 85360 + 410 | 0;
   $1_1 = 78672 + ((HEAPU8[$0_1 >> 0] | 0) << 4 | 0) | 0;
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (((HEAP32[(0 + 78356 | 0) >> 2] | 0) + (HEAP32[(0 + 32096 | 0) >> 2] | 0) | 0) + -2 | 0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  }
  HEAP32[(85360 + 592 | 0) >> 2] = -1;
  i64toi32_i32$1 = 85360 + 584 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(85360 + 412 | 0) >> 1] = 0;
  HEAP8[$0_1 >> 0] = 0;
 }
 
 function $255() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0, $1_1 = 0;
  HEAP8[(89360 + 400 | 0) >> 0] = 0;
  i64toi32_i32$1 = 89360 + 552 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(89360 + 408 | 0) >> 1] = 0;
  HEAP32[(89360 + 404 | 0) >> 2] = 0;
  i64toi32_i32$1 = 89360 + 560 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 89360 + 568 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 89360 + 576 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $0_1 = 89360 + 410 | 0;
   $1_1 = 78672 + ((HEAPU8[$0_1 >> 0] | 0) << 4 | 0) | 0;
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (((HEAP32[(0 + 78356 | 0) >> 2] | 0) + (HEAP32[(0 + 32084 | 0) >> 2] | 0) | 0) + -2 | 0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  }
  HEAP32[(89360 + 592 | 0) >> 2] = -1;
  i64toi32_i32$1 = 89360 + 584 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(89360 + 412 | 0) >> 1] = 0;
  HEAP8[$0_1 >> 0] = 0;
 }
 
 function $256() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0, $1_1 = 0;
  HEAP8[(93360 + 400 | 0) >> 0] = 0;
  i64toi32_i32$1 = 93360 + 552 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(93360 + 408 | 0) >> 1] = 0;
  HEAP32[(93360 + 404 | 0) >> 2] = 0;
  i64toi32_i32$1 = 93360 + 560 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 93360 + 568 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 93360 + 576 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $0_1 = 93360 + 410 | 0;
   $1_1 = 78672 + ((HEAPU8[$0_1 >> 0] | 0) << 4 | 0) | 0;
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (((HEAP32[(0 + 78356 | 0) >> 2] | 0) + (HEAP32[(0 + 32088 | 0) >> 2] | 0) | 0) + -2 | 0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  }
  HEAP32[(93360 + 592 | 0) >> 2] = -1;
  i64toi32_i32$1 = 93360 + 584 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(93360 + 412 | 0) >> 1] = 0;
  HEAP8[$0_1 >> 0] = 0;
 }
 
 function $257() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0, $1_1 = 0;
  HEAP8[(97360 + 400 | 0) >> 0] = 0;
  i64toi32_i32$1 = 97360 + 552 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(97360 + 408 | 0) >> 1] = 0;
  HEAP32[(97360 + 404 | 0) >> 2] = 0;
  i64toi32_i32$1 = 97360 + 560 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 97360 + 568 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 97360 + 576 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $0_1 = 97360 + 410 | 0;
   $1_1 = 78672 + ((HEAPU8[$0_1 >> 0] | 0) << 4 | 0) | 0;
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (((HEAP32[(0 + 78356 | 0) >> 2] | 0) + (HEAP32[(0 + 32092 | 0) >> 2] | 0) | 0) + -2 | 0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  }
  HEAP32[(97360 + 592 | 0) >> 2] = -1;
  i64toi32_i32$1 = 97360 + 584 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(97360 + 412 | 0) >> 1] = 0;
  HEAP8[$0_1 >> 0] = 0;
 }
 
 function $258() {
  var i64toi32_i32$1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0;
  HEAP16[(100704 + 12 | 0) >> 1] = 0;
  i64toi32_i32$1 = 100704;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(100704 + 4 | 0) >> 2] = 0;
  HEAP32[(100704 + 160 | 0) >> 2] = -1;
  i64toi32_i32$1 = 100704;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 100704 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  HEAP8[(0 + 100704 | 0) >> 0] = 0;
 }
 
 function $259() {
  var i64toi32_i32$1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0;
  HEAP16[(99360 + 12 | 0) >> 1] = 0;
  i64toi32_i32$1 = 99360;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(99360 + 4 | 0) >> 2] = 0;
  HEAP32[(99360 + 160 | 0) >> 2] = -1;
  i64toi32_i32$1 = 99360;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 99360 + 7 | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  HEAP8[(0 + 99360 | 0) >> 0] = 0;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $1_1 = HEAPU8[$0_1 >> 0] | 0;
        $2_1 = ($1_1 << 24 | 0) >> 24 | 0;
        if (($2_1 | 0) < (0 | 0)) {
         break label$6
        }
        if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
         break label$6
        }
        $0_1 = $1_1 + -83 | 0;
        if ($0_1 >>> 0 <= 27 >>> 0) {
         break label$5
        }
        break label$3;
       }
       $0_1 = 1;
       $3_1 = $1_1 + -128 | 0;
       if ($3_1 >>> 0 > 14 >>> 0) {
        break label$4
       }
       if (!((1 << $3_1 | 0) & 24579 | 0)) {
        break label$4
       }
       break label$1;
      }
      if (!((1 << $0_1 | 0) & 167772161 | 0)) {
       break label$3
      }
      break label$2;
     }
     if (($1_1 | 0) != (180 | 0)) {
      break label$2
     }
     break label$1;
    }
    if ($1_1 >>> 0 < 2 >>> 0) {
     break label$2
    }
    return 1 | 0;
   }
   $0_1 = ($2_1 | 0) == (-75 | 0);
  }
  return $0_1 | 0;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP8[$0_1 >> 0] | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 9 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $2_1 & 255 | 0;
    $3_1 = $2_1 + -83 | 0;
    if ($3_1 >>> 0 > 27 >>> 0) {
     break label$2
    }
    if ((1 << $3_1 | 0) & 167772161 | 0) {
     break label$1
    }
   }
   if ($2_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $1_1 = 1;
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   if (($2_1 + -16 | 0) >>> 0 < 3 >>> 0) {
    break label$1
   }
   if (($2_1 | 0) == (65 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 103;
   return 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAPU8[$0_1 >> 0] | 0;
   $3_1 = ($2_1 << 24 | 0) >> 24 | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 10 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    switch ($2_1 | 0) {
    case 0:
    case 1:
    case 17:
    case 18:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 108:
    case 109:
    case 110:
    case 111:
     break label$1;
    default:
     break label$2;
    };
   }
   $1_1 = ($3_1 | 0) != (16 | 0);
  }
  return $1_1 | 0;
 }
 
 function $263() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  $0_1 = $4($0_1 | 0, 79952 | 0, 144 | 0) | 0;
  $1_1 = $260($0_1 | 0) | 0;
  global$0 = $0_1 + 144 | 0;
  return $1_1 | 0;
 }
 
 function $264() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  $0_1 = $4($0_1 | 0, 79952 | 0, 144 | 0) | 0;
  $1_1 = $261($0_1 | 0) | 0;
  global$0 = $0_1 + 144 | 0;
  return $1_1 | 0;
 }
 
 function $265() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  $0_1 = $4($0_1 | 0, 80312 | 0, 144 | 0) | 0;
  $1_1 = $262($0_1 | 0) | 0;
  global$0 = $0_1 + 144 | 0;
  return $1_1 | 0;
 }
 
 function $266() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  $0_1 = $4($0_1 | 0, 80688 | 0, 144 | 0) | 0;
  $1_1 = $262($0_1 | 0) | 0;
  global$0 = $0_1 + 144 | 0;
  return $1_1 | 0;
 }
 
 function $267() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  $0_1 = $4($0_1 | 0, 81048 | 0, 144 | 0) | 0;
  $1_1 = $262($0_1 | 0) | 0;
  global$0 = $0_1 + 144 | 0;
  return $1_1 | 0;
 }
 
 function $268() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   $0_1 = HEAPU8[(0 + 79952 | 0) >> 0] | 0;
   $1_1 = ($0_1 << 24 | 0) >> 24 | 0;
   if (($1_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $0_1 + -128 | 0;
    if ($2_1 >>> 0 > 14 >>> 0) {
     break label$2
    }
    if ((1 << $2_1 | 0) & 24579 | 0) {
     break label$1
    }
   }
   if (($0_1 | 0) == (180 | 0)) {
    break label$1
   }
   return ($1_1 | 0) != (-75 | 0) | 0;
  }
  return 0 | 0;
 }
 
 function $269() {
  return (HEAP8[(0 + 79952 | 0) >> 0] | 0 | 0) < (0 | 0) & !(HEAP32[(79952 + 4 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $270() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = 0;
  label$1 : {
   $1_1 = HEAPU8[(0 + 100536 | 0) >> 0] | 0;
   $2_1 = ($1_1 << 24 | 0) >> 24 | 0;
   if (($2_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -129 | 0 | 0) {
    case 0:
    case 13:
     break label$1;
    default:
     break label$2;
    };
   }
   $0_1 = ($2_1 | 0) != (-75 | 0);
  }
  return $0_1 | 0;
 }
 
 function $271() {
  return (HEAPU8[(0 + 82200 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $272() {
  return (HEAPU8[(0 + 82616 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $273() {
  return (HEAPU8[(0 + 83032 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $274() {
  return (HEAPU8[(0 + 82200 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $275() {
  return (HEAPU8[(0 + 82616 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $276() {
  return (HEAPU8[(0 + 83032 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $277() {
  return (HEAPU8[(0 + 81576 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $278() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $1_1 = HEAPU8[(0 + 81576 | 0) >> 0] | 0;
      switch ($1_1 + -129 | 0 | 0) {
      case 0:
      case 13:
       break label$2;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
       break label$3;
      default:
       break label$4;
      };
     }
     if (!$1_1) {
      break label$1
     }
    }
    return ($1_1 | 0) == (181 | 0) | 0;
   }
   $0_1 = 1;
  }
  return $0_1 | 0;
 }
 
 function $279() {
  var $0_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $0_1 = HEAPU8[(85360 + 400 | 0) >> 0] | 0;
      switch ($0_1 + -129 | 0 | 0) {
      case 0:
      case 13:
       break label$2;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
       break label$3;
      default:
       break label$4;
      };
     }
     $1_1 = 0;
     if (!$0_1) {
      break label$1
     }
    }
    return ($0_1 | 0) == (181 | 0) | 0;
   }
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $280() {
  label$1 : {
   if (!(HEAP32[(0 + 77788 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 32040 | 0) >> 2] = 16;
   HEAP32[(0 + 32036 | 0) >> 2] = 16;
   HEAP32[(0 + 32044 | 0) >> 2] = 24;
   HEAP16[(0 + 36448 | 0) >> 1] = 16;
  }
 }
 
 function $281($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, i64toi32_i32$4 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6$hi = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$3 = $0_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $12_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     $13_1 = 0
    } else {
     $13_1 = 1
    }
    $14_1 = $13_1;
   } else {
    $14_1 = 0
   }
   $12_1 = $14_1;
  }
  $4_1 = $12_1;
  i64toi32_i32$2 = $0$hi;
  i64toi32_i32$3 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 3;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $6$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1_1;
  if ((i64toi32_i32$5 | 0) > ($1$hi | 0)) {
   $15_1 = 1
  } else {
   if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$3 | 0)) {
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     $16_1 = 0
    } else {
     $16_1 = 1
    }
    $17_1 = $16_1;
   } else {
    $17_1 = 0
   }
   $15_1 = $17_1;
  }
  return $4_1 & $15_1 | 0 | 0;
 }
 
 function $282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  $2_1 = global$0 - 256 | 0;
  global$0 = $2_1;
  label$1 : {
   if (((HEAP32[(0 + 32036 | 0) >> 2] | 0) + (HEAP32[(0 + 32048 | 0) >> 2] | 0) | 0 | 0) != ($1_1 | 0)) {
    break label$1
   }
   $283();
  }
  $3_1 = HEAP32[(0 + 32048 | 0) >> 2] | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $203(HEAP32[(77992 + 8 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
  $214($2_1 + 128 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 1 | 0);
  $1_1 = Math_imul($1_1 - $3_1 | 0, 2064);
  $92($1_1 + 36464 | 0 | 0, $2_1 | 0) | 0;
  $92($1_1 + 36480 | 0 | 0, $2_1 + 128 | 0 | 0) | 0;
  global$0 = $2_1 + 256 | 0;
 }
 
 function $283() {
  var $0_1 = 0, $2_1 = 0, $3_1 = 0, $1_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $0_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[(0 + 32044 | 0) >> 2] | 0;
    if (($1_1 | 0) >= (1 | 0)) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   $3_1 = HEAP32[(0 + 32044 | 0) >> 2] | 0;
   label$3 : {
    if (!($11(38672 | 0) | 0)) {
     break label$3
    }
    $2_1 = 0;
    break label$1;
   }
   label$4 : {
    label$5 : while (1) {
     $0_1 = $0_1 + 1 | 0;
     $2_1 = ($0_1 << 16 | 0) >> 16 | 0;
     if (($3_1 | 0) <= ($2_1 | 0)) {
      break label$4
     }
     if (!($11(($2_1 << 6 | 0) + 38672 | 0 | 0) | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $1_1 = $3_1;
  }
  $4_1 = ($1_1 | 0) == ($2_1 | 0) ? 1 : $0_1;
  label$6 : {
   label$7 : {
    $0_1 = HEAP32[(0 + 32036 | 0) >> 2] | 0;
    if (($0_1 | 0) >= (2 | 0)) {
     break label$7
    }
    $5_1 = $0_1 + -1 | 0;
    break label$6;
   }
   $5_1 = (HEAP32[(0 + 32036 | 0) >> 2] | 0) + -1 | 0;
   $6_1 = ($4_1 << 16 | 0) >> 16 | 0;
   $7_1 = $1_1 - $6_1 | 0;
   $0_1 = 0;
   $8_1 = 0;
   label$8 : while (1) {
    $3_1 = Math_imul($0_1, 2064);
    $92($3_1 + 36480 | 0 | 0, $3_1 + 38544 | 0 | 0) | 0;
    $92($3_1 + 36464 | 0 | 0, $3_1 + 38528 | 0 | 0) | 0;
    label$9 : {
     if (($7_1 | 0) < (1 | 0)) {
      break label$9
     }
     $9_1 = $0_1 + 1 | 0;
     $0_1 = 0;
     $2_1 = 0;
     label$10 : while (1) {
      $92(($3_1 + ($0_1 << 6 | 0) | 0) + 36608 | 0 | 0, (Math_imul($9_1, 2064) + (($0_1 + $6_1 | 0) << 6 | 0) | 0) + 36608 | 0 | 0) | 0;
      $2_1 = $2_1 + 1 | 0;
      $0_1 = ($2_1 << 16 | 0) >> 16 | 0;
      if (($7_1 | 0) > ($0_1 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    label$11 : {
     $0_1 = ($7_1 << 16 | 0) >> 16 | 0;
     if (($1_1 | 0) <= ($0_1 | 0)) {
      break label$11
     }
     $2_1 = $7_1;
     label$12 : while (1) {
      HEAP8[(($3_1 + ($0_1 << 6 | 0) | 0) + 36608 | 0) >> 0] = 0;
      $2_1 = $2_1 + 1 | 0;
      $0_1 = ($2_1 << 16 | 0) >> 16 | 0;
      if (($1_1 | 0) > ($0_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $8_1 = $8_1 + 1 | 0;
    $0_1 = ($8_1 << 16 | 0) >> 16 | 0;
    if (($5_1 | 0) > ($0_1 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  $0_1 = 0;
  $3_1 = Math_imul($5_1, 2064);
  HEAP8[($3_1 + 36464 | 0) >> 0] = 0;
  HEAP8[($3_1 + 36480 | 0) >> 0] = 0;
  label$13 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$13
   }
   $2_1 = 0;
   label$14 : while (1) {
    HEAP8[(($3_1 + ($0_1 << 6 | 0) | 0) + 36608 | 0) >> 0] = 0;
    $2_1 = $2_1 + 1 | 0;
    $0_1 = ($2_1 << 16 | 0) >> 16 | 0;
    if (($1_1 | 0) > ($0_1 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  HEAP32[(0 + 32048 | 0) >> 2] = (HEAP32[(0 + 32048 | 0) >> 2] | 0) + 1 | 0;
  HEAP16[(0 + 36448 | 0) >> 1] = (HEAPU16[(0 + 36448 | 0) >> 1] | 0) - $4_1 | 0;
  HEAP32[(0 + 32052 | 0) >> 2] = (HEAP32[(0 + 32052 | 0) >> 2] | 0) + (($4_1 << 16 | 0) >> 16 | 0) | 0;
 }
 
 function $284() {
  var $1_1 = 0, $0_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0_1 = global$0 - 368 | 0;
  global$0 = $0_1;
  HEAP8[($0_1 + 114 | 0) >> 0] = HEAPU8[(0 + 17066 | 0) >> 0] | 0;
  $3_1 = 0;
  HEAP16[($0_1 + 112 | 0) >> 1] = HEAPU8[($3_1 + 17064 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 17065 | 0) >> 0] | 0) << 8 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 101144 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 114 | 0) >> 0] = HEAPU8[(0 + 17069 | 0) >> 0] | 0;
   $4_1 = 0;
   HEAP16[($0_1 + 112 | 0) >> 1] = HEAPU8[($4_1 + 17067 | 0) >> 0] | 0 | ((HEAPU8[($4_1 + 17068 | 0) >> 0] | 0) << 8 | 0) | 0;
  }
  label$2 : {
   if (!(HEAP32[(0 + 101156 | 0) >> 2] | 0)) {
    break label$2
   }
   (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $92($0_1 + 240 | 0 | 0, $0_1 + 112 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
   $99($0_1 + 112 | 0 | 0, 17070 | 0, $0_1 + 96 | 0 | 0) | 0;
  }
  $285($0_1 + 112 | 0 | 0, HEAP32[(0 + 78352 | 0) >> 2] | 0 | 0);
  label$3 : {
   if ((HEAP32[(79952 + 160 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 114 | 0) >> 0] = HEAPU8[(0 + 17086 | 0) >> 0] | 0;
   $5_1 = 0;
   HEAP16[($0_1 + 112 | 0) >> 1] = HEAPU8[($5_1 + 17084 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 17085 | 0) >> 0] | 0) << 8 | 0) | 0;
   label$4 : {
    if (!(HEAP32[(0 + 101148 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP8[($0_1 + 114 | 0) >> 0] = HEAPU8[(0 + 17089 | 0) >> 0] | 0;
    $6_1 = 0;
    HEAP16[($0_1 + 112 | 0) >> 1] = HEAPU8[($6_1 + 17087 | 0) >> 0] | 0 | ((HEAPU8[($6_1 + 17088 | 0) >> 0] | 0) << 8 | 0) | 0;
   }
   label$5 : {
    if (!(HEAP32[(0 + 101160 | 0) >> 2] | 0)) {
     break label$5
    }
    (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $92($0_1 + 240 | 0 | 0, $0_1 + 112 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
    $99($0_1 + 112 | 0 | 0, 17070 | 0, $0_1 + 80 | 0 | 0) | 0;
   }
   $285($0_1 + 112 | 0 | 0, HEAP32[(79952 + 160 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   if ((HEAP32[(80312 + 184 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
    break label$6
   }
   HEAP8[($0_1 + 114 | 0) >> 0] = HEAPU8[(0 + 17092 | 0) >> 0] | 0;
   $7_1 = 0;
   HEAP16[($0_1 + 112 | 0) >> 1] = HEAPU8[($7_1 + 17090 | 0) >> 0] | 0 | ((HEAPU8[($7_1 + 17091 | 0) >> 0] | 0) << 8 | 0) | 0;
   label$7 : {
    if (!(HEAP32[(0 + 101164 | 0) >> 2] | 0)) {
     break label$7
    }
    (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $92($0_1 + 240 | 0 | 0, $0_1 + 112 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
    $99($0_1 + 112 | 0 | 0, 17070 | 0, $0_1 + 64 | 0 | 0) | 0;
   }
   $285($0_1 + 112 | 0 | 0, HEAP32[(80312 + 184 | 0) >> 2] | 0 | 0);
  }
  label$8 : {
   $1_1 = HEAP32[(80688 + 176 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$8
   }
   $285(17093 | 0, $1_1 | 0);
  }
  label$9 : {
   $1_1 = HEAP32[(81048 + 168 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$9
   }
   $285(17096 | 0, $1_1 | 0);
  }
  label$10 : {
   $1_1 = HEAP32[(81576 + 200 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$10
   }
   $285(((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0) ? 17090 : 17099) | 0, $1_1 | 0);
  }
  $1_1 = 2;
  label$11 : {
   if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$11
   }
   label$12 : while (1) {
    label$13 : {
     $2_1 = 83360 + Math_imul($1_1, 200) | 0;
     if ((HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
      break label$13
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
     $99($0_1 + 240 | 0 | 0, 17102 | 0, $0_1 + 48 | 0 | 0) | 0;
     $285((wasm2js_i32$0 = (HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0) ? 17093 : $0_1 + 240 | 0, wasm2js_i32$1 = $0_1 + 240 | 0, wasm2js_i32$2 = ($1_1 | 0) == (2 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0);
    }
    $2_1 = ($1_1 | 0) < (HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0);
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$12
    }
    break label$12;
   };
  }
  label$14 : {
   $1_1 = HEAP32[(82200 + 200 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$14
   }
   $285(17106 | 0, $1_1 | 0);
  }
  $1_1 = 2;
  label$15 : {
   if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$15
   }
   label$16 : while (1) {
    label$17 : {
     $2_1 = 87360 + Math_imul($1_1, 200) | 0;
     if ((HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
      break label$17
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
     $99($0_1 + 240 | 0 | 0, 17109 | 0, $0_1 + 32 | 0 | 0) | 0;
     $285($0_1 + 240 | 0 | 0, HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0);
    }
    $2_1 = ($1_1 | 0) < (HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0);
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$16
    }
    break label$16;
   };
  }
  label$18 : {
   $1_1 = HEAP32[(83032 + 200 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$18
   }
   $285(17113 | 0, $1_1 | 0);
  }
  $1_1 = 2;
  label$19 : {
   if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$19
   }
   label$20 : while (1) {
    label$21 : {
     $2_1 = 95360 + Math_imul($1_1, 200) | 0;
     if ((HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
      break label$21
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
     $99($0_1 + 240 | 0 | 0, 17116 | 0, $0_1 + 16 | 0 | 0) | 0;
     $285($0_1 + 240 | 0 | 0, HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0);
    }
    $2_1 = ($1_1 | 0) < (HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0);
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$20
    }
    break label$20;
   };
  }
  label$22 : {
   $1_1 = HEAP32[(82616 + 200 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$22
   }
   $285(17120 | 0, $1_1 | 0);
  }
  $1_1 = 2;
  label$23 : {
   if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$23
   }
   label$24 : while (1) {
    label$25 : {
     $2_1 = 91360 + Math_imul($1_1, 200) | 0;
     if ((HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
      break label$25
     }
     HEAP32[$0_1 >> 2] = $1_1;
     $99($0_1 + 240 | 0 | 0, 17123 | 0, $0_1 | 0) | 0;
     $285($0_1 + 240 | 0 | 0, HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0);
    }
    $2_1 = ($1_1 | 0) < (HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0);
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$24
    }
    break label$24;
   };
  }
  label$26 : {
   $1_1 = HEAP32[(100536 + 160 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$26
   }
   $285(17096 | 0, $1_1 | 0);
  }
  label$27 : {
   $1_1 = HEAP32[(81400 + 168 | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$27
   }
   $285(17096 | 0, $1_1 | 0);
  }
  global$0 = $0_1 + 368 | 0;
 }
 
 function $285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if ((HEAP32[(0 + 78356 | 0) >> 2] | 0) >>> 0 < ((HEAP32[(0 + 32044 | 0) >> 2] | 0) + (HEAP32[(0 + 32052 | 0) >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $286();
  }
  label$2 : {
   $2_1 = (HEAP32[(0 + 78356 | 0) >> 2] | 0) - (HEAP32[(0 + 32052 | 0) >> 2] | 0) | 0;
   $1_1 = $1_1 - (HEAP32[(0 + 32048 | 0) >> 2] | 0) | 0;
   if (($2_1 | $1_1 | 0 | 0) < (0 | 0)) {
    break label$2
   }
   $92((Math_imul($1_1, 2064) + ($2_1 << 6 | 0) | 0) + 36608 | 0 | 0, $0_1 | 0) | 0;
   if (($2_1 | 0) < (HEAP16[(0 + 36448 | 0) >> 1] | 0 | 0)) {
    break label$2
   }
   HEAP16[(0 + 36448 | 0) >> 1] = $2_1 + 1 | 0;
  }
 }
 
 function $286() {
  var $0_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[(0 + 32036 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[(0 + 32044 | 0) >> 2] | 0;
   $1_1 = $0_1 + -1 | 0;
   $2_1 = HEAP32[(0 + 32036 | 0) >> 2] | 0;
   $3_1 = ($0_1 | 0) < (2 | 0);
   $4_1 = 0;
   $5_1 = 0;
   label$2 : while (1) {
    $0_1 = 0;
    $6_1 = 0;
    label$3 : {
     if ($3_1) {
      break label$3
     }
     label$4 : while (1) {
      $0_1 = Math_imul($4_1, 2064) + ($0_1 << 6 | 0) | 0;
      $92($0_1 + 36608 | 0 | 0, $0_1 + 36672 | 0 | 0) | 0;
      $6_1 = $6_1 + 1 | 0;
      $0_1 = ($6_1 << 16 | 0) >> 16 | 0;
      if (($1_1 | 0) > ($0_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    HEAP8[((Math_imul($4_1, 2064) + ($0_1 << 6 | 0) | 0) + 36608 | 0) >> 0] = 0;
    $5_1 = $5_1 + 1 | 0;
    $4_1 = ($5_1 << 16 | 0) >> 16 | 0;
    if (($2_1 | 0) > ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[(0 + 32052 | 0) >> 2] = (HEAP32[(0 + 32052 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $85_1 = 0, $229_1 = 0;
  $2_1 = global$0 - 304 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  $35(20338 | 0, 42 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(20381 | 0, 24 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($2_1 + 288 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20406 | 0, $2_1 + 288 | 0 | 0) | 0;
  HEAP32[($2_1 + 272 | 0) >> 2] = 10;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20440 | 0, $2_1 + 272 | 0 | 0) | 0;
  HEAP32[($2_1 + 256 | 0) >> 2] = 190;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20466 | 0, $2_1 + 256 | 0 | 0) | 0;
  $35(20508 | 0, 19 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($2_1 + 240 | 0) >> 2] = 20548;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20528 | 0, $2_1 + 240 | 0 | 0) | 0;
  HEAP32[($2_1 + 224 | 0) >> 2] = 20574;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20551 | 0, $2_1 + 224 | 0 | 0) | 0;
  label$1 : {
   $4_1 = HEAP32[(0 + 32040 | 0) >> 2] | 0;
   $5_1 = HEAP16[(0 + 36448 | 0) >> 1] | 0;
   if (((($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1) | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    HEAP32[($2_1 + 208 | 0) >> 2] = 25;
    HEAP32[($2_1 + 212 | 0) >> 2] = $1_1;
    $5_1 = (HEAP32[(0 + 32052 | 0) >> 2] | 0) + $3_1 | 0;
    HEAP32[($2_1 + 216 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 220 | 0) >> 2] = $5_1;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20586 | 0, $2_1 + 208 | 0 | 0) | 0;
    HEAP32[($2_1 + 192 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP32[($2_1 + 196 | 0) >> 2] = (HEAP32[(0 + 32052 | 0) >> 2] | 0) + $3_1 | 0;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20638 | 0, $2_1 + 192 | 0 | 0) | 0;
    $3_1 = HEAP32[(0 + 32040 | 0) >> 2] | 0;
    $5_1 = HEAP16[(0 + 36448 | 0) >> 1] | 0;
    $85_1 = ($3_1 | 0) > ($5_1 | 0) ? $3_1 : $5_1;
    $4_1 = $4_1 + 1 | 0;
    $3_1 = ($4_1 << 16 | 0) >> 16 | 0;
    if (($85_1 | 0) > ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $3_1 = 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(20666 | 0, 23 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   if (($0_1 | 0) < (1 | 0)) {
    break label$3
   }
   $6_1 = 0;
   label$4 : while (1) {
    $4_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      $5_1 = $3_1 & 1 | 0;
      if ($5_1) {
       break label$6
      }
      HEAP32[($2_1 + 160 | 0) >> 2] = 20690;
      $64($4_1 | 0, 18436 | 0, $2_1 + 160 | 0 | 0) | 0;
      break label$5;
     }
     HEAP32[($2_1 + 176 | 0) >> 2] = 20698;
     $64($4_1 | 0, 20406 | 0, $2_1 + 176 | 0 | 0) | 0;
    }
    $35(20508 | 0, 19 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $4_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
    label$7 : {
     label$8 : {
      $7_1 = Math_imul($3_1, 2064);
      $3_1 = $7_1 + 36480 | 0;
      if ($11($3_1 | 0) | 0) {
       break label$8
      }
      label$9 : {
       if ($5_1) {
        break label$9
       }
       HEAP32[($2_1 + 48 | 0) >> 2] = 18620;
       $64($4_1 | 0, 20706 | 0, $2_1 + 48 | 0 | 0) | 0;
       HEAP32[($2_1 + 32 | 0) >> 2] = 18620;
       $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20706 | 0, $2_1 + 32 | 0 | 0) | 0;
       break label$7;
      }
      HEAP32[($2_1 + 80 | 0) >> 2] = 18421;
      $64($4_1 | 0, 20706 | 0, $2_1 + 80 | 0 | 0) | 0;
      HEAP32[($2_1 + 64 | 0) >> 2] = 18421;
      $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20706 | 0, $2_1 + 64 | 0 | 0) | 0;
      break label$7;
     }
     $1_1 = $7_1 + 36464 | 0;
     HEAP32[($2_1 + 148 | 0) >> 2] = $1_1;
     $5_1 = $5_1 ? 18421 : 18620;
     HEAP32[($2_1 + 144 | 0) >> 2] = $5_1;
     $64($4_1 | 0, 20738 | 0, $2_1 + 144 | 0 | 0) | 0;
     HEAP32[($2_1 + 128 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 132 | 0) >> 2] = $3_1;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20738 | 0, $2_1 + 128 | 0 | 0) | 0;
     HEAP32[($2_1 + 112 | 0) >> 2] = $1_1;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20528 | 0, $2_1 + 112 | 0 | 0) | 0;
     HEAP32[($2_1 + 96 | 0) >> 2] = $3_1;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20779 | 0, $2_1 + 96 | 0 | 0) | 0;
    }
    $3_1 = 0;
    $5_1 = 0;
    label$10 : {
     $4_1 = HEAP32[(0 + 32040 | 0) >> 2] | 0;
     $1_1 = HEAP16[(0 + 36448 | 0) >> 1] | 0;
     if (((($4_1 | 0) > ($1_1 | 0) ? $4_1 : $1_1) | 0) < (1 | 0)) {
      break label$10
     }
     label$11 : while (1) {
      $35(20803 | 0, 21 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
      $1_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
      label$12 : {
       label$13 : {
        $4_1 = ($7_1 + ($3_1 << 6 | 0) | 0) + 36608 | 0;
        if (!($11($4_1 | 0) | 0)) {
         break label$13
        }
        $36($4_1 | 0, $1_1 | 0) | 0;
        $35(20825 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 + 1 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
        $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20832 | 0, $2_1 + 16 | 0 | 0) | 0;
        break label$12;
       }
       $35(20860 | 0, 6 | 0, 1 | 0, $1_1 | 0) | 0;
       $35(20825 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[$2_1 >> 2] = $3_1 + 1 | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = 20867;
       $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20832 | 0, $2_1 | 0) | 0;
      }
      $35(20825 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
      $3_1 = HEAP32[(0 + 32040 | 0) >> 2] | 0;
      $4_1 = HEAP16[(0 + 36448 | 0) >> 1] | 0;
      $229_1 = ($3_1 | 0) > ($4_1 | 0) ? $3_1 : $4_1;
      $5_1 = $5_1 + 1 | 0;
      $3_1 = ($5_1 << 16 | 0) >> 16 | 0;
      if (($229_1 | 0) > ($3_1 | 0)) {
       continue label$11
      }
      break label$11;
     };
    }
    $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(20666 | 0, 23 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $6_1 = $6_1 + 1 | 0;
    $3_1 = ($6_1 << 16 | 0) >> 16 | 0;
    if (($3_1 | 0) < ($0_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  $35(20874 | 0, 14 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(20889 | 0, 28 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $2_1 + 304 | 0;
 }
 
 function $288() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 592 | 0;
  global$0 = $0_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[(0 + 78356 | 0) >> 2] | 0;
  $99($0_1 + 80 | 0 | 0, 17163 | 0, $0_1 + 64 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[(0 + 77988 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 + 80 | 0;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 17179 | 0, $0_1 + 32 | 0 | 0) | 0;
     break label$2;
    }
    $1_1 = $30($0_1 + 80 | 0 | 0, 17127 | 0) | 0;
    HEAP32[(0 + 77744 | 0) >> 2] = $1_1;
    if (!$1_1) {
     break label$1
    }
   }
   $289(17186 | 0);
   $290();
   $35(17204 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17218 | 0, 28 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17247 | 0, 31 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17279 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17315 | 0, 27 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    if (!(HEAP32[(0 + 32056 | 0) >> 2] | 0)) {
     break label$4
    }
    $287(HEAP32[(0 + 32036 | 0) >> 2] | 0 | 0, 17197 | 0);
   }
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17351 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $1_1 = HEAP32[(0 + 32060 | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     if (HEAP32[(0 + 77764 | 0) >> 2] | 0 | (HEAP32[(0 + 77768 | 0) >> 2] | 0) | 0) {
      break label$6
     }
     if (!$1_1) {
      break label$5
     }
     $229();
     break label$5;
    }
    if (!$1_1) {
     break label$5
    }
    $291();
    $292();
   }
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   label$7 : {
    if (!(HEAPU8[(0 + 101696 | 0) >> 0] | 0)) {
     break label$7
    }
    if (!(HEAP32[(0 + 32076 | 0) >> 2] | 0)) {
     break label$7
    }
    $35(17386 | 0, 57 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17444 | 0, 17 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17462 | 0, 9 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 101696;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 17472 | 0, $0_1 + 16 | 0 | 0) | 0;
    $35(17147 | 0, 9 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   }
   label$8 : {
    if (!(HEAPU8[(0 + 102208 | 0) >> 0] | 0)) {
     break label$8
    }
    if (!(HEAP32[(0 + 32072 | 0) >> 2] | 0)) {
     break label$8
    }
    $35(17477 | 0, 48 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17526 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17540 | 0, 9 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[$0_1 >> 2] = 102208;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 17550 | 0, $0_1 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   }
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17567 | 0, 36 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17604 | 0, 41 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17279 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17646 | 0, 22 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   label$9 : {
    if (!(HEAP32[(0 + 32064 | 0) >> 2] | 0)) {
     break label$9
    }
    $293();
   }
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   label$10 : {
    if (!(HEAP32[(0 + 77764 | 0) >> 2] | 0 | (HEAP32[(0 + 77768 | 0) >> 2] | 0) | 0)) {
     break label$10
    }
    $35(17646 | 0, 22 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    label$11 : {
     if (!(HEAP32[(0 + 32064 | 0) >> 2] | 0)) {
      break label$11
     }
     $294();
    }
    $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   }
   $35(17646 | 0, 22 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   label$12 : {
    if (!(HEAP32[(0 + 32068 | 0) >> 2] | 0)) {
     break label$12
    }
    $295();
   }
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17669 | 0, 20 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $296();
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $1_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
   label$13 : {
    label$14 : {
     if ((HEAP32[(0 + 77988 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$14
     }
     $35(17690 | 0, 2 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$13;
    }
    $39($1_1 | 0) | 0;
   }
   global$0 = $0_1 + 592 | 0;
   return;
  }
  HEAP32[($0_1 + 48 | 0) >> 2] = $0_1 + 80 | 0;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 17129 | 0, $0_1 + 48 | 0 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  $35(20193 | 0, 16 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 52 | 0) >> 2] = 77824;
  HEAP32[($1_1 + 56 | 0) >> 2] = HEAP32[(0 + 78356 | 0) >> 2] | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 20210 | 0, $1_1 + 48 | 0 | 0) | 0;
  $35(20269 | 0, 68 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21134 | 0, 69 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21204 | 0, 68 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21273 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21282 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = 21333;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21296 | 0, $1_1 + 32 | 0 | 0) | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = 10;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21341 | 0, $1_1 + 16 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 21383;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21362 | 0, $1_1 | 0) | 0;
  $35(21388 | 0, 2 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21391 | 0, 9 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21401 | 0, 16 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $1_1 + 64 | 0;
 }
 
 function $290() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 112 | 0;
  global$0 = $0_1;
  $35(21418 | 0, 33 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21452 | 0, 42 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 77792 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 96 | 0) >> 2] = 78224;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21495 | 0, $0_1 + 96 | 0 | 0) | 0;
  }
  $35(21562 | 0, 76 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21639 | 0, 75 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 17197;
  $1_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $1_1 >>> 0 > 10 >>> 0 ? $1_1 + -15 | 0 : $1_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21715 | 0, $0_1 + 80 | 0 | 0) | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 17197;
  $1_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1 >>> 0 > 5 >>> 0 ? $1_1 + -5 | 0 : $1_1;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21792 | 0, $0_1 + 64 | 0 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 17197;
  $1_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = $1_1 - ($1_1 >>> 0 > 1 >>> 0) | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21868 | 0, $0_1 + 48 | 0 | 0) | 0;
  label$2 : {
   if (HEAP32[(0 + 77804 | 0) >> 2] | 0) {
    break label$2
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 17197;
   HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21944 | 0, $0_1 + 32 | 0 | 0) | 0;
  }
  label$3 : {
   if (HEAP32[(0 + 77804 | 0) >> 2] | 0) {
    break label$3
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 17197;
   HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 5 | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22020 | 0, $0_1 + 16 | 0 | 0) | 0;
  }
  label$4 : {
   if (HEAP32[(0 + 77804 | 0) >> 2] | 0) {
    break label$4
   }
   HEAP32[$0_1 >> 2] = 17197;
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 10 | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22096 | 0, $0_1 | 0) | 0;
  }
  $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 112 | 0;
 }
 
 function $291() {
  var $0_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, $81_1 = 0, $81$hi = 0, $86$hi = 0, $20_1 = 0, $101_1 = 0, $101$hi = 0, $106$hi = 0, $21_1 = 0, $120_1 = 0, $120$hi = 0, $125$hi = 0, $22_1 = 0;
  $0_1 = global$0 - 944 | 0;
  global$0 = $0_1;
  $1_1 = 1;
  $35(22173 | 0, 16 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 800 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 800 | 0 | 0) | 0;
  HEAP32[($0_1 + 784 | 0) >> 2] = 80;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22190 | 0, $0_1 + 784 | 0 | 0) | 0;
  HEAP32[($0_1 + 768 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22232 | 0, $0_1 + 768 | 0 | 0) | 0;
  HEAP32[($0_1 + 752 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22270 | 0, $0_1 + 752 | 0 | 0) | 0;
  HEAP32[($0_1 + 736 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22308 | 0, $0_1 + 736 | 0 | 0) | 0;
  HEAP32[($0_1 + 720 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22346 | 0, $0_1 + 720 | 0 | 0) | 0;
  HEAP32[($0_1 + 704 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22385 | 0, $0_1 + 704 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 688 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 688 | 0 | 0) | 0;
  HEAP32[($0_1 + 672 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22424 | 0, $0_1 + 672 | 0 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79776 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79780 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 1 | 0);
  HEAP32[($0_1 + 656 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 656 | 0 | 0) | 0;
  i64toi32_i32$2 = 79952;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 1 | 0);
  HEAP32[($0_1 + 640 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 640 | 0 | 0) | 0;
  i64toi32_i32$2 = 81576;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
  $81_1 = i64toi32_i32$0;
  $81$hi = i64toi32_i32$1;
  i64toi32_i32$2 = 80312;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  i64toi32_i32$3 = -1;
  i64toi32_i32$4 = (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = $81$hi;
  i64toi32_i32$1 = i64toi32_i32$4 ? $81_1 : $4_1;
  i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
  $86$hi = i64toi32_i32$3;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0);
  i64toi32_i32$3 = $86$hi;
  $20_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$0 ? $20_1 : $4_1;
  i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$1;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
  HEAP32[($0_1 + 624 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 624 | 0 | 0) | 0;
  i64toi32_i32$0 = 83360 + 584 | 0;
  i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $101_1 = i64toi32_i32$4;
  $101$hi = i64toi32_i32$2;
  i64toi32_i32$0 = 80688;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 168 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 172 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$4;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = -1;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = $101$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ? $101_1 : $4_1;
  i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
  $106$hi = i64toi32_i32$3;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$4 = (HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0);
  i64toi32_i32$3 = $106$hi;
  $21_1 = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = i64toi32_i32$4 ? $21_1 : $4_1;
  i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 1 | 0);
  HEAP32[($0_1 + 608 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 608 | 0 | 0) | 0;
  i64toi32_i32$4 = 99528;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 156 | 0) >> 2] | 0;
  $120_1 = i64toi32_i32$1;
  $120$hi = i64toi32_i32$0;
  i64toi32_i32$4 = 81048;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 160 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 164 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$4 = $120$hi;
  i64toi32_i32$0 = i64toi32_i32$2 ? $120_1 : $4_1;
  i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$1;
  $125$hi = i64toi32_i32$3;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$1 = (HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0);
  i64toi32_i32$3 = $125$hi;
  $22_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$4 = i64toi32_i32$1 ? $22_1 : $4_1;
  i64toi32_i32$2 = i64toi32_i32$1 ? i64toi32_i32$3 : i64toi32_i32$0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 1 | 0);
  HEAP32[($0_1 + 592 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 592 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22469 | 0, 18 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 576 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 576 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 560 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22521 | 0, $0_1 + 560 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 544 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 544 | 0 | 0) | 0;
  HEAP32[($0_1 + 528 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22576 | 0, $0_1 + 528 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = 100872;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
  HEAP32[($0_1 + 512 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 512 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $2_1 = 1;
   $35(22609 | 0, 20 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($0_1 + 496 | 0) >> 2] = 18620;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 496 | 0 | 0) | 0;
   $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    $3_1 = 1;
    label$3 : while (1) {
     HEAP32[($0_1 + 480 | 0) >> 2] = 90;
     HEAP32[($0_1 + 484 | 0) >> 2] = $2_1;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22630 | 0, $0_1 + 480 | 0 | 0) | 0;
     $3_1 = $3_1 + 1 | 0;
     $2_1 = ($3_1 << 16 | 0) >> 16 | 0;
     if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) >= ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[($0_1 + 464 | 0) >> 2] = 90;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22668 | 0, $0_1 + 464 | 0 | 0) | 0;
   $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($0_1 + 448 | 0) >> 2] = 20690;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 448 | 0 | 0) | 0;
   HEAP32[($0_1 + 432 | 0) >> 2] = 18421;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22706 | 0, $0_1 + 432 | 0 | 0) | 0;
   $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = 81576;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
   $214($0_1 + 816 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 1 | 0);
   HEAP32[($0_1 + 416 | 0) >> 2] = $0_1 + 816 | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 416 | 0 | 0) | 0;
   $2_1 = 2;
   label$4 : {
    if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) < (2 | 0)) {
     break label$4
    }
    $3_1 = 2;
    label$5 : while (1) {
     i64toi32_i32$1 = 83360 + Math_imul($2_1, 200) | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] | 0;
     $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
     HEAP32[($0_1 + 400 | 0) >> 2] = $0_1 + 816 | 0;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 400 | 0 | 0) | 0;
     $3_1 = $3_1 + 1 | 0;
     $2_1 = ($3_1 << 16 | 0) >> 16 | 0;
     if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) >= ($2_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   i64toi32_i32$1 = 99528;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
   $214($0_1 + 816 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 1 | 0);
   HEAP32[($0_1 + 384 | 0) >> 2] = $0_1 + 816 | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 384 | 0 | 0) | 0;
   $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  }
  $35(22738 | 0, 15 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 368 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 368 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$6 : {
   if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$6
   }
   $2_1 = 1;
   label$7 : while (1) {
    HEAP32[($0_1 + 352 | 0) >> 2] = 90;
    HEAP32[($0_1 + 356 | 0) >> 2] = $1_1;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22754 | 0, $0_1 + 352 | 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1_1 = ($2_1 << 16 | 0) >> 16 | 0;
    if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  HEAP32[($0_1 + 336 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22668 | 0, $0_1 + 336 | 0 | 0) | 0;
  $1_1 = 1;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 320 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 320 | 0 | 0) | 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22790 | 0, $0_1 + 304 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = 82200;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
  HEAP32[($0_1 + 288 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 288 | 0 | 0) | 0;
  $2_1 = 2;
  label$8 : {
   if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$8
   }
   $3_1 = 2;
   label$9 : while (1) {
    i64toi32_i32$1 = 87360 + Math_imul($2_1, 200) | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] | 0;
    $214($0_1 + 816 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 1 | 0);
    HEAP32[($0_1 + 272 | 0) >> 2] = $0_1 + 816 | 0;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 272 | 0 | 0) | 0;
    $3_1 = $3_1 + 1 | 0;
    $2_1 = ($3_1 << 16 | 0) >> 16 | 0;
    if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) >= ($2_1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  i64toi32_i32$1 = 99864;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
  HEAP32[($0_1 + 256 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 256 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22822 | 0, 16 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 240 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 240 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$10 : {
   if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$10
   }
   $2_1 = 1;
   label$11 : while (1) {
    HEAP32[($0_1 + 224 | 0) >> 2] = 90;
    HEAP32[($0_1 + 228 | 0) >> 2] = $1_1;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22839 | 0, $0_1 + 224 | 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1_1 = ($2_1 << 16 | 0) >> 16 | 0;
    if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  HEAP32[($0_1 + 208 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22875 | 0, $0_1 + 208 | 0 | 0) | 0;
  $1_1 = 1;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 192 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 192 | 0 | 0) | 0;
  HEAP32[($0_1 + 176 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22914 | 0, $0_1 + 176 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = 83032;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 1 | 0);
  HEAP32[($0_1 + 160 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 160 | 0 | 0) | 0;
  $2_1 = 2;
  label$12 : {
   if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$12
   }
   $3_1 = 2;
   label$13 : while (1) {
    i64toi32_i32$1 = 95360 + Math_imul($2_1, 200) | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] | 0;
    $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
    HEAP32[($0_1 + 144 | 0) >> 2] = $0_1 + 816 | 0;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 144 | 0 | 0) | 0;
    $3_1 = $3_1 + 1 | 0;
    $2_1 = ($3_1 << 16 | 0) >> 16 | 0;
    if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) >= ($2_1 | 0)) {
     continue label$13
    }
    break label$13;
   };
  }
  i64toi32_i32$1 = 81400;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 1 | 0);
  HEAP32[($0_1 + 128 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 128 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22946 | 0, 16 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 112 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$14 : {
   if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$14
   }
   $2_1 = 1;
   label$15 : while (1) {
    HEAP32[($0_1 + 96 | 0) >> 2] = 90;
    HEAP32[($0_1 + 100 | 0) >> 2] = $1_1;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22963 | 0, $0_1 + 96 | 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1_1 = ($2_1 << 16 | 0) >> 16 | 0;
    if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  HEAP32[($0_1 + 80 | 0) >> 2] = 90;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22668 | 0, $0_1 + 80 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 64 | 0 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22999 | 0, $0_1 + 48 | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(22488 | 0, 32 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = 82616;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
  HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 32 | 0 | 0) | 0;
  $1_1 = 2;
  label$16 : {
   if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$16
   }
   $2_1 = 2;
   label$17 : while (1) {
    i64toi32_i32$1 = 91360 + Math_imul($1_1, 200) | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] | 0;
    $214($0_1 + 816 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 1 | 0);
    HEAP32[($0_1 + 16 | 0) >> 2] = $0_1 + 816 | 0;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 + 16 | 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1_1 = ($2_1 << 16 | 0) >> 16 | 0;
    if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
     continue label$17
    }
    break label$17;
   };
  }
  i64toi32_i32$1 = 100200;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
  $214($0_1 + 816 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 1 | 0);
  HEAP32[$0_1 >> 2] = $0_1 + 816 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22456 | 0, $0_1 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(23031 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 944 | 0;
 }
 
 function $292() {
  var $0_1 = 0;
  $0_1 = global$0 - 96 | 0;
  global$0 = $0_1;
  $35(23042 | 0, 26 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 80 | 0 | 0) | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 80;
  HEAP32[($0_1 + 68 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23069 | 0, $0_1 + 64 | 0 | 0) | 0;
  $302(HEAP32[(0 + 101144 | 0) >> 2] | 0 | 0, 23110 | 0);
  $302(HEAP32[(0 + 101148 | 0) >> 2] | 0 | 0, 23118 | 0);
  $302(HEAP32[(0 + 101132 | 0) >> 2] | 0 | 0, 23126 | 0);
  $302(HEAP32[(0 + 101136 | 0) >> 2] | 0 | 0, 23130 | 0);
  $302(HEAP32[(0 + 101140 | 0) >> 2] | 0 | 0, 23134 | 0);
  $302(0 | 0, 23145 | 0);
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 48 | 0 | 0) | 0;
  $35(23147 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $302(HEAP32[(0 + 101156 | 0) >> 2] | 0 | 0, 23182 | 0);
  $302(HEAP32[(0 + 101160 | 0) >> 2] | 0 | 0, 23188 | 0);
  $302(HEAP32[(0 + 101164 | 0) >> 2] | 0 | 0, 23194 | 0);
  $302(0 | 0, 23145 | 0);
  $302(0 | 0, 23145 | 0);
  $302(0 | 0, 23145 | 0);
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 32 | 0 | 0) | 0;
  $35(23147 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $302((HEAP32[(0 + 101080 | 0) >> 2] | 0 | (HEAP32[(0 + 101084 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23200 | 0);
  $302((HEAP32[(0 + 101040 | 0) >> 2] | 0 | (HEAP32[(0 + 101044 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23211 | 0);
  $302((HEAP32[(0 + 101048 | 0) >> 2] | 0 | (HEAP32[(0 + 101052 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23218 | 0);
  $302(HEAP32[(0 + 101088 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0) ? 23229 : 23237) | 0);
  $302(0 | 0, 23145 | 0);
  $302(0 | 0, 23145 | 0);
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 + 16 | 0 | 0) | 0;
  $35(23147 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $302(0 | 0, 23145 | 0);
  $302((HEAP32[(0 + 101056 | 0) >> 2] | 0 | (HEAP32[(0 + 101060 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23246 | 0);
  $302((HEAP32[(0 + 101064 | 0) >> 2] | 0 | (HEAP32[(0 + 101068 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23252 | 0);
  $302(HEAP32[(0 + 101072 | 0) >> 2] | 0 | 0, 23262 | 0);
  $302(HEAP32[(0 + 101076 | 0) >> 2] | 0 | 0, 23272 | 0);
  $302(HEAP32[(0 + 101092 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0) ? 23246 : 23280) | 0);
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 22559 | 0, $0_1 | 0) | 0;
  $35(23147 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $302(HEAP32[(0 + 101112 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0) ? 23287 : 23297) | 0);
  $302(HEAP32[(0 + 101116 | 0) >> 2] | 0 | 0, ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) == (2 | 0) ? 23306 : 23314) | 0);
  $302((HEAP32[(0 + 101096 | 0) >> 2] | 0 | (HEAP32[(0 + 101100 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23323 | 0);
  $302((HEAP32[(0 + 101104 | 0) >> 2] | 0 | (HEAP32[(0 + 101108 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23330 | 0);
  $302((HEAP32[(0 + 101120 | 0) >> 2] | 0 | (HEAP32[(0 + 101124 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0, 23337 | 0);
  $302(HEAP32[(0 + 101128 | 0) >> 2] | 0 | 0, 23344 | 0);
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(23031 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 96 | 0;
 }
 
 function $293() {
  var $0_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $2_1 = 0, $3$hi = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $91_1 = 0, i64toi32_i32$3 = 0;
  $0_1 = global$0 - 816 | 0;
  global$0 = $0_1;
  i64toi32_i32$2 = 79952;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $213($0_1 + 784 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$2 = 81048;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
  $213($0_1 + 752 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  $35(23377 | 0, 38 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 224 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 224 | 0 | 0) | 0;
  $35(23416 | 0, 50 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23467 | 0, $0_1 + 208 | 0 | 0) | 0;
  HEAP32[($0_1 + 192 | 0) >> 2] = 60;
  HEAP32[($0_1 + 196 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23516 | 0, $0_1 + 192 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $1_1 = 0;
  label$1 : while (1) {
   $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = $181(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $0_1 + 236 | 0 | 0, $0_1 + 232 | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   label$2 : {
    label$3 : {
     if (((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + -1 | 0) >>> 0 > 1 >>> 0) {
      break label$3
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 128 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0_1 + 136 | 0) >> 2] = ($3_1 << 24 | 0) >> 24 | 0;
     $99($0_1 + 624 | 0 | 0, 23571 | 0, $0_1 + 128 | 0 | 0) | 0;
     label$4 : {
      if (!(HEAP32[($0_1 + 232 | 0) >> 2] | 0)) {
       break label$4
      }
      HEAP32[($0_1 + 112 | 0) >> 2] = 20698;
      HEAP32[($0_1 + 116 | 0) >> 2] = $0_1 + 624 | 0;
      $99($0_1 + 368 | 0 | 0, 23580 | 0, $0_1 + 112 | 0 | 0) | 0;
      break label$2;
     }
     HEAP32[($0_1 + 100 | 0) >> 2] = 23694;
     HEAP32[($0_1 + 96 | 0) >> 2] = 20698;
     HEAP32[($0_1 + 104 | 0) >> 2] = $0_1 + 624 | 0;
     $99($0_1 + 368 | 0 | 0, 23621 | 0, $0_1 + 96 | 0 | 0) | 0;
     break label$2;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 176 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 180 | 0) >> 2] = i64toi32_i32$1;
    $91_1 = $0_1 + 624 | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $10_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $11_1 = 0
      } else {
       $11_1 = 1
      }
      $12_1 = $11_1;
     } else {
      $12_1 = 0
     }
     $10_1 = $12_1;
    }
    $99($91_1 | 0, ($10_1 ? 23703 : 23708) | 0, $0_1 + 176 | 0 | 0) | 0;
    label$5 : {
     if (!(HEAP32[($0_1 + 232 | 0) >> 2] | 0)) {
      break label$5
     }
     HEAP32[($0_1 + 160 | 0) >> 2] = 20698;
     HEAP32[($0_1 + 164 | 0) >> 2] = $0_1 + 624 | 0;
     $99($0_1 + 368 | 0 | 0, 23580 | 0, $0_1 + 160 | 0 | 0) | 0;
     break label$2;
    }
    HEAP32[($0_1 + 148 | 0) >> 2] = 23694;
    HEAP32[($0_1 + 144 | 0) >> 2] = 20698;
    HEAP32[($0_1 + 152 | 0) >> 2] = $0_1 + 624 | 0;
    $99($0_1 + 368 | 0 | 0, 23621 | 0, $0_1 + 144 | 0 | 0) | 0;
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 84 | 0) >> 2] = HEAP32[(31888 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
   $99($0_1 + 240 | 0 | 0, 23713 | 0, $0_1 + 80 | 0 | 0) | 0;
   label$6 : {
    label$7 : {
     if (!($267() | 0)) {
      break label$7
     }
     if (($1_1 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
      break label$7
     }
     label$8 : {
      label$9 : {
       label$10 : {
        if (!($263() | 0)) {
         break label$10
        }
        if (($1_1 | 0) == (HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0)) {
         break label$9
        }
       }
       if (!($264() | 0)) {
        break label$8
       }
       if (($1_1 | 0) != (HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0)) {
        break label$8
       }
      }
      HEAP32[($0_1 + 64 | 0) >> 2] = $0_1 + 752 | 0;
      HEAP32[($0_1 + 68 | 0) >> 2] = $0_1 + 240 | 0;
      $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23734 | 0, $0_1 + 64 | 0 | 0) | 0;
      break label$6;
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $0_1 + 752 | 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = $0_1 + 240 | 0;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23787 | 0, $0_1 + 48 | 0 | 0) | 0;
     break label$6;
    }
    label$11 : {
     label$12 : {
      label$13 : {
       if (!($263() | 0)) {
        break label$13
       }
       if (($1_1 | 0) == (HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0)) {
        break label$12
       }
      }
      if (!($264() | 0)) {
       break label$11
      }
      if (($1_1 | 0) != (HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0)) {
       break label$11
      }
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 + 784 | 0;
     HEAP32[($0_1 + 36 | 0) >> 2] = $0_1 + 240 | 0;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23836 | 0, $0_1 + 32 | 0 | 0) | 0;
     break label$6;
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 20690;
    $2_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = $0_1 + 240 | 0;
    $64($2_1 | 0, 23885 | 0, $0_1 + 16 | 0 | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = $0_1 + 368 | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23783 | 0, $0_1 | 0) | 0;
   $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $2_1 = ($1_1 << 16 | 0) + 65536 | 0;
   $1_1 = $2_1 >> 16 | 0;
   if (($2_1 | 0) < (2097152 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $35(23031 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 816 | 0;
 }
 
 function $294() {
  var $0_1 = 0, $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $3_1 = 0.0, $302_1 = 0;
  $0_1 = global$0 - 1504 | 0;
  global$0 = $0_1;
  i64toi32_i32$2 = 79952;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $213($0_1 + 1472 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$2 = 100536;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $213($0_1 + 1440 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$2 = 81400;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
  $213($0_1 + 1408 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  $35(23928 | 0, 33 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 480 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 480 | 0 | 0) | 0;
  $35(23962 | 0, 49 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 464 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23467 | 0, $0_1 + 464 | 0 | 0) | 0;
  HEAP32[($0_1 + 448 | 0) >> 2] = 60;
  HEAP32[($0_1 + 452 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 24012 | 0, $0_1 + 448 | 0 | 0) | 0;
  HEAP32[($0_1 + 432 | 0) >> 2] = 60;
  HEAP32[($0_1 + 436 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 24064 | 0, $0_1 + 432 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $1_1 = 0;
  label$1 : while (1) {
   $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = $1_1 >> 31 | 0;
   $183($0_1 + 488 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $0_1 + 500 | 0 | 0, $0_1 + 496 | 0 | 0);
   $3_1 = +HEAPF64[($0_1 + 488 | 0) >> 3];
   HEAPF64[($0_1 + 504 | 0) >> 3] = $3_1;
   label$2 : {
    label$3 : {
     label$4 : {
      switch (HEAP32[($0_1 + 500 | 0) >> 2] | 0 | 0) {
      case 0:
      case 8:
       HEAPF64[($0_1 + 240 | 0) >> 3] = $3_1;
       $100($0_1 + 1280 | 0 | 0, 24116 | 0, $0_1 + 240 | 0 | 0) | 0;
       if (!(HEAP32[($0_1 + 496 | 0) >> 2] | 0)) {
        break label$3
       }
       HEAP32[($0_1 + 224 | 0) >> 2] = 20698;
       HEAP32[($0_1 + 228 | 0) >> 2] = $0_1 + 1280 | 0;
       $99($0_1 + 512 | 0 | 0, 24123 | 0, $0_1 + 224 | 0 | 0) | 0;
       break label$2;
      case 6:
       i64toi32_i32$0 = $0_1;
       i64toi32_i32$1 = 0;
       HEAP32[($0_1 + 320 | 0) >> 2] = 0;
       HEAP32[($0_1 + 324 | 0) >> 2] = i64toi32_i32$1;
       $100($0_1 + 1280 | 0 | 0, 24261 | 0, $0_1 + 320 | 0 | 0) | 0;
       HEAP32[($0_1 + 308 | 0) >> 2] = 23694;
       HEAP32[($0_1 + 304 | 0) >> 2] = 20698;
       HEAP32[($0_1 + 312 | 0) >> 2] = $0_1 + 1280 | 0;
       $99($0_1 + 1024 | 0 | 0, 24267 | 0, $0_1 + 304 | 0 | 0) | 0;
       HEAPF64[($0_1 + 288 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 504 | 0) >> 2]);
       $100($0_1 + 1280 | 0 | 0, 24261 | 0, $0_1 + 288 | 0 | 0) | 0;
       label$8 : {
        if (!(HEAP32[($0_1 + 496 | 0) >> 2] | 0)) {
         break label$8
        }
        HEAP32[($0_1 + 276 | 0) >> 2] = 20698;
        HEAP32[($0_1 + 280 | 0) >> 2] = $0_1 + 1280 | 0;
        HEAP32[($0_1 + 272 | 0) >> 2] = $0_1 + 1024 | 0;
        $99($0_1 + 512 | 0 | 0, 24339 | 0, $0_1 + 272 | 0 | 0) | 0;
        break label$2;
       }
       HEAP32[($0_1 + 264 | 0) >> 2] = 23694;
       HEAP32[($0_1 + 260 | 0) >> 2] = 20698;
       HEAP32[($0_1 + 268 | 0) >> 2] = $0_1 + 1280 | 0;
       HEAP32[($0_1 + 256 | 0) >> 2] = $0_1 + 1024 | 0;
       $99($0_1 + 512 | 0 | 0, 24381 | 0, $0_1 + 256 | 0 | 0) | 0;
       break label$2;
      case 7:
       HEAPF64[($0_1 + 416 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 508 | 0) >> 2]);
       $100($0_1 + 1280 | 0 | 0, 24261 | 0, $0_1 + 416 | 0 | 0) | 0;
       label$9 : {
        label$10 : {
         if (!(HEAP32[($0_1 + 496 | 0) >> 2] | 0)) {
          break label$10
         }
         HEAP32[($0_1 + 400 | 0) >> 2] = 20698;
         HEAP32[($0_1 + 404 | 0) >> 2] = $0_1 + 1280 | 0;
         $99($0_1 + 1024 | 0 | 0, 24455 | 0, $0_1 + 400 | 0 | 0) | 0;
         break label$9;
        }
        HEAP32[($0_1 + 388 | 0) >> 2] = 23694;
        HEAP32[($0_1 + 384 | 0) >> 2] = 20698;
        HEAP32[($0_1 + 392 | 0) >> 2] = $0_1 + 1280 | 0;
        $99($0_1 + 1024 | 0 | 0, 24267 | 0, $0_1 + 384 | 0 | 0) | 0;
       }
       HEAPF64[($0_1 + 368 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 504 | 0) >> 2]);
       $100($0_1 + 1280 | 0 | 0, 24261 | 0, $0_1 + 368 | 0 | 0) | 0;
       label$11 : {
        if (!(HEAP32[($0_1 + 496 | 0) >> 2] | 0)) {
         break label$11
        }
        HEAP32[($0_1 + 356 | 0) >> 2] = 20698;
        HEAP32[($0_1 + 360 | 0) >> 2] = $0_1 + 1280 | 0;
        HEAP32[($0_1 + 352 | 0) >> 2] = $0_1 + 1024 | 0;
        $99($0_1 + 512 | 0 | 0, 24339 | 0, $0_1 + 352 | 0 | 0) | 0;
        break label$2;
       }
       HEAP32[($0_1 + 344 | 0) >> 2] = 23694;
       HEAP32[($0_1 + 340 | 0) >> 2] = 20698;
       HEAP32[($0_1 + 348 | 0) >> 2] = $0_1 + 1280 | 0;
       HEAP32[($0_1 + 336 | 0) >> 2] = $0_1 + 1024 | 0;
       $99($0_1 + 512 | 0 | 0, 24381 | 0, $0_1 + 336 | 0 | 0) | 0;
       break label$2;
      default:
       break label$4;
      };
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = 1106;
     HEAP32[($0_1 + 4 | 0) >> 2] = 24597;
     HEAP32[$0_1 >> 2] = 24530;
     $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
     $64($1_1 | 0, 24495 | 0, $0_1 | 0) | 0;
     $35(24617 | 0, 41 | 0, 1 | 0, $1_1 | 0) | 0;
     fimport$9(1 | 0);
     abort();
    }
    HEAP32[($0_1 + 212 | 0) >> 2] = 23694;
    HEAP32[($0_1 + 208 | 0) >> 2] = 20698;
    HEAP32[($0_1 + 216 | 0) >> 2] = $0_1 + 1280 | 0;
    $99($0_1 + 512 | 0 | 0, 24176 | 0, $0_1 + 208 | 0 | 0) | 0;
   }
   label$12 : {
    label$13 : {
     if (!($270() | 0)) {
      break label$13
     }
     if (($1_1 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
      break label$13
     }
     label$14 : {
      label$15 : {
       label$16 : {
        if (!($268() | 0)) {
         break label$16
        }
        if (($1_1 | 0) == (HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0)) {
         break label$15
        }
       }
       if (!($269() | 0)) {
        break label$14
       }
       if (($1_1 | 0) != (HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0)) {
        break label$14
       }
      }
      HEAP32[($0_1 + 196 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 192 | 0) >> 2] = $0_1 + 1440 | 0;
      $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 24659 | 0, $0_1 + 192 | 0 | 0) | 0;
      break label$12;
     }
     HEAP32[($0_1 + 180 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 176 | 0) >> 2] = $0_1 + 1440 | 0;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 24721 | 0, $0_1 + 176 | 0 | 0) | 0;
     break label$12;
    }
    label$17 : {
     label$18 : {
      label$19 : {
       if (!($268() | 0)) {
        break label$19
       }
       if (($1_1 | 0) == (HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0)) {
        break label$18
       }
      }
      if (!($269() | 0)) {
       break label$17
      }
      if (($1_1 | 0) != (HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0)) {
       break label$17
      }
     }
     HEAP32[($0_1 + 164 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 160 | 0) >> 2] = $0_1 + 1472 | 0;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 24783 | 0, $0_1 + 160 | 0 | 0) | 0;
     break label$12;
    }
    HEAP32[($0_1 + 144 | 0) >> 2] = 20690;
    HEAP32[($0_1 + 148 | 0) >> 2] = $1_1;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 24845 | 0, $0_1 + 144 | 0 | 0) | 0;
   }
   $36($0_1 + 512 | 0 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $2_1 = ($1_1 << 16 | 0) + 65536 | 0;
   $1_1 = $2_1 >> 16 | 0;
   if (($2_1 | 0) < (2097152 | 0)) {
    continue label$1
   }
   break label$1;
  };
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $181(32 | 0, i64toi32_i32$1 | 0, $0_1 + 500 | 0 | 0, $0_1 + 496 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $302_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 128 | 0) >> 2] = $302_1;
  HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  $99($0_1 + 1280 | 0 | 0, 23703 | 0, $0_1 + 128 | 0 | 0) | 0;
  label$20 : {
   label$21 : {
    if (!(HEAP32[($0_1 + 496 | 0) >> 2] | 0)) {
     break label$21
    }
    HEAP32[($0_1 + 112 | 0) >> 2] = 20698;
    HEAP32[($0_1 + 116 | 0) >> 2] = $0_1 + 1280 | 0;
    $99($0_1 + 1024 | 0 | 0, 24123 | 0, $0_1 + 112 | 0 | 0) | 0;
    break label$20;
   }
   HEAP32[($0_1 + 100 | 0) >> 2] = 23694;
   HEAP32[($0_1 + 96 | 0) >> 2] = 20698;
   HEAP32[($0_1 + 104 | 0) >> 2] = $0_1 + 1280 | 0;
   $99($0_1 + 1024 | 0 | 0, 24176 | 0, $0_1 + 96 | 0 | 0) | 0;
  }
  $1_1 = (HEAPU8[(0 + 79952 | 0) >> 0] | 0) & -2 | 0;
  $2_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
  label$22 : {
   label$23 : {
    if ((HEAPU8[(81400 + 10 | 0) >> 0] | 0 | 0) != (32 | 0)) {
     break label$23
    }
    label$24 : {
     if (($1_1 & 255 | 0 | 0) != (104 | 0)) {
      break label$24
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = 24952;
     $64($2_1 | 0, 24900 | 0, $0_1 + 32 | 0 | 0) | 0;
     break label$22;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $0_1 + 1408 | 0;
    $64($2_1 | 0, 24959 | 0, $0_1 + 48 | 0 | 0) | 0;
    break label$22;
   }
   label$25 : {
    if (($1_1 & 255 | 0 | 0) != (104 | 0)) {
     break label$25
    }
    HEAP32[($0_1 + 64 | 0) >> 2] = $0_1 + 1472 | 0;
    $64($2_1 | 0, 25011 | 0, $0_1 + 64 | 0 | 0) | 0;
    break label$22;
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = 20690;
   $64($2_1 | 0, 25063 | 0, $0_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = $0_1 + 1024 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23783 | 0, $0_1 + 16 | 0 | 0) | 0;
  $35(23031 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 1504 | 0;
 }
 
 function $295() {
  var $0_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $7$hi = 0, $7_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $1_1 = 0, $5_1 = 0, $4_1 = 0, $2_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $28_1 = 0, $28$hi = 0, $30_1 = 0, $30$hi = 0, $76_1 = 0, $76$hi = 0, $82_1 = 0, $82$hi = 0, $101_1 = 0, $101$hi = 0, $120_1 = 0, $120$hi = 0, $142_1 = 0, $142$hi = 0, $161_1 = 0, $161$hi = 0, $331_1 = 0, $413 = 0, $461 = 0, $461$hi = 0;
  $0_1 = global$0 - 784 | 0;
  global$0 = $0_1;
  i64toi32_i32$2 = 80688;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
  $213($0_1 + 624 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$2 = 83360 + Math_imul(HEAP32[(0 + 32096 | 0) >> 2] | 0, 200) | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
  $213($0_1 + 592 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($1_1 >>> 0 < 2 >>> 0) {
     break label$2
    }
    $2_1 = $1_1 << 5 | 0;
    $3_1 = (HEAP32[(0 + 34080 | 0) >> 2] | 0) + $2_1 | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $28_1 = i64toi32_i32$0;
    $28$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $30_1 = i64toi32_i32$1;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $28$hi;
    i64toi32_i32$2 = $28_1;
    i64toi32_i32$1 = $30$hi;
    i64toi32_i32$3 = $30_1;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
     break label$2
    }
    $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($0_1 + 432 | 0) >> 2] = 18421;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 432 | 0 | 0) | 0;
    HEAP32[($0_1 + 416 | 0) >> 2] = $1_1;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25108 | 0, $0_1 + 416 | 0 | 0) | 0;
    $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($0_1 + 400 | 0) >> 2] = 18421;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25172 | 0, $0_1 + 400 | 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$2;
    label$3 : while (1) {
     HEAP32[($0_1 + 384 | 0) >> 2] = 18620;
     HEAP32[($0_1 + 388 | 0) >> 2] = 50;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 392 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 396 | 0) >> 2] = i64toi32_i32$2;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25223 | 0, $0_1 + 384 | 0 | 0) | 0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $5_1 = i64toi32_i32$4;
     $5$hi = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 4;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $35(25280 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$2;
    label$4 : {
     $3_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
     $4_1 = $3_1 + $2_1 | 0;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$2;
     $5$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     $76_1 = i64toi32_i32$5;
     $76$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = $76$hi;
     i64toi32_i32$3 = $76_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $37_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $38_1 = 0
       } else {
        $38_1 = 1
       }
       $39_1 = $38_1;
      } else {
       $39_1 = 0
      }
      $37_1 = $39_1;
     }
     if ($37_1) {
      break label$4
     }
     label$5 : while (1) {
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$3 = $3_1 + $2_1 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $82_1 = i64toi32_i32$1;
      $82$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$1 = $82$hi;
      i64toi32_i32$5 = $82_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$4 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $7_1 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$4;
      label$6 : {
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$5 = 3;
       i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 0;
       if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$6
       }
       HEAP32[($0_1 + 368 | 0) >> 2] = 20698;
       $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25288 | 0, $0_1 + 368 | 0 | 0) | 0;
       i64toi32_i32$4 = $5$hi;
       $203(HEAP32[(77992 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0, i64toi32_i32$4 | 0, $0_1 + 656 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
       label$7 : {
        label$8 : {
         label$9 : {
          $3_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
          switch ($3_1 + -10 | 0 | 0) {
          case 6:
          case 7:
          case 8:
          case 55:
           break label$8;
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 54:
           break label$9;
          default:
           break label$7;
          };
         }
         label$10 : {
          i64toi32_i32$4 = $5$hi;
          i64toi32_i32$5 = 80688;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
          $101_1 = i64toi32_i32$4;
          $101$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $5$hi;
          i64toi32_i32$4 = $101$hi;
          if (!($281($5_1 | 0, i64toi32_i32$3 | 0, $101_1 | 0, i64toi32_i32$4 | 0) | 0)) {
           break label$10
          }
          HEAP32[($0_1 + 352 | 0) >> 2] = $0_1 + 624 | 0;
          HEAP32[($0_1 + 356 | 0) >> 2] = $0_1 + 656 | 0;
          $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25308 | 0, $0_1 + 352 | 0 | 0) | 0;
          break label$6;
         }
         if (($3_1 + -16 | 0) >>> 0 < 3 >>> 0) {
          break label$8
         }
         if (($3_1 | 0) != (65 | 0)) {
          break label$7
         }
        }
        i64toi32_i32$4 = $5$hi;
        i64toi32_i32$5 = 80688;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
        $120_1 = i64toi32_i32$4;
        $120$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$4 = $120$hi;
        if (!($281($5_1 | 0, i64toi32_i32$3 | 0, $120_1 | 0, i64toi32_i32$4 | 0) | 0)) {
         break label$7
        }
        HEAP32[($0_1 + 336 | 0) >> 2] = $0_1 + 624 | 0;
        HEAP32[($0_1 + 340 | 0) >> 2] = $0_1 + 656 | 0;
        $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25369 | 0, $0_1 + 336 | 0 | 0) | 0;
        break label$6;
       }
       label$11 : {
        label$12 : {
         label$13 : {
          $3_1 = 83360 + Math_imul(HEAP32[(0 + 32096 | 0) >> 2] | 0, 200) | 0;
          $4_1 = HEAPU8[$3_1 >> 0] | 0;
          switch ($4_1 + -128 | 0 | 0) {
          case 1:
          case 14:
          case 53:
           break label$12;
          case 0:
          case 13:
          case 52:
           break label$13;
          default:
           break label$11;
          };
         }
         label$14 : {
          i64toi32_i32$4 = $5$hi;
          i64toi32_i32$5 = $3_1;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
          $142_1 = i64toi32_i32$4;
          $142$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $5$hi;
          i64toi32_i32$4 = $142$hi;
          if (!($281($5_1 | 0, i64toi32_i32$3 | 0, $142_1 | 0, i64toi32_i32$4 | 0) | 0)) {
           break label$14
          }
          HEAP32[($0_1 + 320 | 0) >> 2] = $0_1 + 592 | 0;
          HEAP32[($0_1 + 324 | 0) >> 2] = $0_1 + 656 | 0;
          $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25308 | 0, $0_1 + 320 | 0 | 0) | 0;
          break label$6;
         }
         label$15 : {
          switch ($4_1 + -129 | 0 | 0) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
           break label$11;
          case 0:
          case 13:
           break label$12;
          default:
           break label$15;
          };
         }
         if (($4_1 | 0) != (181 | 0)) {
          break label$11
         }
        }
        i64toi32_i32$4 = $5$hi;
        i64toi32_i32$5 = $3_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
        $161_1 = i64toi32_i32$4;
        $161$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$4 = $161$hi;
        if (!($281($5_1 | 0, i64toi32_i32$3 | 0, $161_1 | 0, i64toi32_i32$4 | 0) | 0)) {
         break label$11
        }
        HEAP32[($0_1 + 304 | 0) >> 2] = $0_1 + 592 | 0;
        HEAP32[($0_1 + 308 | 0) >> 2] = $0_1 + 656 | 0;
        $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25369 | 0, $0_1 + 304 | 0 | 0) | 0;
        break label$6;
       }
       HEAP32[($0_1 + 288 | 0) >> 2] = 20690;
       $3_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
       HEAP32[($0_1 + 292 | 0) >> 2] = $0_1 + 656 | 0;
       $64($3_1 | 0, 25430 | 0, $0_1 + 288 | 0 | 0) | 0;
      }
      label$16 : {
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = $6$hi;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$5 = $7_1;
       i64toi32_i32$3 = $6$hi;
       i64toi32_i32$2 = $6_1;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$16
       }
       label$17 : {
        label$18 : {
         label$19 : {
          label$20 : {
           label$21 : {
            label$22 : {
             label$23 : {
              label$24 : {
               $3_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
               i64toi32_i32$5 = $7$hi;
               $4_1 = HEAP32[((HEAP32[(($3_1 + ($1_1 << 2 | 0) | 0) + 176 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0;
               switch ($4_1 + -1 | 0 | 0) {
               case 7:
                break label$19;
               case 5:
                break label$20;
               case 4:
                break label$21;
               case 3:
                break label$22;
               case 2:
                break label$23;
               case 0:
               case 1:
                break label$24;
               default:
                break label$18;
               };
              }
              i64toi32_i32$5 = $7$hi;
              $110($0_1 + 448 | 0 | 0, $3_1 | 0, $1_1 | 0, $7_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, $0_1 + 460 | 0 | 0);
              $3_1 = HEAP8[($0_1 + 448 | 0) >> 0] | 0;
              HEAP32[($0_1 + 32 | 0) >> 2] = $3_1;
              HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
              $99($0_1 + 464 | 0 | 0, 25484 | 0, $0_1 + 32 | 0 | 0) | 0;
              $3_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
              label$25 : {
               if (!(HEAP32[($0_1 + 460 | 0) >> 2] | 0)) {
                break label$25
               }
               HEAP32[($0_1 + 16 | 0) >> 2] = 20698;
               HEAP32[($0_1 + 20 | 0) >> 2] = $0_1 + 464 | 0;
               $64($3_1 | 0, 25491 | 0, $0_1 + 16 | 0 | 0) | 0;
               break label$17;
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = 23694;
              HEAP32[$0_1 >> 2] = 20698;
              HEAP32[($0_1 + 8 | 0) >> 2] = $0_1 + 464 | 0;
              $64($3_1 | 0, 25541 | 0, $0_1 | 0) | 0;
              break label$17;
             }
             i64toi32_i32$5 = $7$hi;
             $110($0_1 + 448 | 0 | 0, $3_1 | 0, $1_1 | 0, $7_1 | 0, i64toi32_i32$5 | 0, 3 | 0, $0_1 + 460 | 0 | 0);
             HEAP32[($0_1 + 80 | 0) >> 2] = HEAP16[($0_1 + 448 | 0) >> 1] | 0;
             $99($0_1 + 464 | 0 | 0, 25616 | 0, $0_1 + 80 | 0 | 0) | 0;
             $3_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
             label$26 : {
              if (!(HEAP32[($0_1 + 460 | 0) >> 2] | 0)) {
               break label$26
              }
              HEAP32[($0_1 + 64 | 0) >> 2] = 20698;
              HEAP32[($0_1 + 68 | 0) >> 2] = $0_1 + 464 | 0;
              $64($3_1 | 0, 25619 | 0, $0_1 + 64 | 0 | 0) | 0;
              i64toi32_i32$5 = $7$hi;
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = 2;
              i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
              i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
               i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
              }
              $6_1 = i64toi32_i32$1;
              $6$hi = i64toi32_i32$0;
              break label$16;
             }
             HEAP32[($0_1 + 52 | 0) >> 2] = 23694;
             HEAP32[($0_1 + 48 | 0) >> 2] = 20698;
             HEAP32[($0_1 + 56 | 0) >> 2] = $0_1 + 464 | 0;
             $64($3_1 | 0, 25681 | 0, $0_1 + 48 | 0 | 0) | 0;
             i64toi32_i32$0 = $7$hi;
             i64toi32_i32$5 = $7_1;
             i64toi32_i32$2 = 0;
             i64toi32_i32$3 = 2;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
             }
             $6_1 = i64toi32_i32$4;
             $6$hi = i64toi32_i32$1;
             break label$16;
            }
            i64toi32_i32$1 = $7$hi;
            $110($0_1 + 448 | 0 | 0, $3_1 | 0, $1_1 | 0, $7_1 | 0, i64toi32_i32$1 | 0, 4 | 0, $0_1 + 460 | 0 | 0);
            HEAP32[($0_1 + 128 | 0) >> 2] = HEAP32[($0_1 + 448 | 0) >> 2] | 0;
            $99($0_1 + 464 | 0 | 0, 25616 | 0, $0_1 + 128 | 0 | 0) | 0;
            $3_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
            label$27 : {
             if (!(HEAP32[($0_1 + 460 | 0) >> 2] | 0)) {
              break label$27
             }
             HEAP32[($0_1 + 112 | 0) >> 2] = 20698;
             HEAP32[($0_1 + 116 | 0) >> 2] = $0_1 + 464 | 0;
             $64($3_1 | 0, 25768 | 0, $0_1 + 112 | 0 | 0) | 0;
             i64toi32_i32$1 = $7$hi;
             i64toi32_i32$0 = $7_1;
             i64toi32_i32$5 = 0;
             i64toi32_i32$3 = 4;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
             i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $6_1 = i64toi32_i32$2;
             $6$hi = i64toi32_i32$4;
             break label$16;
            }
            HEAP32[($0_1 + 100 | 0) >> 2] = 23694;
            HEAP32[($0_1 + 96 | 0) >> 2] = 20698;
            HEAP32[($0_1 + 104 | 0) >> 2] = $0_1 + 464 | 0;
            $64($3_1 | 0, 25830 | 0, $0_1 + 96 | 0 | 0) | 0;
            i64toi32_i32$4 = $7$hi;
            i64toi32_i32$1 = $7_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 4;
            i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
            i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $6_1 = i64toi32_i32$5;
            $6$hi = i64toi32_i32$2;
            break label$16;
           }
           i64toi32_i32$2 = $7$hi;
           $110($0_1 + 448 | 0 | 0, $3_1 | 0, $1_1 | 0, $7_1 | 0, i64toi32_i32$2 | 0, 5 | 0, $0_1 + 460 | 0 | 0);
           i64toi32_i32$4 = $0_1;
           i64toi32_i32$2 = HEAP32[($0_1 + 448 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 452 | 0) >> 2] | 0;
           $6_1 = i64toi32_i32$2;
           $6$hi = i64toi32_i32$1;
           i64toi32_i32$2 = $0_1;
           HEAP32[($0_1 + 176 | 0) >> 2] = $6_1;
           HEAP32[($0_1 + 180 | 0) >> 2] = i64toi32_i32$1;
           $331_1 = $0_1 + 464 | 0;
           i64toi32_i32$4 = $6_1;
           i64toi32_i32$2 = 1;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
            $40_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
             if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $41_1 = 0
             } else {
              $41_1 = 1
             }
             $42_1 = $41_1;
            } else {
             $42_1 = 0
            }
            $40_1 = $42_1;
           }
           $99($331_1 | 0, ($40_1 ? 23703 : 23708) | 0, $0_1 + 176 | 0 | 0) | 0;
           $3_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
           label$28 : {
            if (!(HEAP32[($0_1 + 460 | 0) >> 2] | 0)) {
             break label$28
            }
            HEAP32[($0_1 + 160 | 0) >> 2] = 20698;
            HEAP32[($0_1 + 164 | 0) >> 2] = $0_1 + 464 | 0;
            $64($3_1 | 0, 25917 | 0, $0_1 + 160 | 0 | 0) | 0;
            i64toi32_i32$4 = $7$hi;
            i64toi32_i32$3 = $7_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = 8;
            i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
            i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
             i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
            }
            $6_1 = i64toi32_i32$0;
            $6$hi = i64toi32_i32$5;
            break label$16;
           }
           HEAP32[($0_1 + 148 | 0) >> 2] = 23694;
           HEAP32[($0_1 + 144 | 0) >> 2] = 20698;
           HEAP32[($0_1 + 152 | 0) >> 2] = $0_1 + 464 | 0;
           $64($3_1 | 0, 25991 | 0, $0_1 + 144 | 0 | 0) | 0;
           i64toi32_i32$5 = $7$hi;
           i64toi32_i32$4 = $7_1;
           i64toi32_i32$3 = 0;
           i64toi32_i32$2 = 8;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
           i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
           }
           $6_1 = i64toi32_i32$1;
           $6$hi = i64toi32_i32$0;
           break label$16;
          }
          i64toi32_i32$0 = $7$hi;
          $110($0_1 + 448 | 0 | 0, $3_1 | 0, $1_1 | 0, $7_1 | 0, i64toi32_i32$0 | 0, 6 | 0, $0_1 + 460 | 0 | 0);
          HEAPF64[($0_1 + 224 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 448 | 0) >> 2]);
          $100($0_1 + 464 | 0 | 0, 26090 | 0, $0_1 + 224 | 0 | 0) | 0;
          $3_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
          label$29 : {
           if (!(HEAP32[($0_1 + 460 | 0) >> 2] | 0)) {
            break label$29
           }
           HEAP32[($0_1 + 208 | 0) >> 2] = 20698;
           HEAP32[($0_1 + 212 | 0) >> 2] = $0_1 + 464 | 0;
           $64($3_1 | 0, 25768 | 0, $0_1 + 208 | 0 | 0) | 0;
           i64toi32_i32$0 = $7$hi;
           i64toi32_i32$5 = $7_1;
           i64toi32_i32$4 = 0;
           i64toi32_i32$2 = 4;
           i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
           if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $6_1 = i64toi32_i32$3;
           $6$hi = i64toi32_i32$1;
           break label$16;
          }
          HEAP32[($0_1 + 196 | 0) >> 2] = 23694;
          HEAP32[($0_1 + 192 | 0) >> 2] = 20698;
          HEAP32[($0_1 + 200 | 0) >> 2] = $0_1 + 464 | 0;
          $64($3_1 | 0, 25830 | 0, $0_1 + 192 | 0 | 0) | 0;
          i64toi32_i32$1 = $7$hi;
          i64toi32_i32$0 = $7_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$2 = 4;
          i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
          i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
          }
          $6_1 = i64toi32_i32$4;
          $6$hi = i64toi32_i32$3;
          break label$16;
         }
         i64toi32_i32$3 = $7$hi;
         $110($0_1 + 448 | 0 | 0, $3_1 | 0, $1_1 | 0, $7_1 | 0, i64toi32_i32$3 | 0, 8 | 0, $0_1 + 460 | 0 | 0);
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$3 = HEAP32[($0_1 + 448 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 452 | 0) >> 2] | 0;
         $413 = i64toi32_i32$3;
         i64toi32_i32$3 = $0_1;
         HEAP32[($0_1 + 272 | 0) >> 2] = $413;
         HEAP32[($0_1 + 276 | 0) >> 2] = i64toi32_i32$0;
         $100($0_1 + 464 | 0 | 0, 26096 | 0, $0_1 + 272 | 0 | 0) | 0;
         $3_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
         label$30 : {
          if (!(HEAP32[($0_1 + 460 | 0) >> 2] | 0)) {
           break label$30
          }
          HEAP32[($0_1 + 256 | 0) >> 2] = 20698;
          HEAP32[($0_1 + 260 | 0) >> 2] = $0_1 + 464 | 0;
          $64($3_1 | 0, 25917 | 0, $0_1 + 256 | 0 | 0) | 0;
          i64toi32_i32$0 = $7$hi;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = 8;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
          i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $6_1 = i64toi32_i32$5;
          $6$hi = i64toi32_i32$4;
          break label$16;
         }
         HEAP32[($0_1 + 244 | 0) >> 2] = 23694;
         HEAP32[($0_1 + 240 | 0) >> 2] = 20698;
         HEAP32[($0_1 + 248 | 0) >> 2] = $0_1 + 464 | 0;
         $64($3_1 | 0, 25991 | 0, $0_1 + 240 | 0 | 0) | 0;
         i64toi32_i32$4 = $7$hi;
         i64toi32_i32$0 = $7_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$2 = 8;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $6_1 = i64toi32_i32$3;
         $6$hi = i64toi32_i32$5;
         break label$16;
        }
        $35(26103 | 0, 18 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
       }
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$4 = $7_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $6_1 = i64toi32_i32$1;
       $6$hi = i64toi32_i32$3;
      }
      label$31 : {
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$5 = $7_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 3;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$31
       }
       $35(25280 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
      }
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $5_1 = i64toi32_i32$4;
      $5$hi = i64toi32_i32$0;
      $3_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
      i64toi32_i32$1 = $3_1 + $2_1 | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      $461 = i64toi32_i32$0;
      $461$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$0 = $461$hi;
      i64toi32_i32$3 = $461;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
       $43_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $44_1 = 0
        } else {
         $44_1 = 1
        }
        $45_1 = $44_1;
       } else {
        $45_1 = 0
       }
       $43_1 = $45_1;
      }
      if ($43_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $35(23031 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (4 | 0)) {
    continue label$1
   }
   break label$1;
  };
  global$0 = $0_1 + 784 | 0;
 }
 
 function $296() {
  $35(20918 | 0, 15 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(26122 | 0, 48 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(20934 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(20945 | 0, 47 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(20993 | 0, 68 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21062 | 0, 42 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21105 | 0, 11 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21117 | 0, 16 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $297() {
  var i64toi32_i32$2 = 0, $0_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $55_1 = 0, $78_1 = 0, $80_1 = 0, $85_1 = 0, $87_1 = 0, $92_1 = 0, $94_1 = 0, $100_1 = 0, $102_1 = 0, $104_1 = 0, $110_1 = 0, $112_1 = 0, $114_1 = 0, $120_1 = 0, $122_1 = 0, $124_1 = 0, $126_1 = 0, $128_1 = 0, $130_1 = 0, $132_1 = 0, $134_1 = 0, $136_1 = 0;
  $0_1 = global$0 - 432 | 0;
  global$0 = $0_1;
  $35(26171 | 0, 24 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 288 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26196 | 0, $0_1 + 288 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 272 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26263 | 0, $0_1 + 272 | 0 | 0) | 0;
  HEAP32[($0_1 + 256 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26314 | 0, $0_1 + 256 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 240 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26360 | 0, $0_1 + 240 | 0 | 0) | 0;
  HEAP32[($0_1 + 224 | 0) >> 2] = 20698;
  HEAP32[($0_1 + 228 | 0) >> 2] = 77824;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26394 | 0, $0_1 + 224 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    switch (HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) {
    case 2:
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 7302773;
     HEAP32[($0_1 + 304 | 0) >> 2] = 1735289166;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$0;
     break label$1;
    case 0:
     $26_1 = 0;
     $27_1 = HEAPU8[($26_1 + 26440 | 0) >> 0] | 0 | ((HEAPU8[($26_1 + 26441 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($26_1 + 26442 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($26_1 + 26443 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     HEAP8[($0_1 + 307 | 0) >> 0] = $27_1;
     HEAP8[($0_1 + 308 | 0) >> 0] = $27_1 >>> 8 | 0;
     HEAP8[($0_1 + 309 | 0) >> 0] = $27_1 >>> 16 | 0;
     HEAP8[($0_1 + 310 | 0) >> 0] = $27_1 >>> 24 | 0;
     $28_1 = 0;
     HEAP32[($0_1 + 304 | 0) >> 2] = HEAPU8[($28_1 + 26437 | 0) >> 0] | 0 | ((HEAPU8[($28_1 + 26438 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($28_1 + 26439 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($28_1 + 26440 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     break label$1;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   $29_1 = 0;
   $30_1 = HEAPU8[($29_1 + 26451 | 0) >> 0] | 0 | ((HEAPU8[($29_1 + 26452 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($29_1 + 26453 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($29_1 + 26454 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($0_1 + 311 | 0) >> 0] = $30_1;
   HEAP8[($0_1 + 312 | 0) >> 0] = $30_1 >>> 8 | 0;
   HEAP8[($0_1 + 313 | 0) >> 0] = $30_1 >>> 16 | 0;
   HEAP8[($0_1 + 314 | 0) >> 0] = $30_1 >>> 24 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26444 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26445 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26446 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26447 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26448 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26449 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26450 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26451 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $55_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 304 | 0) >> 2] = $55_1;
   HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$1;
  }
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26455 | 0, $0_1 + 208 | 0 | 0) | 0;
  HEAP32[($0_1 + 192 | 0) >> 2] = 20698;
  HEAP32[($0_1 + 196 | 0) >> 2] = $0_1 + 304 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26394 | 0, $0_1 + 192 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$5 : {
   label$6 : {
    switch (HEAP32[(0 + 77816 | 0) >> 2] | 0 | 0) {
    case 6:
     $31_1 = 0;
     HEAP32[($0_1 + 320 | 0) >> 2] = HEAPU8[($31_1 + 26513 | 0) >> 0] | 0 | ((HEAPU8[($31_1 + 26514 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($31_1 + 26515 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($31_1 + 26516 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26505 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26506 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26507 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26508 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26509 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26510 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26511 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26512 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $78_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 312 | 0) >> 2] = $78_1;
     HEAP32[($0_1 + 316 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26497 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26498 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26499 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26500 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26501 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26502 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26503 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26504 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $80_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $80_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$1;
     break label$5;
    case 7:
     $32_1 = 0;
     HEAP32[($0_1 + 320 | 0) >> 2] = HEAPU8[($32_1 + 26533 | 0) >> 0] | 0 | ((HEAPU8[($32_1 + 26534 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($32_1 + 26535 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($32_1 + 26536 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26525 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26526 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26527 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26528 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26529 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26530 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26531 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26532 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $85_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 312 | 0) >> 2] = $85_1;
     HEAP32[($0_1 + 316 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26517 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26518 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26519 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26520 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26521 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26522 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26523 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26524 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $87_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $87_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$1;
     break label$5;
    case 8:
     $33_1 = 0;
     HEAP32[($0_1 + 320 | 0) >> 2] = HEAPU8[($33_1 + 26553 | 0) >> 0] | 0 | ((HEAPU8[($33_1 + 26554 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($33_1 + 26555 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($33_1 + 26556 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26545 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26546 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26547 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26548 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26549 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26550 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26551 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26552 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $92_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 312 | 0) >> 2] = $92_1;
     HEAP32[($0_1 + 316 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26537 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26538 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26539 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26540 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26541 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26542 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26543 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26544 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $94_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $94_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$1;
     break label$5;
    case 3:
     $37_1 = 0;
     HEAP16[($0_1 + 328 | 0) >> 1] = HEAPU8[($37_1 + 26581 | 0) >> 0] | 0 | ((HEAPU8[($37_1 + 26582 | 0) >> 0] | 0) << 8 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26573 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26574 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26575 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26576 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26577 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26578 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26579 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26580 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $100_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 320 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $100_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26565 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26566 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26567 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26568 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26569 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26570 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26571 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26572 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $102_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 312 | 0) >> 2] = $102_1;
     HEAP32[($0_1 + 316 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26557 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26558 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26559 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26560 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26561 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26562 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26563 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26564 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $104_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $104_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$0;
     break label$5;
    case 4:
     $38_1 = 0;
     HEAP16[($0_1 + 328 | 0) >> 1] = HEAPU8[($38_1 + 26607 | 0) >> 0] | 0 | ((HEAPU8[($38_1 + 26608 | 0) >> 0] | 0) << 8 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26599 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26600 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26601 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26602 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26603 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26604 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26605 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26606 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $110_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 320 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $110_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26591 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26592 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26593 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26594 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26595 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26596 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26597 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26598 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $112_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 312 | 0) >> 2] = $112_1;
     HEAP32[($0_1 + 316 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26583 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26584 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26585 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26586 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26587 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26588 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26589 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26590 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $114_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $114_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$1;
     break label$5;
    case 5:
     $39_1 = 0;
     HEAP16[($0_1 + 328 | 0) >> 1] = HEAPU8[($39_1 + 26633 | 0) >> 0] | 0 | ((HEAPU8[($39_1 + 26634 | 0) >> 0] | 0) << 8 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26625 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26626 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26627 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26628 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26629 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26630 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26631 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26632 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $120_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 320 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $120_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26617 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26618 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26619 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26620 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26621 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26622 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26623 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26624 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $122_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 312 | 0) >> 2] = $122_1;
     HEAP32[($0_1 + 316 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26609 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26610 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26611 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26612 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26613 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26614 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26615 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26616 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $124_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $124_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$0;
     break label$5;
    case 0:
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26642 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26643 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26644 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26645 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26646 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26647 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26648 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26649 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $126_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     $34_1 = $126_1;
     HEAP8[($0_1 + 311 | 0) >> 0] = $34_1;
     HEAP8[($0_1 + 312 | 0) >> 0] = $34_1 >>> 8 | 0;
     HEAP8[($0_1 + 313 | 0) >> 0] = $34_1 >>> 16 | 0;
     HEAP8[($0_1 + 314 | 0) >> 0] = $34_1 >>> 24 | 0;
     HEAP8[($0_1 + 315 | 0) >> 0] = i64toi32_i32$1;
     HEAP8[($0_1 + 316 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
     HEAP8[($0_1 + 317 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
     HEAP8[($0_1 + 318 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26635 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26636 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26637 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26638 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26639 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26640 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26641 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26642 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $128_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $128_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$0;
     break label$5;
    case 1:
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26657 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26658 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26659 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26660 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26661 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26662 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26663 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26664 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $130_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     $35_1 = $130_1;
     HEAP8[($0_1 + 311 | 0) >> 0] = $35_1;
     HEAP8[($0_1 + 312 | 0) >> 0] = $35_1 >>> 8 | 0;
     HEAP8[($0_1 + 313 | 0) >> 0] = $35_1 >>> 16 | 0;
     HEAP8[($0_1 + 314 | 0) >> 0] = $35_1 >>> 24 | 0;
     HEAP8[($0_1 + 315 | 0) >> 0] = i64toi32_i32$1;
     HEAP8[($0_1 + 316 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
     HEAP8[($0_1 + 317 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
     HEAP8[($0_1 + 318 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26650 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26651 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26652 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26653 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26654 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26655 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26656 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26657 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $132_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 304 | 0) >> 2] = $132_1;
     HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$0;
     break label$5;
    case 2:
     break label$6;
    default:
     break label$5;
    };
   }
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26672 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26673 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26674 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26675 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26676 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26677 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26678 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26679 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $134_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   $36_1 = $134_1;
   HEAP8[($0_1 + 311 | 0) >> 0] = $36_1;
   HEAP8[($0_1 + 312 | 0) >> 0] = $36_1 >>> 8 | 0;
   HEAP8[($0_1 + 313 | 0) >> 0] = $36_1 >>> 16 | 0;
   HEAP8[($0_1 + 314 | 0) >> 0] = $36_1 >>> 24 | 0;
   HEAP8[($0_1 + 315 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[($0_1 + 316 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[($0_1 + 317 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[($0_1 + 318 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 26665 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26666 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26667 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26668 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 26669 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 26670 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 26671 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 26672 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $136_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 304 | 0) >> 2] = $136_1;
   HEAP32[($0_1 + 308 | 0) >> 2] = i64toi32_i32$0;
  }
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 176 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26680 | 0, $0_1 + 176 | 0 | 0) | 0;
  HEAP32[($0_1 + 160 | 0) >> 2] = 20698;
  HEAP32[($0_1 + 164 | 0) >> 2] = $0_1 + 304 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26394 | 0, $0_1 + 160 | 0 | 0) | 0;
  $35(26736 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 144 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26744 | 0, $0_1 + 144 | 0 | 0) | 0;
  HEAP32[($0_1 + 128 | 0) >> 2] = 20698;
  HEAP32[($0_1 + 132 | 0) >> 2] = 32;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26779 | 0, $0_1 + 128 | 0 | 0) | 0;
  $35(26736 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26822 | 0, $0_1 + 112 | 0 | 0) | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = 20698;
  HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[(0 + 32096 | 0) >> 2] | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26779 | 0, $0_1 + 96 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26868 | 0, $0_1 + 80 | 0 | 0) | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 20698;
  HEAP32[($0_1 + 68 | 0) >> 2] = HEAP32[(0 + 32084 | 0) >> 2] | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26779 | 0, $0_1 + 64 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26917 | 0, $0_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 20698;
  HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[(0 + 32092 | 0) >> 2] | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26779 | 0, $0_1 + 32 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 20690;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26966 | 0, $0_1 + 16 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 20698;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[(0 + 32088 | 0) >> 2] | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 26779 | 0, $0_1 | 0) | 0;
  $35(26736 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(23031 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 432 | 0;
 }
 
 function $298() {
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $0_1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $3_1 = 0, $3$hi = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $38_1 = 0, $38$hi = 0, $2_1 = 0, $2$hi = 0, $77_1 = 0, $77$hi = 0;
  $0_1 = global$0 - 208 | 0;
  global$0 = $0_1;
  $35(27015 | 0, 30 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 64 | 0 | 0) | 0;
  $35(27046 | 0, 61 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 18421;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25172 | 0, $0_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 190;
  HEAP32[($0_1 + 36 | 0) >> 2] = 18620;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 27108 | 0, $0_1 + 32 | 0 | 0) | 0;
  $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $38_1 = i64toi32_i32$0;
   $38$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $15_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $15_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   i64toi32_i32$0 = $15_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $16_1 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
    $16_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $16_1;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
    $17_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0) {
      $18_1 = 0
     } else {
      $18_1 = 1
     }
     $19_1 = $18_1;
    } else {
     $19_1 = 0
    }
    $17_1 = $19_1;
   }
   if ($17_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   $1_1 = $2_1;
   label$2 : while (1) {
    $35(27171 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$1 = $3$hi;
    $203(HEAP32[(77992 + 8 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $0_1 + 80 | 0 | 0, HEAP32[(0 + 79764 | 0) >> 2] | 0 | 0);
    HEAP32[($0_1 + 16 | 0) >> 2] = 20690;
    HEAP32[($0_1 + 20 | 0) >> 2] = $0_1 + 80 | 0;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 25430 | 0, $0_1 + 16 | 0 | 0) | 0;
    $214($0_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, 1 | 0);
    HEAP32[$0_1 >> 2] = 20698;
    HEAP32[($0_1 + 4 | 0) >> 2] = $0_1 + 80 | 0;
    $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 27178 | 0, $0_1 | 0) | 0;
    $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$3 = (HEAP32[(0 + 34080 | 0) >> 2] | 0) + 40 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $77_1 = i64toi32_i32$1;
    $77$hi = i64toi32_i32$2;
    $1_1 = $1_1 + 4 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $20_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $20_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 >> 31 | 0;
     $21_1 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
     $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $21_1;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $77$hi;
    i64toi32_i32$1 = $77_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $35(23031 | 0, 10 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 208 | 0;
 }
 
 function $299() {
  var $0_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $0_1 = global$0 - 160 | 0;
  global$0 = $0_1;
  $1_1 = $30(17727 | 0, 17127 | 0) | 0;
  HEAP32[(0 + 77748 | 0) >> 2] = $1_1;
  $39($1_1 | 0) | 0;
  $1_1 = $30(17740 | 0, 17127 | 0) | 0;
  HEAP32[(0 + 77752 | 0) >> 2] = $1_1;
  $39($1_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 77988 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 17756;
    $99($0_1 + 32 | 0 | 0, 17749 | 0, $0_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   $4_1 = 0;
   $5_1 = HEAPU8[($4_1 + 17700 | 0) >> 0] | 0 | ((HEAPU8[($4_1 + 17701 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 17702 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 17703 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($0_1 + 39 | 0) >> 0] = $5_1;
   HEAP8[($0_1 + 40 | 0) >> 0] = $5_1 >>> 8 | 0;
   HEAP8[($0_1 + 41 | 0) >> 0] = $5_1 >>> 16 | 0;
   HEAP8[($0_1 + 42 | 0) >> 0] = $5_1 >>> 24 | 0;
   $3_1 = 0;
   i64toi32_i32$1 = HEAPU8[($3_1 + 17697 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 17698 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3_1 + 17699 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3_1 + 17700 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = HEAPU8[($3_1 + 17693 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 17694 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3_1 + 17695 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3_1 + 17696 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$1;
  }
  $1_1 = $30($0_1 + 32 | 0 | 0, 17127 | 0) | 0;
  HEAP32[(0 + 77744 | 0) >> 2] = $1_1;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if ((HEAP32[(0 + 77988 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$4
    }
    $35(17762 | 0, 480 | 0, 1 | 0, $1_1 | 0) | 0;
   }
   $289(18243 | 0);
   $300();
   $35(17204 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18250 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $297();
   $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18285 | 0, 21 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18307 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $295();
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18307 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $298();
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17343 | 0, 7 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $296();
   $1_1 = HEAP32[(0 + 77744 | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     if ((HEAP32[(0 + 77988 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$6
     }
     $35(17690 | 0, 2 | 0, 1 | 0, $1_1 | 0) | 0;
     break label$5;
    }
    $39($1_1 | 0) | 0;
   }
   global$0 = $0_1 + 160 | 0;
   return;
  }
  HEAP32[$0_1 >> 2] = $0_1 + 32 | 0;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 17129 | 0, $0_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $300() {
  var $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $35(21418 | 0, 33 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(21452 | 0, 42 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 77792 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 78224;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 21495 | 0, $0_1 | 0) | 0;
  }
  $35(21562 | 0, 76 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  $35(27206 | 0, 61 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   if (HEAP32[(0 + 77984 | 0) >> 2] | 0) {
    break label$2
   }
   $35(27268 | 0, 66 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  }
  $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $0_1 + 16 | 0;
 }
 
 function $301() {
  var $0_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $0_1 = global$0 - 304 | 0;
  global$0 = $0_1;
  $4_1 = 0;
  $5_1 = HEAPU8[($4_1 + 18350 | 0) >> 0] | 0 | ((HEAPU8[($4_1 + 18351 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 18352 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 18353 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  HEAP8[($0_1 + 183 | 0) >> 0] = $5_1;
  HEAP8[($0_1 + 184 | 0) >> 0] = $5_1 >>> 8 | 0;
  HEAP8[($0_1 + 185 | 0) >> 0] = $5_1 >>> 16 | 0;
  HEAP8[($0_1 + 186 | 0) >> 0] = $5_1 >>> 24 | 0;
  $3_1 = 0;
  i64toi32_i32$1 = HEAPU8[($3_1 + 18347 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 18348 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3_1 + 18349 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3_1 + 18350 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  HEAP32[($0_1 + 176 | 0) >> 2] = HEAPU8[($3_1 + 18343 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 18344 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3_1 + 18345 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3_1 + 18346 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  HEAP32[($0_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[(0 + 77988 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 144 | 0) >> 2] = $0_1 + 176 | 0;
     $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 17179 | 0, $0_1 + 144 | 0 | 0) | 0;
     break label$2;
    }
    $1_1 = $30($0_1 + 176 | 0 | 0, 17127 | 0) | 0;
    HEAP32[(0 + 77744 | 0) >> 2] = $1_1;
    if (!$1_1) {
     break label$1
    }
   }
   $289(18662 | 0);
   $300();
   $35(17204 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18250 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17704 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18354 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($0_1 + 128 | 0) >> 2] = 18421;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18360 | 0, $0_1 + 128 | 0 | 0) | 0;
   $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($0_1 + 112 | 0) >> 2] = 18421;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 112 | 0 | 0) | 0;
   $35(18455 | 0, 30 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18486 | 0, 37 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18524 | 0, 27 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18552 | 0, 30 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18583 | 0, 36 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($0_1 + 96 | 0) >> 2] = 18620;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18436 | 0, $0_1 + 96 | 0 | 0) | 0;
   HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[(0 + 78360 | 0) >> 2] | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18628 | 0, $0_1 + 80 | 0 | 0) | 0;
   HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[(78360 + 4 | 0) >> 2] | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18628 | 0, $0_1 + 64 | 0 | 0) | 0;
   HEAPF64[($0_1 + 48 | 0) >> 3] = +Math_fround(Math_fround(HEAP32[(0 + 78360 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[(78360 + 4 | 0) >> 2] | 0 | 0));
   $65(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18644 | 0, $0_1 + 48 | 0 | 0) | 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[(78360 + 16 | 0) >> 2] | 0;
   $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18628 | 0, $0_1 + 32 | 0 | 0) | 0;
   HEAPF64[($0_1 + 16 | 0) >> 3] = +Math_fround(Math_fround(HEAP32[(78360 + 16 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[(0 + 78360 | 0) >> 2] | 0 | 0));
   $65(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18644 | 0, $0_1 + 16 | 0 | 0) | 0;
   $35(18429 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17713 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18250 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $297();
   $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(18250 | 0, 34 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17279 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $293();
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17279 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $294();
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17279 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $295();
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17279 | 0, 35 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $298();
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    if (!(HEAP32[(0 + 32076 | 0) >> 2] | 0)) {
     break label$4
    }
    $35(18668 | 0, 57 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(18726 | 0, 13 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $1_1 = $30(17727 | 0, 18740 | 0) | 0;
    HEAP32[(0 + 77748 | 0) >> 2] = $1_1;
    label$5 : {
     if (!($212($0_1 + 176 | 0 | 0, 512 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     label$6 : while (1) {
      HEAP32[$0_1 >> 2] = $0_1 + 176 | 0;
      $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 18742 | 0, $0_1 | 0) | 0;
      if ($212($0_1 + 176 | 0 | 0, 512 | 0, HEAP32[(0 + 77748 | 0) >> 2] | 0 | 0) | 0) {
       continue label$6
      }
      break label$6;
     };
    }
    $39(HEAP32[(0 + 77748 | 0) >> 2] | 0 | 0) | 0;
    $35(18750 | 0, 6 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17558 | 0, 8 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
    $35(17157 | 0, 5 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   }
   $296();
   label$7 : {
    if ((HEAP32[(0 + 77988 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$7
    }
    $35(18757 | 0, 1435 | 0, 1 | 0, HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   }
   $39(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0) | 0;
   global$0 = $0_1 + 304 | 0;
   return;
  }
  HEAP32[($0_1 + 160 | 0) >> 2] = $0_1 + 176 | 0;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 17129 | 0, $0_1 + 160 | 0 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) != (1 | 0)) {
     break label$2
    }
    $92($2_1 + 16 | 0 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $3_1 = 0;
   $4_1 = HEAPU8[($3_1 + 20863 | 0) >> 0] | 0 | ((HEAPU8[($3_1 + 20864 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3_1 + 20865 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3_1 + 20866 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($2_1 + 19 | 0) >> 0] = $4_1;
   HEAP8[($2_1 + 20 | 0) >> 0] = $4_1 >>> 8 | 0;
   HEAP8[($2_1 + 21 | 0) >> 0] = $4_1 >>> 16 | 0;
   HEAP8[($2_1 + 22 | 0) >> 0] = $4_1 >>> 24 | 0;
   $5_1 = 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAPU8[($5_1 + 20860 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 20861 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5_1 + 20862 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5_1 + 20863 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  }
  HEAP32[$2_1 >> 2] = 90;
  HEAP32[($2_1 + 4 | 0) >> 2] = $2_1 + 16 | 0;
  $64(HEAP32[(0 + 77744 | 0) >> 2] | 0 | 0, 23355 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 144 | 0;
 }
 
 function $303($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 448 | 0;
  global$0 = $5_1;
  i64toi32_i32$1 = ($5_1 + 384 | 0) + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 384 | 0) + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 384 | 0) + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 384 | 0) + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 384 | 0) + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 384 | 0) + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 392 | 0) >> 2] = 0;
  HEAP32[($5_1 + 396 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 384 | 0) >> 2] = 0;
  HEAP32[($5_1 + 388 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 320 | 0) + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 320 | 0) + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 320 | 0) + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 320 | 0) + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 320 | 0) + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($5_1 + 320 | 0) + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 328 | 0) >> 2] = 0;
  HEAP32[($5_1 + 332 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 320 | 0) >> 2] = 0;
  HEAP32[($5_1 + 324 | 0) >> 2] = i64toi32_i32$0;
  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(27335 | 0, 27344 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77756 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
  $99($5_1 + 64 | 0 | 0, 27346 | 0, $5_1 + 48 | 0 | 0) | 0;
  $228(102208 | 0, $5_1 + 64 | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
  $64(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0, 27346 | 0, $5_1 + 32 | 0 | 0) | 0;
  i64toi32_i32$0 = $2$hi;
  $214($5_1 + 384 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0);
  i64toi32_i32$0 = $1$hi;
  $214($5_1 + 320 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, 0 | 0);
  HEAP32[($5_1 + 20 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $5_1 + 384 | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = $5_1 + 320 | 0;
  $99($5_1 + 64 | 0 | 0, 27370 | 0, $5_1 + 16 | 0 | 0) | 0;
  $228(102208 | 0, $5_1 + 64 | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[$5_1 >> 2] = $5_1 + 384 | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $5_1 + 320 | 0;
  $64(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0, 27408 | 0, $5_1 | 0) | 0;
  $39(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 448 | 0;
 }
 
 function $304($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 448 | 0;
  global$0 = $3_1;
  $3($3_1 + 320 | 0 | 0, 0 | 0, 128 | 0) | 0;
  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(27335 | 0, 27344 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77756 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($3_1 + 52 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
  $99($3_1 + 64 | 0 | 0, 27346 | 0, $3_1 + 48 | 0 | 0) | 0;
  $228(102208 | 0, $3_1 + 64 | 0 | 0) | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
  $64(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0, 27346 | 0, $3_1 + 32 | 0 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $214($3_1 + 320 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, 0 | 0);
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $3_1 + 320 | 0;
  $99($3_1 + 64 | 0 | 0, 27442 | 0, $3_1 + 16 | 0 | 0) | 0;
  $228(102208 | 0, $3_1 + 64 | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $3_1 + 320 | 0;
  $64(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0, 27472 | 0, $3_1 | 0) | 0;
  $39(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 448 | 0;
 }
 
 function $305($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 448 | 0;
  global$0 = $2_1;
  $3($2_1 + 320 | 0 | 0, 0 | 0, 128 | 0) | 0;
  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(27335 | 0, 27344 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77756 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 48 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
  $99($2_1 + 64 | 0 | 0, 27346 | 0, $2_1 + 48 | 0 | 0) | 0;
  $228(102208 | 0, $2_1 + 64 | 0 | 0) | 0;
  HEAP32[($2_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 32 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
  $64(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0, 27346 | 0, $2_1 + 32 | 0 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $214($2_1 + 320 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, 0 | 0);
  HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 320 | 0;
  $99($2_1 + 64 | 0 | 0, 27498 | 0, $2_1 + 16 | 0 | 0) | 0;
  $228(102208 | 0, $2_1 + 64 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $2_1 + 320 | 0;
  $64(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0, 27519 | 0, $2_1 | 0) | 0;
  $39(HEAP32[(0 + 77756 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $2_1 + 448 | 0;
 }
 
 function $306($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $4_1 = 0, $31_1 = 0, $31$hi = 0, $35_1 = 0, $35$hi = 0, $39_1 = 0, $39$hi = 0, $43_1 = 0, $47_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    switch ($0_1 | 0) {
    case 74:
    case 75:
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$5;
     break label$1;
    case 78:
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     break label$1;
    case 80:
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = __wasm_i64_sdiv($1_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     break label$1;
    case 83:
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 16;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $21_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
      $21_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $1_1 = $21_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    case 20:
    case 21:
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $1_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    case 22:
    case 23:
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $1$hi = i64toi32_i32$5;
     break label$1;
    case 24:
    case 25:
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $1_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    case 86:
    case 87:
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 31;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $31_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $31$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$5 = $31$hi;
     i64toi32_i32$3 = $31_1;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $22_1 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
      $22_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
     }
     $1_1 = $22_1;
     $1$hi = i64toi32_i32$5;
     break label$1;
    case 84:
    case 85:
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 31;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $35_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $35$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = $35$hi;
     i64toi32_i32$3 = $35_1;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $23_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $23_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $1_1 = $23_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    case 88:
    case 89:
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 31;
     i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $39_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $39$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $39$hi;
     i64toi32_i32$3 = $39_1;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $24_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $24_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $1_1 = $24_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    case 40:
    case 41:
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     $43_1 = (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $1_1 = $43_1;
     $1$hi = i64toi32_i32$5;
     break label$1;
    case 60:
    case 61:
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $47_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = 0;
     $1_1 = $47_1;
     $1$hi = i64toi32_i32$3;
     break label$1;
    case 48:
    case 49:
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = $2_1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$5 | 0)) {
      $25_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $26_1 = 0
       } else {
        $26_1 = 1
       }
       $27_1 = $26_1;
      } else {
       $27_1 = 0
      }
      $25_1 = $27_1;
     }
     i64toi32_i32$0 = 0;
     $1_1 = $25_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    case 56:
    case 57:
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
      $28_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0) {
        $29_1 = 0
       } else {
        $29_1 = 1
       }
       $30_1 = $29_1;
      } else {
       $30_1 = 0
      }
      $28_1 = $30_1;
     }
     i64toi32_i32$2 = 0;
     $1_1 = $28_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    case 44:
    case 45:
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
      $32_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        $33_1 = 0
       } else {
        $33_1 = 1
       }
       $34_1 = $33_1;
      } else {
       $34_1 = 0
      }
      $32_1 = $34_1;
     }
     i64toi32_i32$5 = 0;
     $1_1 = $32_1;
     $1$hi = i64toi32_i32$5;
     break label$1;
    case 52:
    case 53:
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
      $36_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
        $37_1 = 0
       } else {
        $37_1 = 1
       }
       $38_1 = $37_1;
      } else {
       $38_1 = 0
      }
      $36_1 = $38_1;
     }
     i64toi32_i32$3 = 0;
     $1_1 = $36_1;
     $1$hi = i64toi32_i32$3;
     break label$1;
    case 106:
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
      $40_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $41_1 = 0
       } else {
        $41_1 = 1
       }
       $42_1 = $41_1;
      } else {
       $42_1 = 0
      }
      $40_1 = $42_1;
     }
     if ($40_1) {
      break label$1
     }
     HEAP8[(80312 + 10 | 0) >> 0] = 0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    case 107:
     i64toi32_i32$0 = $2$hi;
     if (!($2_1 | i64toi32_i32$0 | 0)) {
      break label$1
     }
     HEAP8[(80312 + 10 | 0) >> 0] = 0;
    case 0:
    case 1:
    case 120:
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    default:
     HEAP32[($3_1 + 24 | 0) >> 2] = 192;
     HEAP32[($3_1 + 20 | 0) >> 2] = 27629;
     HEAP32[($3_1 + 16 | 0) >> 2] = 27571;
     $4_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
     $64($4_1 | 0, 27536 | 0, $3_1 + 16 | 0 | 0) | 0;
     HEAP32[$3_1 >> 2] = $0_1;
     $64($4_1 | 0, 27643 | 0, $3_1 | 0) | 0;
     fimport$9(1 | 0);
     abort();
    case 109:
    case 111:
     break label$1;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 64:
    case 65:
    case 70:
    case 71:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 108:
    case 110:
     break label$2;
    };
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$4;
  }
  global$0 = $3_1 + 32 | 0;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$HIGH_BITS = $1$hi;
  return i64toi32_i32$2 | 0;
 }
 
 function $307($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $7_1 = 0, $10_1 = 0, $14_1 = 0, $18_1 = 0;
  $3_1 = 1;
  label$1 : {
   switch ($0_1 + -100 | 0 | 0) {
   case 0:
   case 5:
    i64toi32_i32$0 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$0 | 0);
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
   case 1:
   case 4:
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    $10_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
    return i64toi32_i32$1 | 0;
   case 3:
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $14_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
    return i64toi32_i32$1 | 0;
   case 2:
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    $18_1 = (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
   default:
    $3_1 = 0;
    break;
   case 8:
   case 9:
   case 10:
   case 11:
    break label$1;
   };
  }
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $308($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $35_1 = 0, $35$hi = 0, $36_1 = 0, $36$hi = 0, $53_1 = 0, $53$hi = 0, $54_1 = 0, $54$hi = 0;
  $4_1 = global$0 - 576 | 0;
  global$0 = $4_1;
  HEAP32[(0 + 101040 | 0) >> 2] = 0;
  HEAP32[(0 + 101056 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $5_1 = HEAPU8[(0 + 80312 | 0) >> 0] | 0;
     if (($5_1 + -100 | 0) >>> 0 < 6 >>> 0) {
      break label$3
     }
     switch ($5_1 + -108 | 0 | 0) {
     case 0:
     case 2:
      break label$3;
     default:
      break label$2;
     };
    }
    HEAP32[(83272 + 56 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(83272 + 56 | 0) >> 2] = 3;
   label$4 : {
    if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$4
    }
    i64toi32_i32$0 = $1$hi;
    $0_1 = $1_1;
    $0$hi = i64toi32_i32$0;
    break label$1;
   }
   $4($4_1 + 432 | 0 | 0, 80688 | 0, 144 | 0) | 0;
   label$5 : {
    if (!($262($4_1 + 432 | 0 | 0) | 0)) {
     break label$5
    }
    $4($4_1 + 288 | 0 | 0, 80312 | 0, 144 | 0) | 0;
    if (!($260($4_1 + 288 | 0 | 0) | 0)) {
     break label$5
    }
    if ((HEAPU8[(80312 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    HEAP32[(83272 + 56 | 0) >> 2] = 1;
    HEAP32[(0 + 101040 | 0) >> 2] = 1;
    i64toi32_i32$2 = 80312;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
    $35_1 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$1;
    i64toi32_i32$2 = 80688;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
    $36_1 = i64toi32_i32$1;
    $36$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $35$hi;
    i64toi32_i32$1 = $36$hi;
    $303(27674 | 0, $35_1 | 0, i64toi32_i32$0 | 0, $36_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27695 | 0);
    i64toi32_i32$1 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$1;
    break label$1;
   }
   $4($4_1 + 144 | 0 | 0, 81048 | 0, 144 | 0) | 0;
   label$6 : {
    if ($262($4_1 + 144 | 0 | 0) | 0) {
     break label$6
    }
    i64toi32_i32$1 = $1$hi;
    $0_1 = $1_1;
    $0$hi = i64toi32_i32$1;
    break label$1;
   }
   label$7 : {
    if ($260($4($4_1 | 0, 80312 | 0, 144 | 0) | 0 | 0) | 0) {
     break label$7
    }
    i64toi32_i32$1 = $1$hi;
    $0_1 = $1_1;
    $0$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $1$hi;
   $0_1 = $1_1;
   $0$hi = i64toi32_i32$1;
   if ((HEAPU8[(80312 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(83272 + 56 | 0) >> 2] = 2;
   HEAP32[(0 + 101056 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80312;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
   $53_1 = i64toi32_i32$1;
   $53$hi = i64toi32_i32$0;
   i64toi32_i32$2 = 81048;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   $54_1 = i64toi32_i32$0;
   $54$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $53$hi;
   i64toi32_i32$0 = $54$hi;
   $303(27699 | 0, $53_1 | 0, i64toi32_i32$1 | 0, $54_1 | 0, i64toi32_i32$0 | 0, 27692 | 0, 27716 | 0);
   i64toi32_i32$0 = $3$hi;
   $0_1 = $3_1;
   $0$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 576 | 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $309($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $30_1 = 0, $30$hi = 0, $31_1 = 0, $31$hi = 0, $47_1 = 0, $47$hi = 0, $48_1 = 0, $48$hi = 0;
  $4_1 = global$0 - 576 | 0;
  global$0 = $4_1;
  HEAP32[(0 + 101044 | 0) >> 2] = 0;
  HEAP32[(0 + 101060 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    switch ((HEAPU8[(0 + 80312 | 0) >> 0] | 0) + -109 | 0 | 0) {
    case 0:
    case 2:
     HEAP32[(83272 + 60 | 0) >> 2] = -1;
     i64toi32_i32$0 = 0;
     $0_1 = 0;
     $0$hi = i64toi32_i32$0;
     break label$1;
    default:
     break label$2;
    };
   }
   label$4 : {
    switch (HEAP32[(80312 + 4 | 0) >> 2] | 0 | 0) {
    case 0:
     HEAP32[(83272 + 60 | 0) >> 2] = 0;
     if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     $4($4_1 + 432 | 0 | 0, 80688 | 0, 144 | 0) | 0;
     label$7 : {
      if (!($262($4_1 + 432 | 0 | 0) | 0)) {
       break label$7
      }
      $4($4_1 + 288 | 0 | 0, 80312 | 0, 144 | 0) | 0;
      if (!($261($4_1 + 288 | 0 | 0) | 0)) {
       break label$7
      }
      if ((HEAPU8[(80312 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
       break label$7
      }
      HEAP32[(83272 + 60 | 0) >> 2] = 1;
      HEAP32[(0 + 101044 | 0) >> 2] = 1;
      i64toi32_i32$2 = 80312;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      $30_1 = i64toi32_i32$0;
      $30$hi = i64toi32_i32$1;
      i64toi32_i32$2 = 80688;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
      $31_1 = i64toi32_i32$1;
      $31$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $30$hi;
      i64toi32_i32$1 = $31$hi;
      $303(27719 | 0, $30_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27695 | 0);
      i64toi32_i32$1 = $2$hi;
      $0_1 = $2_1;
      $0$hi = i64toi32_i32$1;
      break label$1;
     }
     $4($4_1 + 144 | 0 | 0, 81048 | 0, 144 | 0) | 0;
     if (!($262($4_1 + 144 | 0 | 0) | 0)) {
      break label$1
     }
     if (!($261($4($4_1 | 0, 80312 | 0, 144 | 0) | 0 | 0) | 0)) {
      break label$1
     }
     if ((HEAPU8[(80312 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
      break label$1
     }
     HEAP32[(83272 + 60 | 0) >> 2] = 2;
     HEAP32[(0 + 101060 | 0) >> 2] = 1;
     i64toi32_i32$2 = 80312;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
     $47_1 = i64toi32_i32$1;
     $47$hi = i64toi32_i32$0;
     i64toi32_i32$2 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
     $48_1 = i64toi32_i32$0;
     $48$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $47$hi;
     i64toi32_i32$0 = $48$hi;
     $303(27737 | 0, $47_1 | 0, i64toi32_i32$1 | 0, $48_1 | 0, i64toi32_i32$0 | 0, 27692 | 0, 27716 | 0);
     i64toi32_i32$0 = $3$hi;
     $0_1 = $3_1;
     $0$hi = i64toi32_i32$0;
     break label$1;
    case 1:
    case 2:
     HEAP32[(83272 + 60 | 0) >> 2] = 3;
     i64toi32_i32$0 = $1$hi;
     $0_1 = $1_1;
     $0$hi = i64toi32_i32$0;
     break label$1;
    default:
     break label$4;
    };
   }
   HEAP32[(83272 + 60 | 0) >> 2] = 0;
  }
  global$0 = $4_1 + 576 | 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $310($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $33_1 = 0, $33$hi = 0, $34_1 = 0, $34$hi = 0, $41_1 = 0, $41$hi = 0, $42_1 = 0, $42$hi = 0, $47_1 = 0, $47$hi = 0, $48_1 = 0, $48$hi = 0;
  HEAP32[(0 + 101064 | 0) >> 2] = 0;
  HEAP32[(0 + 101048 | 0) >> 2] = 0;
  HEAP32[(0 + 101128 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
   if (!(($4_1 | 0) == (1 | 0) | (($4_1 | 0) == (4 | 0) | (($4_1 | 0) == (7 | 0) | (!$4_1 | (($4_1 | 0) == (6 | 0) | ($4_1 | 0) == (3 | 0) | 0) | 0) | 0) | 0) | 0)) {
    break label$1
   }
   label$2 : {
    switch ((HEAPU8[(0 + 80312 | 0) >> 0] | 0) + -100 | 0 | 0) {
    case 0:
    case 1:
    case 2:
    case 3:
     label$4 : {
      if (!($266() | 0)) {
       break label$4
      }
      if ((HEAPU8[(80312 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
       break label$4
      }
      HEAP32[(0 + 101048 | 0) >> 2] = 1;
      i64toi32_i32$2 = 80312;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      $33_1 = i64toi32_i32$0;
      $33$hi = i64toi32_i32$1;
      i64toi32_i32$2 = 80688;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
      $34_1 = i64toi32_i32$1;
      $34$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $33$hi;
      i64toi32_i32$1 = $34$hi;
      $303(27754 | 0, $33_1 | 0, i64toi32_i32$0 | 0, $34_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27695 | 0);
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$0 | 0;
     }
     if (!($267() | 0)) {
      break label$1
     }
     if ((HEAPU8[(80312 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
      break label$1
     }
     HEAP32[(0 + 101064 | 0) >> 2] = 1;
     i64toi32_i32$2 = 80312;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     $41$hi = i64toi32_i32$1;
     i64toi32_i32$2 = 81048;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
     $42_1 = i64toi32_i32$1;
     $42$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $41$hi;
     i64toi32_i32$1 = $42$hi;
     $303(27773 | 0, $41_1 | 0, i64toi32_i32$0 | 0, $42_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27716 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
     return i64toi32_i32$0 | 0;
    case 4:
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   if (!(HEAP32[(78672 + 520 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 101128 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80312;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
   $47_1 = i64toi32_i32$0;
   $47$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $48_1 = i64toi32_i32$1;
   $48$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $47$hi;
   i64toi32_i32$1 = $48$hi;
   $303(27791 | 0, $47_1 | 0, i64toi32_i32$0 | 0, $48_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27810 | 0);
   i64toi32_i32$1 = $3$hi;
   $0_1 = $3_1;
   $0$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $311($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $13$hi = 0, $14_1 = 0, $14$hi = 0, $21_1 = 0, $21$hi = 0, $22_1 = 0, $22$hi = 0;
  HEAP32[(0 + 101068 | 0) >> 2] = 0;
  HEAP32[(0 + 101052 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   if (((HEAPU8[(0 + 80312 | 0) >> 0] | 0) & 254 | 0 | 0) != (102 | 0)) {
    break label$1
   }
   label$2 : {
    if (!($266() | 0)) {
     break label$2
    }
    if ((HEAPU8[(80312 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
     break label$2
    }
    HEAP32[(0 + 101052 | 0) >> 2] = 1;
    i64toi32_i32$2 = 80312;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$2 = 80688;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
    $14_1 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$1 = $14$hi;
    $303(27816 | 0, $13_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27695 | 0);
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
   }
   if (!($267() | 0)) {
    break label$1
   }
   if ((HEAPU8[(80312 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101068 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80312;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$0;
   $21$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 81048;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   $22_1 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$1 = $22$hi;
   $303(27835 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27716 | 0);
   i64toi32_i32$1 = $2$hi;
   $0_1 = $2_1;
   $0$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $312($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101072 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAPU8[(0 + 80312 | 0) >> 0] | 0;
    if (($2_1 + -16 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    if (($2_1 | 0) != (65 | 0)) {
     break label$1
    }
   }
   if (!($267() | 0)) {
    break label$1
   }
   if ((HEAPU8[(80312 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101072 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80312;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 81048;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(27853 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 27692 | 0, 27716 | 0);
   i64toi32_i32$1 = $1$hi;
   $0_1 = $1_1;
   $0$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $313($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101076 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
    if (($2_1 + -16 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    if (($2_1 | 0) != (65 | 0)) {
     break label$1
    }
   }
   if (!($267() | 0)) {
    break label$1
   }
   if ((HEAPU8[(80688 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101076 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80688;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 81048;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(27868 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 27695 | 0, 27716 | 0);
   i64toi32_i32$1 = $1$hi;
   $0_1 = $1_1;
   $0$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $314($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0;
  HEAP32[(0 + 101080 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 252 | 0 | 0) != (100 | 0)) {
    break label$1
   }
   if (!($266() | 0)) {
    break label$1
   }
   if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101080 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $12_1 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 80688;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = $13$hi;
   $303(27881 | 0, $12_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, 27900 | 0, 27695 | 0);
   i64toi32_i32$1 = $1$hi;
   $0_1 = $1_1;
   $0$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $315($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0;
  HEAP32[(0 + 101084 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 254 | 0 | 0) != (102 | 0)) {
    break label$1
   }
   if (!($266() | 0)) {
    break label$1
   }
   if ((HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101084 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $12_1 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 80688;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = $13$hi;
   $303(27903 | 0, $12_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, 27900 | 0, 27695 | 0);
   i64toi32_i32$1 = $1$hi;
   $0_1 = $1_1;
   $0$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $316() {
  var $0_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if ((HEAP32[(0 + 77816 | 0) >> 2] | 0) >>> 0 > 2 >>> 0) {
    break label$1
   }
   $0_1 = (HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -100 | 0;
   if ($0_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   if (!((1 << $0_1 | 0) & 3903 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $305(27922 | 0, HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0);
  }
 }
 
 function $317() {
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $0_1 = 0, $33_1 = 0, $33$hi = 0, $34_1 = 0, $34$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $104_1 = 0, $104$hi = 0, $105_1 = 0, $105$hi = 0, $121_1 = 0, $121$hi = 0, $122_1 = 0, $122$hi = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0;
  $0_1 = global$0 - 1152 | 0;
  global$0 = $0_1;
  label$1 : {
   label$2 : {
    switch (HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) {
    case 0:
     $4($0_1 + 720 | 0 | 0, 80312 | 0, 144 | 0) | 0;
     label$4 : {
      if (!($262($0_1 + 720 | 0 | 0) | 0)) {
       break label$4
      }
      $4($0_1 + 576 | 0 | 0, 79952 | 0, 144 | 0) | 0;
      label$5 : {
       label$6 : {
        if (!($260($0_1 + 576 | 0 | 0) | 0)) {
         break label$6
        }
        if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) == (HEAPU8[(80312 + 10 | 0) >> 0] | 0 | 0)) {
         break label$5
        }
       }
       $4($0_1 + 432 | 0 | 0, 79952 | 0, 144 | 0) | 0;
       if (!($261($0_1 + 432 | 0 | 0) | 0)) {
        break label$4
       }
       if ((HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(80312 + 10 | 0) >> 0] | 0 | 0)) {
        break label$4
       }
      }
      HEAP32[(0 + 101148 | 0) >> 2] = 1;
      HEAP32[(0 + 101144 | 0) >> 2] = 1;
      i64toi32_i32$2 = 79952;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
      $33_1 = i64toi32_i32$0;
      $33$hi = i64toi32_i32$1;
      i64toi32_i32$2 = 80312;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      $34_1 = i64toi32_i32$1;
      $34$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $33$hi;
      i64toi32_i32$1 = $34$hi;
      $303(27930 | 0, $33_1 | 0, i64toi32_i32$0 | 0, $34_1 | 0, i64toi32_i32$1 | 0, 27900 | 0, 27692 | 0);
     }
     $4($0_1 + 288 | 0 | 0, 80688 | 0, 144 | 0) | 0;
     label$7 : {
      if (!($262($0_1 + 288 | 0 | 0) | 0)) {
       break label$7
      }
      $4($0_1 + 144 | 0 | 0, 79952 | 0, 144 | 0) | 0;
      label$8 : {
       label$9 : {
        if (!($260($0_1 + 144 | 0 | 0) | 0)) {
         break label$9
        }
        if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) == (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
         break label$8
        }
       }
       if (!($261($4($0_1 | 0, 79952 | 0, 144 | 0) | 0 | 0) | 0)) {
        break label$7
       }
       if ((HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
        break label$7
       }
      }
      HEAP32[(0 + 101148 | 0) >> 2] = 1;
      HEAP32[(0 + 101144 | 0) >> 2] = 1;
      i64toi32_i32$2 = 79952;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
      $59_1 = i64toi32_i32$1;
      $59$hi = i64toi32_i32$0;
      i64toi32_i32$2 = 80688;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
      $60_1 = i64toi32_i32$0;
      $60$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $59$hi;
      i64toi32_i32$0 = $60$hi;
      $303(27930 | 0, $59_1 | 0, i64toi32_i32$1 | 0, $60_1 | 0, i64toi32_i32$0 | 0, 27900 | 0, 27695 | 0);
     }
     if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 254 | 0 | 0) != (104 | 0)) {
      break label$1
     }
     $1_1 = HEAPU8[(79952 + 8 | 0) >> 0] | 0;
     if (!(HEAP32[((78672 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0)) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101132 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $304(27930 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $1_1 | 0);
     break label$1;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   label$10 : {
    label$11 : {
     $1_1 = HEAPU8[(0 + 80312 | 0) >> 0] | 0;
     if (($1_1 + -10 | 0) >>> 0 < 5 >>> 0) {
      break label$11
     }
     if (($1_1 | 0) != (64 | 0)) {
      break label$10
     }
    }
    $4($0_1 + 1008 | 0 | 0, 79952 | 0, 144 | 0) | 0;
    label$12 : {
     label$13 : {
      if (!($260($0_1 + 1008 | 0 | 0) | 0)) {
       break label$13
      }
      if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) == (HEAPU8[(80312 + 10 | 0) >> 0] | 0 | 0)) {
       break label$12
      }
     }
     $4($0_1 + 864 | 0 | 0, 79952 | 0, 144 | 0) | 0;
     if (!($261($0_1 + 864 | 0 | 0) | 0)) {
      break label$10
     }
     $1_1 = HEAPU8[(0 + 79952 | 0) >> 0] | 0;
     if (($1_1 + -16 | 0) >>> 0 < 3 >>> 0) {
      break label$10
     }
     if (($1_1 | 0) == (65 | 0)) {
      break label$10
     }
     if ((HEAPU8[(79952 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(80312 + 10 | 0) >> 0] | 0 | 0)) {
      break label$10
     }
    }
    HEAP32[(0 + 101148 | 0) >> 2] = 1;
    HEAP32[(0 + 101144 | 0) >> 2] = 1;
    i64toi32_i32$2 = 79952;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $104_1 = i64toi32_i32$1;
    $104$hi = i64toi32_i32$0;
    i64toi32_i32$2 = 80312;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
    $105_1 = i64toi32_i32$0;
    $105$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $104$hi;
    i64toi32_i32$0 = $105$hi;
    $303(27947 | 0, $104_1 | 0, i64toi32_i32$1 | 0, $105_1 | 0, i64toi32_i32$0 | 0, 27900 | 0, 27692 | 0);
   }
   label$14 : {
    $1_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
    if ($1_1 >>> 0 > 8 >>> 0) {
     break label$14
    }
    if (!((1 << $1_1 | 0) & 292 | 0)) {
     break label$14
    }
    label$15 : {
     if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 252 | 0 | 0) != (100 | 0)) {
      break label$15
     }
     if (!($265() | 0)) {
      break label$15
     }
     if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80312 + 10 | 0) >> 0] | 0 | 0)) {
      break label$15
     }
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $121_1 = i64toi32_i32$0;
     $121$hi = i64toi32_i32$1;
     i64toi32_i32$2 = 80312;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
     $122_1 = i64toi32_i32$1;
     $122$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $121$hi;
     i64toi32_i32$1 = $122$hi;
     $303(27969 | 0, $121_1 | 0, i64toi32_i32$0 | 0, $122_1 | 0, i64toi32_i32$1 | 0, 27900 | 0, 27692 | 0);
    }
    label$16 : {
     if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 252 | 0 | 0) != (100 | 0)) {
      break label$16
     }
     if (!($266() | 0)) {
      break label$16
     }
     label$17 : {
      $1_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
      if (($1_1 + -10 | 0) >>> 0 < 5 >>> 0) {
       break label$17
      }
      if (($1_1 | 0) != (64 | 0)) {
       break label$16
      }
     }
     if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $137_1 = i64toi32_i32$1;
     $137$hi = i64toi32_i32$0;
     i64toi32_i32$2 = 80688;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
     $138_1 = i64toi32_i32$0;
     $138$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $137$hi;
     i64toi32_i32$0 = $138$hi;
     $303(27969 | 0, $137_1 | 0, i64toi32_i32$1 | 0, $138_1 | 0, i64toi32_i32$0 | 0, 27900 | 0, 27695 | 0);
    }
    if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 254 | 0 | 0) != (104 | 0)) {
     break label$1
    }
    $1_1 = HEAPU8[(79952 + 8 | 0) >> 0] | 0;
    if (!(HEAP32[((78672 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0)) {
     break label$1
    }
    HEAP32[(0 + 101144 | 0) >> 2] = 1;
    HEAP32[(0 + 101148 | 0) >> 2] = 1;
    HEAP32[(0 + 101132 | 0) >> 2] = 1;
    i64toi32_i32$2 = 79952;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $304(27990 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $1_1 | 0);
    break label$1;
   }
   if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 254 | 0 | 0) != (104 | 0)) {
    break label$1
   }
   $1_1 = HEAPU8[(79952 + 8 | 0) >> 0] | 0;
   if (((HEAP32[((78672 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0 | 0) < (1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   HEAP32[(0 + 101148 | 0) >> 2] = 1;
   HEAP32[(0 + 101132 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $304(28011 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $1_1 | 0);
  }
  global$0 = $0_1 + 1152 | 0;
 }
 
 function $318($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($1_1 + -130 | 0 | 0) {
      default:
       if ($1_1) {
        break label$3
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = 0;
      case 13:
       HEAPF64[$0_1 >> 3] = +HEAPF64[$2_1 >> 3] + +HEAPF64[$3_1 >> 3];
       break label$1;
      case 15:
       HEAPF64[$0_1 >> 3] = +HEAPF64[$2_1 >> 3] * +HEAPF64[$3_1 >> 3];
       break label$1;
      case 16:
       HEAPF64[$0_1 >> 3] = +HEAPF64[$2_1 >> 3] / +HEAPF64[$3_1 >> 3];
       break label$1;
      case 0:
       HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$3_1 >> 2]));
       break label$1;
      case 1:
       HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) - Math_fround(HEAPF32[$3_1 >> 2]));
       break label$1;
      case 2:
       HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * Math_fround(HEAPF32[$3_1 >> 2]));
       break label$1;
      case 3:
       HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) / Math_fround(HEAPF32[$3_1 >> 2]));
       break label$1;
      case 24:
       HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$3_1 >> 2]));
       HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
       break label$1;
      case 25:
       HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) - Math_fround(HEAPF32[$3_1 >> 2]));
       HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
       break label$1;
      case 26:
       HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * Math_fround(HEAPF32[$3_1 >> 2]));
       HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
       break label$1;
      case 14:
       break label$2;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
       break label$3;
      case 27:
       break label$4;
      };
     }
     HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) / Math_fround(HEAPF32[$3_1 >> 2]));
     HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
     break label$1;
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = 115;
    HEAP32[($4_1 + 20 | 0) >> 2] = 28123;
    HEAP32[($4_1 + 16 | 0) >> 2] = 28066;
    $0_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
    $64($0_1 | 0, 28031 | 0, $4_1 + 16 | 0 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1_1;
    $64($0_1 | 0, 28140 | 0, $4_1 | 0) | 0;
    fimport$9(1 | 0);
    abort();
   }
   HEAPF64[$0_1 >> 3] = +HEAPF64[$2_1 >> 3] - +HEAPF64[$3_1 >> 3];
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($0_1 + -135 | 0 | 0) {
      default:
       if ($0_1) {
        break label$3
       }
      case 15:
       $0_1 = +HEAPF64[$1_1 >> 3] == +HEAPF64[$2_1 >> 3];
       break label$1;
      case 14:
       $0_1 = +HEAPF64[$1_1 >> 3] < +HEAPF64[$2_1 >> 3];
       break label$1;
      case 17:
       $0_1 = +HEAPF64[$1_1 >> 3] <= +HEAPF64[$2_1 >> 3];
       break label$1;
      case 13:
       $0_1 = +HEAPF64[$1_1 >> 3] > +HEAPF64[$2_1 >> 3];
       break label$1;
      case 18:
       $0_1 = +HEAPF64[$1_1 >> 3] >= +HEAPF64[$2_1 >> 3];
       break label$1;
      case 2:
       $0_1 = Math_fround(HEAPF32[$1_1 >> 2]) == Math_fround(HEAPF32[$2_1 >> 2]);
       break label$1;
      case 3:
       $0_1 = Math_fround(HEAPF32[$1_1 >> 2]) != Math_fround(HEAPF32[$2_1 >> 2]);
       break label$1;
      case 1:
       $0_1 = Math_fround(HEAPF32[$1_1 >> 2]) < Math_fround(HEAPF32[$2_1 >> 2]);
       break label$1;
      case 4:
       $0_1 = Math_fround(HEAPF32[$1_1 >> 2]) <= Math_fround(HEAPF32[$2_1 >> 2]);
       break label$1;
      case 0:
       $0_1 = Math_fround(HEAPF32[$1_1 >> 2]) > Math_fround(HEAPF32[$2_1 >> 2]);
       break label$1;
      case 16:
       break label$2;
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
       break label$3;
      case 5:
       break label$4;
      };
     }
     $0_1 = Math_fround(HEAPF32[$1_1 >> 2]) >= Math_fround(HEAPF32[$2_1 >> 2]);
     break label$1;
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = 185;
    HEAP32[($3_1 + 20 | 0) >> 2] = 28174;
    HEAP32[($3_1 + 16 | 0) >> 2] = 28066;
    $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
    $64($1_1 | 0, 28031 | 0, $3_1 + 16 | 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $0_1;
    $64($1_1 | 0, 28193 | 0, $3_1 | 0) | 0;
    fimport$9(1 | 0);
    abort();
   }
   $0_1 = +HEAPF64[$1_1 >> 3] != +HEAPF64[$2_1 >> 3];
  }
  global$0 = $3_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $320($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $10$hi = 0, $11_1 = 0, $11$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0;
  HEAP32[(0 + 101088 | 0) >> 2] = 0;
  HEAP32[(0 + 101092 | 0) >> 2] = 0;
  label$1 : {
   if (!($266() | 0)) {
    break label$1
   }
   if (!($277() | 0)) {
    break label$1
   }
   if ((HEAPU8[(81576 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101088 | 0) >> 2] = 1;
   i64toi32_i32$2 = 81576;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 80688;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $11$hi;
   $303(28229 | 0, $10_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, 28245 | 0, 28248 | 0);
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  label$2 : {
   if (!($267() | 0)) {
    break label$2
   }
   if (!($277() | 0)) {
    break label$2
   }
   if ((HEAPU8[(81576 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(81048 + 10 | 0) >> 0] | 0 | 0)) {
    break label$2
   }
   HEAP32[(0 + 101092 | 0) >> 2] = 1;
   i64toi32_i32$2 = 81576;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 81048;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$1 = $21$hi;
   $303(28252 | 0, $20_1 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$1 | 0, 28245 | 0, 28267 | 0);
   i64toi32_i32$1 = $2$hi;
   $0_1 = $2_1;
   $0$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $321($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $15_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101112 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($278() | 0)) {
    break label$1
   }
   if ((HEAPU8[(81576 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101112 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 81576;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(28270 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 28288 | 0, 28294 | 0);
  }
 }
 
 function $322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $16_1 = 0, $18_1 = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0;
  HEAP32[(0 + 101116 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($279() | 0)) {
    break label$1
   }
   if ((HEAPU8[(83360 + 409 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101116 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $16_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 83360 + 584 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $18$hi;
   i64toi32_i32$1 = $19$hi;
   $303(28300 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 28288 | 0, 28294 | 0);
  }
 }
 
 function $323($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $15_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101096 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($274() | 0)) {
    break label$1
   }
   if ((HEAPU8[(82200 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101096 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 82200;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(28318 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 28335 | 0, 28294 | 0);
  }
 }
 
 function $324($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $15_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101100 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($271() | 0)) {
    break label$1
   }
   if ((HEAPU8[(82200 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101100 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 82200;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(28342 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 28335 | 0, 28294 | 0);
  }
 }
 
 function $325($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $15_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101124 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($273() | 0)) {
    break label$1
   }
   if ((HEAPU8[(83032 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101124 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 83032;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(28359 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 28376 | 0, 28294 | 0);
  }
 }
 
 function $326($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $15_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101120 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($276() | 0)) {
    break label$1
   }
   if ((HEAPU8[(83032 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101120 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 83032;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(28383 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 28376 | 0, 28294 | 0);
  }
 }
 
 function $327($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $15_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101104 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($272() | 0)) {
    break label$1
   }
   if ((HEAPU8[(82616 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101104 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 82616;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(28400 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 28417 | 0, 28294 | 0);
  }
 }
 
 function $328($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $15_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0;
  HEAP32[(0 + 101104 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (!($270() | 0)) {
    break label$1
   }
   if (!($275() | 0)) {
    break label$1
   }
   if ((HEAPU8[(82616 + 9 | 0) >> 0] | 0 | 0) != (HEAPU8[(100536 + 10 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101104 | 0) >> 2] = 1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 82616;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = 100536;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $17$hi;
   $303(28424 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 28417 | 0, 28294 | 0);
  }
 }
 
 function $329($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $7_1 = 0, $7$hi = 0, $5_1 = 0, $21_1 = 0, $22_1 = 0, $30_1 = 0, $32_1 = 0, $44_1 = 0, $46_1 = 0, $60_1 = 0, $62_1 = 0, $76_1 = 0, $78_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  HEAP32[($0_1 + 160 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 12 | 0) >> 1] = 0;
  HEAP8[i64toi32_i32$1 >> 0] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  $21_1 = i64toi32_i32$1 + 7 | 0;
  $22_1 = 0;
  HEAP8[$21_1 >> 0] = $22_1;
  HEAP8[($21_1 + 1 | 0) >> 0] = $22_1 >>> 8 | 0;
  HEAP8[($21_1 + 2 | 0) >> 0] = $22_1 >>> 16 | 0;
  HEAP8[($21_1 + 3 | 0) >> 0] = $22_1 >>> 24 | 0;
  label$1 : {
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $7_1;
   HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = HEAP32[($1_1 + 160 | 0) >> 2] | 0;
   $30_1 = $4(i64toi32_i32$1 | 0, $1_1 | 0, 144 | 0) | 0;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
   $32_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $30_1;
   HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] = $32_1;
   HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] = i64toi32_i32$1;
   $6_1 = 1;
  }
  label$2 : {
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = -1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0) {
    break label$2
   }
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$2 = $0_1;
   HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] = $7_1;
   HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
   $44_1 = $4(i64toi32_i32$2 | 0, $2_1 | 0, 144 | 0) | 0;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
   $46_1 = i64toi32_i32$3;
   i64toi32_i32$3 = $44_1;
   HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] = $46_1;
   HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] = i64toi32_i32$2;
   $6_1 = $6_1 + 1 | 0;
  }
  label$3 : {
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = -1;
   if ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $0_1;
   HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] = $7_1;
   HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
   $60_1 = $4(i64toi32_i32$3 | 0, $3_1 | 0, 144 | 0) | 0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
   $62_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $60_1;
   HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = $62_1;
   HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$3;
   $6_1 = $6_1 + 1 | 0;
  }
  label$4 : {
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$0 = $0_1;
   HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = $7_1;
   HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] = HEAP32[($4_1 + 160 | 0) >> 2] | 0;
   $76_1 = $4(i64toi32_i32$0 | 0, $4_1 | 0, 144 | 0) | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
   $78_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $76_1;
   HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = $78_1;
   HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $6_1 + 1 | 0;
  }
  label$5 : {
   if (($6_1 | 0) < (2 | 0)) {
    break label$5
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = 565;
   HEAP32[($5_1 + 4 | 0) >> 2] = 28441;
   HEAP32[$5_1 >> 2] = 28066;
   $0_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
   $64($0_1 | 0, 28031 | 0, $5_1 | 0) | 0;
   $35(28451 | 0, 34 | 0, 1 | 0, $0_1 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $330($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $3$hi = 0, $10_1 = 0, $12_1 = 0, $14_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $25$hi = 0, $26_1 = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0, $28_1 = 0, $28$hi = 0, $29_1 = 0, $29$hi = 0, $34_1 = 0, $38_1 = 0, $41_1 = 0, $63_1 = 0, $94_1 = 0, $107_1 = 0, $112_1 = 0, $113_1 = 0, $121_1 = 0, $133_1 = 0, $148_1 = 0, $164_1 = 0, $176_1 = 0, $177_1 = 0, $195_1 = 0, $203_1 = 0, $211_1 = 0;
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($0_1 + -1 | 0 | 0) {
     case 0:
      i64toi32_i32$2 = 81576;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$0;
      i64toi32_i32$0 = 85360 + 560 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $10_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = 81576;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $1_1;
      HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $12_1;
      HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = 100536;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 32 | 0) >> 2] = $14_1;
      HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
      $321($1_1 + 88 | 0 | 0, $1_1 + 40 | 0 | 0, $1_1 + 32 | 0 | 0);
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
      $23_1 = i64toi32_i32$1;
      i64toi32_i32$1 = 85360 + 568 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $23_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $24_1 = 85360 + 576 | 0;
      i64toi32_i32$2 = 81576;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
      $25_1 = i64toi32_i32$0;
      $25$hi = i64toi32_i32$1;
      i64toi32_i32$2 = 80688;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
      $26_1 = i64toi32_i32$1;
      $26$hi = i64toi32_i32$0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 83352 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 83356 | 0) >> 2] | 0;
      $27_1 = i64toi32_i32$0;
      $27$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$0 = $26$hi;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = $320($25_1 | 0, i64toi32_i32$1 | 0, $26_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $28_1 = i64toi32_i32$2;
      $28$hi = i64toi32_i32$0;
      i64toi32_i32$1 = 81576;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] | 0;
      $29_1 = i64toi32_i32$0;
      $29$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $28$hi;
      i64toi32_i32$1 = $28_1;
      i64toi32_i32$0 = $29$hi;
      i64toi32_i32$3 = $29_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$1 = $24_1;
      HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$4;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
      $4(85360 + 400 | 0 | 0, 81576 | 0, 144 | 0) | 0;
      i64toi32_i32$2 = 81576;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
      $34_1 = i64toi32_i32$5;
      i64toi32_i32$5 = 85360 + 584 | 0;
      HEAP32[i64toi32_i32$5 >> 2] = $34_1;
      HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(85360 + 592 | 0) >> 2] = HEAP32[(81576 + 200 | 0) >> 2] | 0;
      break label$1;
     case 1:
      i64toi32_i32$2 = 100536;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
      $38_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $1_1;
      HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $38_1;
      HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$5;
      i64toi32_i32$2 = 83360 + 568 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $41_1 = i64toi32_i32$5;
      i64toi32_i32$5 = $1_1;
      HEAP32[($1_1 + 56 | 0) >> 2] = $41_1;
      HEAP32[($1_1 + 60 | 0) >> 2] = i64toi32_i32$1;
      $322($1_1 + 80 | 0 | 0, $1_1 + 56 | 0 | 0, $1_1 + 48 | 0 | 0);
      break label$2;
     default:
      break label$3;
     };
    }
    HEAPF64[($1_1 + 80 | 0) >> 3] = +HEAPF64[((83360 + Math_imul($0_1, 200) | 0) + 168 | 0) >> 3];
   }
   label$6 : {
    if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$6
    }
    $0_1 = 83360 + Math_imul($0_1, 200) | 0;
    $2_1 = $4(99360 | 0, $0_1 | 0, 144 | 0) | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$5;
    HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
    label$7 : {
     switch ((HEAPU8[i64toi32_i32$2 >> 0] | 0) + -128 | 0 | 0) {
     case 13:
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      $111($1_1 + 64 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 8 | 0, $1_1 + 76 | 0 | 0, 28066 | 0, 622 | 0);
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$1;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $2_1;
      HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = $3_1;
      HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = $3_1;
      HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$5;
      break label$1;
     case 0:
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      $111($1_1 + 64 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 6 | 0, $1_1 + 76 | 0 | 0, 28066 | 0, 626 | 0);
      HEAP32[($2_1 + 148 | 0) >> 2] = 0;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $94_1 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = $94_1;
      HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$5;
      HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 88 | 0) >> 2]);
      break label$1;
     case 52:
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      $111($1_1 + 64 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, 6 | 0, $1_1 + 76 | 0 | 0, 28066 | 0, 632 | 0);
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $107_1 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = $107_1;
      HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$5;
      HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 88 | 0) >> 2]);
      $112_1 = i64toi32_i32$1 + 64 | 0;
      $113_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 4;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $111($112_1 | 0, $113_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 6 | 0, $1_1 + 76 | 0 | 0, 28066 | 0, 634 | 0);
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
      $121_1 = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = $121_1;
      HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$2;
      HEAPF32[($2_1 + 148 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 88 | 0) >> 2]);
      break label$1;
     case 14:
      HEAPF64[($1_1 + 88 | 0) >> 3] = +HEAPF64[($1_1 + 80 | 0) >> 3];
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] | 0;
      $133_1 = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$1;
      HEAP32[i64toi32_i32$1 >> 2] = $133_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      $113(HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, 8 | 0, 1 | 0);
      $259();
      HEAP32[(78360 + 4 | 0) >> 2] = (HEAP32[(78360 + 4 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(78360 + 12 | 0) >> 2] = (HEAP32[(78360 + 12 | 0) >> 2] | 0) + 1 | 0;
      break label$1;
     case 1:
      HEAPF32[($1_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] | 0;
      $148_1 = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $148_1;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      $113(HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + 8 | 0 | 0, 6 | 0, 1 | 0);
      $259();
      HEAP32[(78360 + 4 | 0) >> 2] = (HEAP32[(78360 + 4 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(78360 + 12 | 0) >> 2] = (HEAP32[(78360 + 12 | 0) >> 2] | 0) + 1 | 0;
      break label$1;
     case 53:
      break label$7;
     default:
      break label$1;
     };
    }
    HEAPF32[($1_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] | 0;
    $164_1 = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $164_1;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $113(HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + 24 | 0 | 0, 6 | 0, 1 | 0);
    HEAPF32[(i64toi32_i32$1 + 88 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 84 | 0) >> 2]);
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] | 0;
    $176_1 = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $176_1;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$2;
    $177_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $113($177_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, $1_1 + 16 | 0 | 0, 6 | 0, 1 | 0);
    $259();
    HEAP32[(78360 + 4 | 0) >> 2] = (HEAP32[(78360 + 4 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(78360 + 12 | 0) >> 2] = (HEAP32[(78360 + 12 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $2_1 = Math_imul($0_1, 200);
   $0_1 = $2_1 + 85360 | 0;
   $2_1 = 83360 + $2_1 | 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   $195_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 360 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $195_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAPF64[($0_1 + 368 | 0) >> 3] = +HEAPF64[($1_1 + 80 | 0) >> 3];
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
   $203_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 376 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $203_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4($0_1 + 200 | 0 | 0, i64toi32_i32$2 | 0, 144 | 0) | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
   $211_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 384 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $211_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0_1 + 392 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 96 | 0;
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $2_1 = 0, $9_1 = 0, $11_1 = 0, $19_1 = 0, $21_1 = 0, $30_1 = 0, $33_1 = 0, $43_1 = 0, $47_1 = 0, $57_1 = 0, $62_1 = 0, $75_1 = 0, $83_1 = 0;
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = 82200;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $9_1;
    HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 100536;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
    $324(i64toi32_i32$1 + 72 | 0 | 0, i64toi32_i32$1 + 48 | 0 | 0, i64toi32_i32$1 + 40 | 0 | 0);
    i64toi32_i32$2 = 82200;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $19_1;
    HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 100536;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $21_1;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
    $323(i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 + 32 | 0 | 0, i64toi32_i32$1 + 24 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
    $30_1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $30_1;
    HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $33_1 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $33_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $318(i64toi32_i32$1 + 56 | 0 | 0, HEAPU8[(0 + 82200 | 0) >> 0] | 0 | 0, i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 + 8 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
    $43_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 89360 + 552 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $43_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4(89360 + 400 | 0 | 0, 82200 | 0, 144 | 0) | 0;
    i64toi32_i32$2 = 82200;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
    $47_1 = i64toi32_i32$1;
    i64toi32_i32$1 = 89360 + 584 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $47_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(89360 + 592 | 0) >> 2] = HEAP32[(82200 + 200 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$3
    }
    $0_1 = 87360 + Math_imul($0_1, 200) | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $57_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 99696;
    HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = $57_1;
    HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
    $2_1 = $4(99696 | 0, i64toi32_i32$2 | 0, 144 | 0) | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
    $62_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $62_1;
    HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
    break label$1;
   }
   $2_1 = Math_imul($0_1, 200);
   $0_1 = $2_1 + 89360 | 0;
   $2_1 = 87360 + $2_1 | 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $75_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 352 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $75_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4($0_1 + 200 | 0 | 0, i64toi32_i32$2 | 0, 144 | 0) | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
   $83_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 384 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $83_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 392 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 80 | 0;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $2_1 = 0, $9_1 = 0, $11_1 = 0, $19_1 = 0, $21_1 = 0, $30_1 = 0, $33_1 = 0, $43_1 = 0, $47_1 = 0, $57_1 = 0, $62_1 = 0, $75_1 = 0, $83_1 = 0;
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = 82616;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $9_1;
    HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 100536;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
    $327(i64toi32_i32$1 + 72 | 0 | 0, i64toi32_i32$1 + 48 | 0 | 0, i64toi32_i32$1 + 40 | 0 | 0);
    i64toi32_i32$2 = 82616;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $19_1;
    HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 100536;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $21_1;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
    $328(i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 + 32 | 0 | 0, i64toi32_i32$1 + 24 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
    $30_1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $30_1;
    HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $33_1 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $33_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $318(i64toi32_i32$1 + 56 | 0 | 0, HEAPU8[(0 + 82616 | 0) >> 0] | 0 | 0, i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 + 8 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
    $43_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 93360 + 552 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $43_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4(93360 + 400 | 0 | 0, 82616 | 0, 144 | 0) | 0;
    i64toi32_i32$2 = 82616;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
    $47_1 = i64toi32_i32$1;
    i64toi32_i32$1 = 93360 + 584 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $47_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(93360 + 592 | 0) >> 2] = HEAP32[(82616 + 200 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$3
    }
    $0_1 = 91360 + Math_imul($0_1, 200) | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $57_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 100032;
    HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = $57_1;
    HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
    $2_1 = $4(100032 | 0, i64toi32_i32$2 | 0, 144 | 0) | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
    $62_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $62_1;
    HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
    break label$1;
   }
   $2_1 = Math_imul($0_1, 200);
   $0_1 = $2_1 + 93360 | 0;
   $2_1 = 91360 + $2_1 | 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $75_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 352 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $75_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4($0_1 + 200 | 0 | 0, i64toi32_i32$2 | 0, 144 | 0) | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
   $83_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 384 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $83_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 392 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 80 | 0;
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $11_1 = 0, $13_1 = 0, $21_1 = 0, $23_1 = 0, $32_1 = 0, $35_1 = 0, $41_1 = 0, $45_1 = 0, $62_1 = 0, $78_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = 83032;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 100536;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $13_1;
    HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
    $325(i64toi32_i32$1 + 56 | 0 | 0, i64toi32_i32$1 + 40 | 0 | 0, i64toi32_i32$1 + 32 | 0 | 0);
    i64toi32_i32$2 = 83032;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = 100536;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $23_1;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $326(i64toi32_i32$1 + 48 | 0 | 0, i64toi32_i32$1 + 24 | 0 | 0, i64toi32_i32$1 + 16 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
    $32_1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $32_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $35_1 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$2;
    HEAP32[i64toi32_i32$1 >> 2] = $35_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $319(HEAPU8[(0 + 83032 | 0) >> 0] | 0 | 0, i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $41_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 97360 + 544 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $41_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4(97360 + 400 | 0 | 0, 83032 | 0, 144 | 0) | 0;
    i64toi32_i32$2 = 83032;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = 97360 + 584 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(97360 + 592 | 0) >> 2] = HEAP32[(83032 + 200 | 0) >> 2] | 0;
    break label$1;
   }
   $2_1 = Math_imul($0_1, 200);
   $3_1 = 95360 + $2_1 | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   label$3 : {
    if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$3
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = 81224;
    HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = $4_1;
    HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
    $0_1 = $4(81224 | 0, $3_1 | 0, 144 | 0) | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
    $62_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = $62_1;
    HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
    break label$1;
   }
   $0_1 = $2_1 + 97360 | 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $0_1 + 344 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $4_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4($0_1 + 200 | 0 | 0, $3_1 | 0, 144 | 0) | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
   $78_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 384 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $78_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0_1 + 392 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $334() {
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $0_1 = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $55_1 = 0, $55$hi = 0, $56_1 = 0, $56$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[(0 + 77820 | 0) >> 2] | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    label$4 : {
     label$5 : {
      switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -128 | 0 | 0) {
      case 0:
      case 1:
      case 13:
      case 14:
      case 52:
      case 53:
       break label$5;
      default:
       break label$4;
      };
     }
     label$6 : {
      if (!($265() | 0)) {
       break label$6
      }
      if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80312 + 10 | 0) >> 0] | 0 | 0)) {
       break label$6
      }
      HEAP32[(0 + 101148 | 0) >> 2] = 1;
      HEAP32[(0 + 101144 | 0) >> 2] = 1;
      i64toi32_i32$2 = 79952;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$1;
      i64toi32_i32$2 = 80312;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $10$hi;
      $303(28486 | 0, $9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 28503 | 0, 28506 | 0);
      break label$4;
     }
     if (!($266() | 0)) {
      break label$4
     }
     if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80688 + 10 | 0) >> 0] | 0 | 0)) {
      break label$4
     }
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$2 = 80688;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$0 = $17$hi;
     $303(28486 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 28503 | 0, 28248 | 0);
    }
    label$7 : {
     switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -128 | 0 | 0) {
     case 1:
     case 14:
     case 53:
      $0_1 = HEAPU8[(79952 + 9 | 0) >> 0] | 0;
      if (!(HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0)) {
       break label$2
      }
      HEAP32[(0 + 101144 | 0) >> 2] = 1;
      HEAP32[(0 + 101148 | 0) >> 2] = 1;
      HEAP32[(0 + 101132 | 0) >> 2] = 1;
      i64toi32_i32$2 = 79952;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
      $304(28509 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $0_1 | 0);
      break label$2;
     case 0:
     case 13:
     case 52:
      break label$2;
     default:
      break label$7;
     };
    }
    label$9 : {
     $0_1 = HEAPU8[(79952 + 8 | 0) >> 0] | 0;
     if (!(HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0)) {
      break label$9
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101132 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $304(28509 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $0_1 | 0);
    }
    $0_1 = HEAPU8[(79952 + 9 | 0) >> 0] | 0;
    if (!(HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[(0 + 101144 | 0) >> 2] = 1;
    HEAP32[(0 + 101148 | 0) >> 2] = 1;
    HEAP32[(0 + 101132 | 0) >> 2] = 1;
    i64toi32_i32$2 = 79952;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $304(28509 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $0_1 | 0);
   }
   label$10 : {
    label$11 : {
     switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -128 | 0 | 0) {
     case 0:
     case 1:
     case 13:
     case 14:
     case 52:
     case 53:
      break label$11;
     default:
      break label$10;
     };
    }
    label$12 : {
     $0_1 = HEAPU8[(0 + 80312 | 0) >> 0] | 0;
     if (($0_1 + -10 | 0) >>> 0 < 5 >>> 0) {
      break label$12
     }
     if (($0_1 | 0) != (64 | 0)) {
      break label$10
     }
    }
    if ((HEAPU8[(79952 + 8 | 0) >> 0] | 0 | 0) != (HEAPU8[(80312 + 10 | 0) >> 0] | 0 | 0)) {
     break label$10
    }
    HEAP32[(0 + 101148 | 0) >> 2] = 1;
    HEAP32[(0 + 101144 | 0) >> 2] = 1;
    i64toi32_i32$2 = 79952;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$1;
    $55$hi = i64toi32_i32$0;
    i64toi32_i32$2 = 80312;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
    $56_1 = i64toi32_i32$0;
    $56$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $55$hi;
    i64toi32_i32$0 = $56$hi;
    $303(28486 | 0, $55_1 | 0, i64toi32_i32$1 | 0, $56_1 | 0, i64toi32_i32$0 | 0, 28503 | 0, 28506 | 0);
   }
   label$13 : {
    switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -128 | 0 | 0) {
    case 1:
    case 14:
    case 53:
     $0_1 = HEAPU8[(79952 + 9 | 0) >> 0] | 0;
     if (((HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0 | 0) < (2 | 0)) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101132 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $304(28509 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $0_1 | 0);
     return;
    case 0:
    case 13:
    case 52:
     break label$1;
    default:
     break label$13;
    };
   }
   label$15 : {
    $0_1 = HEAPU8[(79952 + 8 | 0) >> 0] | 0;
    if (((HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0 | 0) < (1 | 0)) {
     break label$15
    }
    HEAP32[(0 + 101144 | 0) >> 2] = 1;
    HEAP32[(0 + 101148 | 0) >> 2] = 1;
    HEAP32[(0 + 101132 | 0) >> 2] = 1;
    i64toi32_i32$2 = 79952;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
    $304(28509 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $0_1 | 0);
   }
   $0_1 = HEAPU8[(79952 + 9 | 0) >> 0] | 0;
   if (((HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0 | 0) < (1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   HEAP32[(0 + 101148 | 0) >> 2] = 1;
   HEAP32[(0 + 101132 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $304(28509 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $0_1 | 0);
  }
 }
 
 function $335() {
  var $0_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -128 | 0 | 0) {
    case 0:
    case 13:
    case 52:
     $0_1 = HEAPU8[(79952 + 10 | 0) >> 0] | 0;
     if ((HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) >>> 0 < ((HEAP32[(0 + 32096 | 0) >> 2] | 0) + (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0) >>> 0) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101136 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $304(28531 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $0_1 | 0);
     return;
    case 15:
    case 16:
     $0_1 = HEAPU8[(79952 + 10 | 0) >> 0] | 0;
     if ((HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) >>> 0 < ((HEAP32[(0 + 32084 | 0) >> 2] | 0) + (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0) >>> 0) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101136 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $304(28531 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $0_1 | 0);
     return;
    case 17:
    case 18:
     $0_1 = HEAPU8[(79952 + 10 | 0) >> 0] | 0;
     if ((HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) >>> 0 < ((HEAP32[(0 + 32088 | 0) >> 2] | 0) + (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0) >>> 0) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101136 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $304(28531 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $0_1 | 0);
     return;
    case 54:
    case 55:
     break label$2;
    default:
     break label$1;
    };
   }
   $0_1 = HEAPU8[(79952 + 10 | 0) >> 0] | 0;
   if ((HEAP32[((78672 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 78356 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   HEAP32[(0 + 101148 | 0) >> 2] = 1;
   HEAP32[(0 + 101136 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $304(28531 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $0_1 | 0);
  }
 }
 
 function $336() {
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -128 | 0 | 0) {
    case 0:
    case 13:
    case 52:
     if (!(((HEAP32[(0 + 77800 | 0) >> 2] | 0) >>> ((HEAP32[(0 + 32096 | 0) >> 2] | 0) + 1 | 0) | 0) & 1 | 0)) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101140 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $305(28553 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
     return;
    case 2:
    case 3:
    case 15:
    case 16:
    case 26:
    case 27:
     if (!(((HEAP32[(0 + 77800 | 0) >> 2] | 0) >>> ((HEAP32[(0 + 32084 | 0) >> 2] | 0) + 1 | 0) | 0) & 1 | 0)) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101140 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $305(28553 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
     return;
    case 4:
    case 5:
    case 17:
    case 18:
    case 28:
    case 29:
     if (!(((HEAP32[(0 + 77800 | 0) >> 2] | 0) >>> ((HEAP32[(0 + 32088 | 0) >> 2] | 0) + 1 | 0) | 0) & 1 | 0)) {
      break label$1
     }
     HEAP32[(0 + 101144 | 0) >> 2] = 1;
     HEAP32[(0 + 101148 | 0) >> 2] = 1;
     HEAP32[(0 + 101140 | 0) >> 2] = 1;
     i64toi32_i32$2 = 79952;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $305(28553 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
     return;
    case 54:
    case 55:
     break label$2;
    default:
     break label$1;
    };
   }
   if (!((HEAPU8[(0 + 77800 | 0) >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   HEAP32[(0 + 101148 | 0) >> 2] = 1;
   HEAP32[(0 + 101140 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $305(28553 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  }
 }
 
 function $337($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $154(HEAP32[(0 + 3012 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $337($0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $339() {
  var $0_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $4$hi = 0, $4_1 = 0, $2_1 = 0, $5$hi = 0, $5_1 = 0, $3_1 = 0, $3$hi = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $82_1 = 0, $83_1 = 0, $139_1 = 0, $139$hi = 0, $143_1 = 0, $149_1 = 0, $164_1 = 0, $193_1 = 0, $230_1 = 0, $231_1 = 0, $237_1 = 0, $237$hi = 0, $250_1 = 0, $251_1 = 0, $313_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0_1 = global$0 - 688 | 0;
  global$0 = $0_1;
  $3($0_1 + 544 | 0 | 0, 0 | 0, 128 | 0) | 0;
  HEAP32[($0_1 + 536 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = 78400;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 11;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$3 = 78400;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$1;
     $5$hi = i64toi32_i32$5;
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                i64toi32_i32$5 = $4$hi;
                switch ($4_1 | 0) {
                case 4:
                 break label$10;
                case 3:
                 break label$11;
                case 2:
                 break label$12;
                case 1:
                 break label$13;
                case 8:
                 break label$3;
                case 11:
                 break label$4;
                case 10:
                 break label$5;
                case 9:
                 break label$6;
                case 7:
                 break label$7;
                case 6:
                 break label$8;
                case 5:
                 break label$9;
                default:
                 break label$14;
                };
               }
               i64toi32_i32$5 = $5$hi;
               i64toi32_i32$1 = $0_1;
               HEAP32[($0_1 + 48 | 0) >> 2] = $5_1;
               HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$5;
               $86(28585 | 0, $0_1 + 48 | 0 | 0) | 0;
               $1_1 = 0;
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
               i64toi32_i32$1 = $0_1;
               HEAP32[($0_1 + 32 | 0) >> 2] = $5_1;
               HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$5;
               $99(101696 | 0, 28605 | 0, $0_1 + 32 | 0 | 0) | 0;
               i64toi32_i32$1 = $0_1;
               HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
               HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
               $64(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28605 | 0, $0_1 + 16 | 0 | 0) | 0;
               $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
               break label$1;
              }
              HEAPF64[($0_1 + 96 | 0) >> 3] = +Math_fround(HEAPF32[(78672 + 192 | 0) >> 2]);
              $87(28623 | 0, $0_1 + 96 | 0 | 0) | 0;
              $1_1 = 0;
              (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
              HEAPF64[($0_1 + 80 | 0) >> 3] = +Math_fround(HEAPF32[(78672 + 192 | 0) >> 2]);
              $100(101696 | 0, 28626 | 0, $0_1 + 80 | 0 | 0) | 0;
              HEAPF64[($0_1 + 64 | 0) >> 3] = +Math_fround(HEAPF32[(78672 + 192 | 0) >> 2]);
              $65(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28626 | 0, $0_1 + 64 | 0 | 0) | 0;
              $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
              break label$1;
             }
             HEAPF64[($0_1 + 144 | 0) >> 3] = +HEAPF64[(78672 + 192 | 0) >> 3];
             $87(28644 | 0, $0_1 + 144 | 0 | 0) | 0;
             $1_1 = 0;
             (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
             HEAPF64[($0_1 + 128 | 0) >> 3] = +HEAPF64[(78672 + 192 | 0) >> 3];
             $100(101696 | 0, 28648 | 0, $0_1 + 128 | 0 | 0) | 0;
             HEAPF64[($0_1 + 112 | 0) >> 3] = +HEAPF64[(78672 + 192 | 0) >> 3];
             $65(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28648 | 0, $0_1 + 112 | 0 | 0) | 0;
             $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
             break label$1;
            }
            i64toi32_i32$5 = 0;
            $4_1 = 0;
            $4$hi = i64toi32_i32$5;
            $1_1 = 0;
            label$15 : {
             label$16 : while (1) {
              $82_1 = $0_1 + 528 | 0;
              $83_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
              i64toi32_i32$5 = $5$hi;
              i64toi32_i32$5 = $4$hi;
              i64toi32_i32$5 = $5$hi;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
               i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
              }
              $111($82_1 | 0, $83_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 2 | 0, $0_1 + 536 | 0 | 0, 28668 | 0, 93 | 0);
              i64toi32_i32$5 = $0_1;
              i64toi32_i32$4 = HEAP32[($0_1 + 528 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[($0_1 + 532 | 0) >> 2] | 0;
              $3_1 = i64toi32_i32$4;
              $3$hi = i64toi32_i32$3;
              $2_1 = i64toi32_i32$4;
              HEAP8[(($0_1 + 544 | 0) + $1_1 | 0) >> 0] = i64toi32_i32$4;
              i64toi32_i32$4 = $0_1;
              HEAP32[($0_1 + 680 | 0) >> 2] = $2_1;
              HEAP32[($0_1 + 684 | 0) >> 2] = i64toi32_i32$3;
              HEAP8[($0_1 + 543 | 0) >> 0] = $2_1;
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$5 = $4_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$2 = 126;
              if (i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
               break label$15
              }
              $1_1 = $1_1 + 1 | 0;
              i64toi32_i32$5 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 1;
              i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
              i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
               i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
              }
              $4_1 = i64toi32_i32$1;
              $4$hi = i64toi32_i32$0;
              if ($2_1 & 255 | 0) {
               continue label$16
              }
              break label$16;
             };
            }
            HEAP32[($0_1 + 192 | 0) >> 2] = $0_1 + 544 | 0;
            $86(28730 | 0, $0_1 + 192 | 0 | 0) | 0;
            $1_1 = 0;
            (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
            HEAP32[($0_1 + 176 | 0) >> 2] = $0_1 + 544 | 0;
            $99(101696 | 0, 28733 | 0, $0_1 + 176 | 0 | 0) | 0;
            HEAP32[($0_1 + 160 | 0) >> 2] = $0_1 + 544 | 0;
            $64(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28733 | 0, $0_1 + 160 | 0 | 0) | 0;
            $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
            break label$1;
           }
           HEAP32[($0_1 + 240 | 0) >> 2] = $0_1 + 680 | 0;
           $338(28585 | 0, $0_1 + 240 | 0 | 0) | 0;
           i64toi32_i32$5 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[($0_1 + 684 | 0) >> 2] | 0;
           $139_1 = i64toi32_i32$0;
           $139$hi = i64toi32_i32$2;
           i64toi32_i32$2 = 0;
           i64toi32_i32$0 = $139$hi;
           $182(2 | 0, i64toi32_i32$2 | 0, $139_1 | 0, i64toi32_i32$0 | 0, 5 | 0, 1 | 0);
           $1_1 = 0;
           (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
           i64toi32_i32$5 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[($0_1 + 684 | 0) >> 2] | 0;
           $143_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $0_1;
           HEAP32[($0_1 + 224 | 0) >> 2] = $143_1;
           HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$2;
           $99(101696 | 0, 28749 | 0, $0_1 + 224 | 0 | 0) | 0;
           i64toi32_i32$5 = $0_1;
           i64toi32_i32$2 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 684 | 0) >> 2] | 0;
           $149_1 = i64toi32_i32$2;
           i64toi32_i32$2 = $0_1;
           HEAP32[($0_1 + 208 | 0) >> 2] = $149_1;
           HEAP32[($0_1 + 212 | 0) >> 2] = i64toi32_i32$0;
           $64(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28749 | 0, $0_1 + 208 | 0 | 0) | 0;
           $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
           break label$1;
          }
          HEAP32[($0_1 + 288 | 0) >> 2] = $0_1 + 680 | 0;
          $338(28623 | 0, $0_1 + 288 | 0 | 0) | 0;
          i64toi32_i32$5 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($0_1 + 684 | 0) >> 2] | 0;
          $164_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[($0_1 + 280 | 0) >> 2] = $164_1;
          HEAP32[($0_1 + 284 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          $184(0 | 0, i64toi32_i32$2 | 0, $0_1 + 280 | 0 | 0, 6 | 0, 1 | 0);
          $1_1 = 0;
          (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
          HEAPF64[($0_1 + 272 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 680 | 0) >> 2]);
          $100(101696 | 0, 28766 | 0, $0_1 + 272 | 0 | 0) | 0;
          HEAPF64[($0_1 + 256 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 680 | 0) >> 2]);
          $65(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28766 | 0, $0_1 + 256 | 0 | 0) | 0;
          $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
          break label$1;
         }
         HEAP32[($0_1 + 336 | 0) >> 2] = $0_1 + 680 | 0;
         $338(28644 | 0, $0_1 + 336 | 0 | 0) | 0;
         i64toi32_i32$5 = $0_1;
         i64toi32_i32$2 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 684 | 0) >> 2] | 0;
         $193_1 = i64toi32_i32$2;
         i64toi32_i32$2 = $0_1;
         HEAP32[($0_1 + 328 | 0) >> 2] = $193_1;
         HEAP32[($0_1 + 332 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $184(0 | 0, i64toi32_i32$0 | 0, $0_1 + 328 | 0 | 0, 8 | 0, 1 | 0);
         $1_1 = 0;
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
         HEAPF64[($0_1 + 320 | 0) >> 3] = +HEAPF64[($0_1 + 680 | 0) >> 3];
         $100(101696 | 0, 28783 | 0, $0_1 + 320 | 0 | 0) | 0;
         HEAPF64[($0_1 + 304 | 0) >> 3] = +HEAPF64[($0_1 + 680 | 0) >> 3];
         $65(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28783 | 0, $0_1 + 304 | 0 | 0) | 0;
         $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
         break label$1;
        }
        i64toi32_i32$5 = 78400;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] | 0;
        $3_1 = i64toi32_i32$0;
        $3$hi = i64toi32_i32$2;
        HEAP32[($0_1 + 400 | 0) >> 2] = $0_1 + 544 | 0;
        $338(28730 | 0, $0_1 + 400 | 0 | 0) | 0;
        i64toi32_i32$2 = 0;
        $4_1 = 0;
        $4$hi = i64toi32_i32$2;
        $1_1 = 0;
        label$17 : {
         label$18 : while (1) {
          $2_1 = HEAPU8[(($0_1 + 544 | 0) + $1_1 | 0) >> 0] | 0;
          HEAP8[($0_1 + 680 | 0) >> 0] = $2_1;
          HEAP8[($0_1 + 543 | 0) >> 0] = $2_1;
          i64toi32_i32$5 = $0_1;
          i64toi32_i32$2 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($0_1 + 684 | 0) >> 2] | 0;
          $230_1 = i64toi32_i32$2;
          i64toi32_i32$2 = $0_1;
          HEAP32[($0_1 + 392 | 0) >> 2] = $230_1;
          HEAP32[($0_1 + 396 | 0) >> 2] = i64toi32_i32$0;
          $231_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
          i64toi32_i32$0 = $5$hi;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$0 = $5$hi;
          i64toi32_i32$5 = $5_1;
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$4 = $4_1;
          i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $113($231_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, $0_1 + 392 | 0 | 0, 2 | 0, 1 | 0);
          i64toi32_i32$1 = $3$hi;
          $237_1 = $3_1;
          $237$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$4 = 1;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
          i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
           i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
          }
          $4_1 = i64toi32_i32$2;
          $4$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $237$hi;
          i64toi32_i32$1 = $237_1;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$4 = i64toi32_i32$2;
          if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
           $30_1 = 1
          } else {
           if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0) {
             $31_1 = 0
            } else {
             $31_1 = 1
            }
            $32_1 = $31_1;
           } else {
            $32_1 = 0
           }
           $30_1 = $32_1;
          }
          if ($30_1) {
           break label$17
          }
          $1_1 = $1_1 + 1 | 0;
          if ((HEAPU8[($0_1 + 543 | 0) >> 0] | 0) & 255 | 0) {
           continue label$18
          }
          break label$18;
         };
        }
        $1_1 = 0;
        HEAP8[($0_1 + 680 | 0) >> 0] = 0;
        i64toi32_i32$4 = $0_1;
        i64toi32_i32$1 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($0_1 + 684 | 0) >> 2] | 0;
        $250_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $0_1;
        HEAP32[($0_1 + 384 | 0) >> 2] = $250_1;
        HEAP32[($0_1 + 388 | 0) >> 2] = i64toi32_i32$3;
        $251_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$4 = $5_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $113($251_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, $0_1 + 384 | 0 | 0, 2 | 0, 1 | 0);
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
        HEAP32[($0_1 + 368 | 0) >> 2] = $0_1 + 544 | 0;
        $99(101696 | 0, 28802 | 0, $0_1 + 368 | 0 | 0) | 0;
        HEAP32[($0_1 + 352 | 0) >> 2] = $0_1 + 544 | 0;
        $64(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28802 | 0, $0_1 + 352 | 0 | 0) | 0;
        $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
        break label$1;
       }
       $206(28821 | 0) | 0;
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
       HEAP32[($0_1 + 432 | 0) >> 2] = 28852;
       $99(101696 | 0, 28817 | 0, $0_1 + 432 | 0 | 0) | 0;
       HEAP32[($0_1 + 416 | 0) >> 2] = 28852;
       $64(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28817 | 0, $0_1 + 416 | 0 | 0) | 0;
       $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
       break label$2;
      }
      i64toi32_i32$2 = $5$hi;
      $2_1 = ($5_1 << 24 | 0) >> 24 | 0;
      $89($2_1 | 0) | 0;
      $1_1 = 0;
      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
      HEAP32[($0_1 + 464 | 0) >> 2] = $2_1;
      $99(101696 | 0, 28884 | 0, $0_1 + 464 | 0 | 0) | 0;
      HEAP32[($0_1 + 448 | 0) >> 2] = $2_1;
      $64(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28884 | 0, $0_1 + 448 | 0 | 0) | 0;
      $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
     }
     HEAP32[($0_1 + 512 | 0) >> 2] = $0_1 + 543 | 0;
     $338(28901 | 0, $0_1 + 512 | 0 | 0) | 0;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$2 = HEAP8[($0_1 + 543 | 0) >> 0] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $313_1 = i64toi32_i32$2;
     i64toi32_i32$2 = 78400;
     HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $313_1;
     HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$4;
     $1_1 = 0;
     (wasm2js_i32$0 = 0, wasm2js_i32$1 = $30(28590 | 0, 28603 | 0) | 0), HEAP32[(wasm2js_i32$0 + 77760 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($0_1 + 496 | 0) >> 2] = HEAP8[($0_1 + 543 | 0) >> 0] | 0;
     $99(101696 | 0, 28905 | 0, $0_1 + 496 | 0 | 0) | 0;
     HEAP32[($0_1 + 480 | 0) >> 2] = HEAP8[($0_1 + 543 | 0) >> 0] | 0;
     $64(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0, 28905 | 0, $0_1 + 480 | 0 | 0) | 0;
     $39(HEAP32[(0 + 77760 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $0_1;
    HEAP32[$0_1 >> 2] = $3_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$4;
    $86(28921 | 0, $0_1 | 0) | 0;
   }
   $1_1 = 1;
  }
  global$0 = $0_1 + 688 | 0;
  return $1_1 | 0;
 }
 
 function $340() {
  var i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $2$hi = 0, $0_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $12_1 = 0, $12$hi = 0, $17_1 = 0, $17$hi = 0, $60_1 = 0, $70_1 = 0, $81_1 = 0, $91_1 = 0, $102_1 = 0, $114_1 = 0, $125_1 = 0, $136_1 = 0, $148_1 = 0;
  $0_1 = global$0 - 176 | 0;
  global$0 = $0_1;
  $282(HEAP32[(0 + 79776 | 0) >> 2] | 0 | 0, HEAP32[(0 + 78352 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79776 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79780 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    $1_1 = HEAP32[(0 + 34080 | 0) >> 2] | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$3 = $12_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break label$2
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $1_1 + 40 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$1 = $17_1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$2 | 0)) {
     $26_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $27_1 = 0
      } else {
       $27_1 = 1
      }
      $28_1 = $27_1;
     } else {
      $28_1 = 0
     }
     $26_1 = $28_1;
    }
    if ($26_1) {
     break label$2
    }
    label$3 : {
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 3;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$3 = $2$hi;
     $116($0_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 28972 | 0, 80 | 0);
     $4(79784 | 0, $0_1 + 32 | 0 | 0, 144 | 0) | 0;
     break label$1;
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$3;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
    $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 29026 | 0, i64toi32_i32$0 + 16 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $0_1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[i64toi32_i32$0 >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 29109 | 0, i64toi32_i32$0 | 0) | 0;
  }
  HEAP32[(0 + 101168 | 0) >> 2] = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 79776 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79780 | 0) >> 2] | 0;
  $2_1 = i64toi32_i32$3;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$3 = 79784;
  HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(79784 + 160 | 0) >> 2] = HEAP32[(0 + 78352 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 4;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  i64toi32_i32$2 = 79784;
  HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] = i64toi32_i32$5;
  label$4 : {
   label$5 : {
    switch (HEAP32[(0 + 77816 | 0) >> 2] | 0 | 0) {
    case 6:
     label$14 : {
      if (!(HEAP32[(80688 + 160 | 0) >> 2] | 0)) {
       break label$14
      }
      label$15 : {
       if (((HEAPU8[(0 + 80688 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$15
       }
       i64toi32_i32$0 = 80688;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 168 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 172 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       i64toi32_i32$0 = 78400;
       HEAP32[(i64toi32_i32$0 + 248 | 0) >> 2] = i64toi32_i32$3;
       HEAP32[(i64toi32_i32$0 + 252 | 0) >> 2] = i64toi32_i32$4;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      i64toi32_i32$2 = 80688;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
      $60_1 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      HEAP32[(i64toi32_i32$4 + 79768 | 0) >> 2] = $60_1;
      HEAP32[(i64toi32_i32$4 + 79772 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = 80688;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0);
      break label$4;
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 79772 | 0) >> 2] = i64toi32_i32$4;
     break label$4;
    case 7:
     label$16 : {
      i64toi32_i32$2 = 83272;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
      if (!(i64toi32_i32$4 | i64toi32_i32$0 | 0)) {
       break label$16
      }
      label$17 : {
       if (((HEAPU8[(0 + 80312 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$17
       }
       i64toi32_i32$2 = 80312;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       i64toi32_i32$2 = 78400;
       HEAP32[(i64toi32_i32$2 + 248 | 0) >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$2 + 252 | 0) >> 2] = i64toi32_i32$3;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      i64toi32_i32$4 = 83272;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
      $70_1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      HEAP32[(i64toi32_i32$3 + 79768 | 0) >> 2] = $70_1;
      HEAP32[(i64toi32_i32$3 + 79772 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$4 = 80312;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$2 | 0, i64toi32_i32$3 | 0);
      break label$4;
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = 0;
     HEAP32[(i64toi32_i32$2 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$2 + 79772 | 0) >> 2] = i64toi32_i32$3;
     break label$4;
    case 8:
     if (HEAP32[(0 + 101148 | 0) >> 2] | 0) {
      break label$4
     }
     label$18 : {
      i64toi32_i32$4 = 83240;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
      if (!(i64toi32_i32$3 | i64toi32_i32$2 | 0)) {
       break label$18
      }
      label$19 : {
       if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$19
       }
       i64toi32_i32$4 = 79952;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 152 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 156 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$4 = 78400;
       HEAP32[(i64toi32_i32$4 + 248 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$4 + 252 | 0) >> 2] = i64toi32_i32$5;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      i64toi32_i32$3 = 83240;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
      $81_1 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      HEAP32[(i64toi32_i32$5 + 79768 | 0) >> 2] = $81_1;
      HEAP32[(i64toi32_i32$5 + 79772 | 0) >> 2] = i64toi32_i32$4;
      i64toi32_i32$3 = 79952;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0);
      break label$4;
     }
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$4 = 0;
     HEAP32[(i64toi32_i32$4 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$4 + 79772 | 0) >> 2] = i64toi32_i32$5;
     break label$4;
    case 3:
     label$20 : {
      if (!(HEAP32[(80688 + 160 | 0) >> 2] | 0)) {
       break label$20
      }
      label$21 : {
       if (((HEAPU8[(0 + 80688 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$21
       }
       i64toi32_i32$3 = 80688;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 168 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 172 | 0) >> 2] | 0;
       i64toi32_i32$3 = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       i64toi32_i32$3 = 78400;
       HEAP32[(i64toi32_i32$3 + 248 | 0) >> 2] = i64toi32_i32$2;
       HEAP32[(i64toi32_i32$3 + 252 | 0) >> 2] = i64toi32_i32$0;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      HEAP32[(0 + 101156 | 0) >> 2] = 1;
      HEAP32[(0 + 101160 | 0) >> 2] = 1;
      HEAP32[(0 + 101164 | 0) >> 2] = 1;
      i64toi32_i32$4 = 80688;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
      $91_1 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$0 + 79768 | 0) >> 2] = $91_1;
      HEAP32[(i64toi32_i32$0 + 79772 | 0) >> 2] = i64toi32_i32$3;
      i64toi32_i32$4 = 80688;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 168 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 172 | 0) >> 2] | 0;
      $305(29202 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$4 = 80688;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 168 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 172 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0);
      break label$4;
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 79772 | 0) >> 2] = i64toi32_i32$3;
     break label$4;
    case 4:
     label$22 : {
      i64toi32_i32$4 = 83272;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 44 | 0) >> 2] | 0;
      if (!(i64toi32_i32$3 | i64toi32_i32$0 | 0)) {
       break label$22
      }
      label$23 : {
       if (((HEAPU8[(0 + 80312 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$23
       }
       i64toi32_i32$4 = 80312;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       i64toi32_i32$4 = 78400;
       HEAP32[(i64toi32_i32$4 + 248 | 0) >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$4 + 252 | 0) >> 2] = i64toi32_i32$2;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      HEAP32[(0 + 101156 | 0) >> 2] = 1;
      HEAP32[(0 + 101160 | 0) >> 2] = 1;
      i64toi32_i32$3 = 83272;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
      $102_1 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      HEAP32[(i64toi32_i32$2 + 79768 | 0) >> 2] = $102_1;
      HEAP32[(i64toi32_i32$2 + 79772 | 0) >> 2] = i64toi32_i32$4;
      i64toi32_i32$3 = 80688;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 168 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 172 | 0) >> 2] | 0;
      $305(29222 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$3 = 80312;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0);
      break label$4;
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$2 = 0;
     HEAP32[(i64toi32_i32$2 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$2 + 79772 | 0) >> 2] = i64toi32_i32$4;
     break label$4;
    case 5:
     if (HEAP32[(0 + 101148 | 0) >> 2] | 0) {
      break label$4
     }
     label$24 : {
      i64toi32_i32$3 = 83240;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
      if (!(i64toi32_i32$4 | i64toi32_i32$2 | 0)) {
       break label$24
      }
      label$25 : {
       if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$25
       }
       i64toi32_i32$3 = 79952;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$3 = 78400;
       HEAP32[(i64toi32_i32$3 + 248 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$3 + 252 | 0) >> 2] = i64toi32_i32$5;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      HEAP32[(0 + 101156 | 0) >> 2] = 1;
      i64toi32_i32$4 = 83240;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
      $114_1 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      HEAP32[(i64toi32_i32$5 + 79768 | 0) >> 2] = $114_1;
      HEAP32[(i64toi32_i32$5 + 79772 | 0) >> 2] = i64toi32_i32$3;
      i64toi32_i32$4 = 80688;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 168 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 172 | 0) >> 2] | 0;
      $305(29235 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$4 = 79952;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 152 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 156 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0);
      break label$4;
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = 0;
     HEAP32[(i64toi32_i32$5 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$5 + 79772 | 0) >> 2] = i64toi32_i32$3;
     break label$4;
    case 0:
     label$26 : {
      if (!(HEAP32[(80688 + 160 | 0) >> 2] | 0)) {
       break label$26
      }
      label$27 : {
       if (((HEAPU8[(0 + 80688 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$27
       }
       i64toi32_i32$4 = 80688;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 168 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 172 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       i64toi32_i32$4 = 78400;
       HEAP32[(i64toi32_i32$4 + 248 | 0) >> 2] = i64toi32_i32$2;
       HEAP32[(i64toi32_i32$4 + 252 | 0) >> 2] = i64toi32_i32$0;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      HEAP32[(0 + 101156 | 0) >> 2] = 1;
      i64toi32_i32$5 = 80688;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
      $125_1 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$0 + 79768 | 0) >> 2] = $125_1;
      HEAP32[(i64toi32_i32$0 + 79772 | 0) >> 2] = i64toi32_i32$4;
      i64toi32_i32$5 = 80688;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 168 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 172 | 0) >> 2] | 0;
      $305(29235 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$5 = 80688;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 168 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 172 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0);
      break label$4;
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 79772 | 0) >> 2] = i64toi32_i32$4;
     break label$4;
    case 1:
     label$28 : {
      i64toi32_i32$5 = 83272;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] | 0;
      if (!(i64toi32_i32$4 | i64toi32_i32$0 | 0)) {
       break label$28
      }
      label$29 : {
       if (((HEAPU8[(0 + 80312 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
        break label$29
       }
       i64toi32_i32$5 = 80312;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 4;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       i64toi32_i32$5 = 78400;
       HEAP32[(i64toi32_i32$5 + 248 | 0) >> 2] = i64toi32_i32$3;
       HEAP32[(i64toi32_i32$5 + 252 | 0) >> 2] = i64toi32_i32$2;
      }
      HEAP32[(0 + 101168 | 0) >> 2] = 1;
      HEAP32[(0 + 101156 | 0) >> 2] = 1;
      i64toi32_i32$4 = 83272;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
      $136_1 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      HEAP32[(i64toi32_i32$2 + 79768 | 0) >> 2] = $136_1;
      HEAP32[(i64toi32_i32$2 + 79772 | 0) >> 2] = i64toi32_i32$5;
      i64toi32_i32$4 = 80312;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $305(29235 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$4 = 80312;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $305(29187 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 | 0);
      break label$4;
     }
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = 0;
     HEAP32[(i64toi32_i32$2 + 79768 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$2 + 79772 | 0) >> 2] = i64toi32_i32$5;
     break label$4;
    case 2:
     break label$5;
    default:
     break label$4;
    };
   }
   if (HEAP32[(0 + 101148 | 0) >> 2] | 0) {
    break label$4
   }
   label$30 : {
    i64toi32_i32$4 = 83240;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
     break label$30
    }
    label$31 : {
     if (((HEAPU8[(0 + 79952 | 0) >> 0] | 0) & 254 | 0 | 0) != (110 | 0)) {
      break label$31
     }
     i64toi32_i32$4 = 79952;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 152 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 156 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 4;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     i64toi32_i32$4 = 78400;
     HEAP32[(i64toi32_i32$4 + 248 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(i64toi32_i32$4 + 252 | 0) >> 2] = i64toi32_i32$3;
    }
    HEAP32[(0 + 101168 | 0) >> 2] = 1;
    HEAP32[(0 + 101156 | 0) >> 2] = 1;
    i64toi32_i32$5 = 83240;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
    $148_1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    HEAP32[(i64toi32_i32$3 + 79768 | 0) >> 2] = $148_1;
    HEAP32[(i64toi32_i32$3 + 79772 | 0) >> 2] = i64toi32_i32$4;
    i64toi32_i32$5 = 79952;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 152 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 156 | 0) >> 2] | 0;
    $305(29235 | 0, i64toi32_i32$4 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$5 = 79952;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 152 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 156 | 0) >> 2] | 0;
    $305(29187 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 | 0);
    break label$4;
   }
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = 0;
   HEAP32[(i64toi32_i32$3 + 79768 | 0) >> 2] = $2_1;
   HEAP32[(i64toi32_i32$3 + 79772 | 0) >> 2] = i64toi32_i32$4;
  }
  global$0 = $0_1 + 176 | 0;
 }
 
 function $341() {
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $1_1 = 0, i64toi32_i32$0 = 0, $0_1 = 0, $3_1 = 0, $3$hi = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $29_1 = 0, $29$hi = 0, $30_1 = 0, $30$hi = 0, $31_1 = 0, $35_1 = 0, $35$hi = 0, $36_1 = 0, $36$hi = 0, $40$hi = 0, $57_1 = 0, $42_1 = 0, $46_1 = 0, $46$hi = 0, $47_1 = 0, $47$hi = 0, $62_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $71_1 = 0, $80_1 = 0, $84_1 = 0, $85_1 = 0, $93_1 = 0, $101_1 = 0, $108_1 = 0, $113_1 = 0, $114_1 = 0, $118_1 = 0, $122_1 = 0, $123_1 = 0, $126_1 = 0, $132_1 = 0, $136_1 = 0, $144_1 = 0, $152_1 = 0, $158_1 = 0, $162_1 = 0, $170_1 = 0, $178_1 = 0, $184_1 = 0, $188_1 = 0, $195_1 = 0, $198_1 = 0, $216_1 = 0, $223_1 = 0;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  HEAP32[(0 + 101132 | 0) >> 2] = 0;
  HEAP32[(0 + 101136 | 0) >> 2] = 0;
  HEAP32[(0 + 101140 | 0) >> 2] = 0;
  HEAP32[(0 + 101084 | 0) >> 2] = 0;
  HEAP32[(0 + 101080 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAPU8[(0 + 79952 | 0) >> 0] | 0;
    if (($1_1 | 0) == (120 | 0)) {
     break label$2
    }
    if (($1_1 | 0) != (1 | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   i64toi32_i32$2 = 79952;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   $305(29241 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  }
  label$3 : {
   label$4 : {
    if ((HEAP8[(0 + 79952 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $316();
    $317();
    label$5 : {
     if (HEAP32[(0 + 101148 | 0) >> 2] | 0) {
      break label$5
     }
     $1_1 = HEAP32[(0 + 77816 | 0) >> 2] | 0;
     if (!(($1_1 | 0) == (2 | 0) | (($1_1 | 0) == (8 | 0) | ($1_1 | 0) == (5 | 0) | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$2 = 78400 + ((HEAPU8[(79952 + 8 | 0) >> 0] | 0) << 3 | 0) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $29_1 = i64toi32_i32$1;
     $29$hi = i64toi32_i32$0;
     i64toi32_i32$2 = 80688;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $30_1 = i64toi32_i32$0;
     $30$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$0 = $30$hi;
     i64toi32_i32$0 = $314($29_1 | 0, i64toi32_i32$1 | 0, $30_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $31_1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 83240 | 0) >> 2] = $31_1;
     HEAP32[(i64toi32_i32$0 + 83244 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = 78400 + ((HEAPU8[(79952 + 9 | 0) >> 0] | 0) << 3 | 0) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $35_1 = i64toi32_i32$1;
     $35$hi = i64toi32_i32$0;
     i64toi32_i32$2 = 80688;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $36_1 = i64toi32_i32$0;
     $36$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $35$hi;
     i64toi32_i32$0 = $36$hi;
     i64toi32_i32$0 = $315($35_1 | 0, i64toi32_i32$1 | 0, $36_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$0 = 83240;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $3_1;
     HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 83240 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 83244 | 0) >> 2] | 0;
     $40$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $40$hi;
     $57_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $307(HEAPU8[(0 + 79952 | 0) >> 0] | 0 | 0, $57_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $42_1 = i64toi32_i32$1;
     i64toi32_i32$1 = 83240;
     HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $42_1;
     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
     label$6 : {
      label$7 : {
       switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -109 | 0 | 0) {
       case 0:
       case 2:
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 83240 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 83244 | 0) >> 2] | 0;
        $3_1 = i64toi32_i32$0;
        $3$hi = i64toi32_i32$1;
        break label$6;
       default:
        break label$7;
       };
      }
      i64toi32_i32$2 = 79952;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
      $46_1 = i64toi32_i32$1;
      $46$hi = i64toi32_i32$0;
      i64toi32_i32$2 = 79952;
      i64toi32_i32$0 = HEAP16[(i64toi32_i32$2 + 12 | 0) >> 1] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $47_1 = i64toi32_i32$0;
      $47$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $46$hi;
      i64toi32_i32$2 = $46_1;
      i64toi32_i32$0 = $47$hi;
      i64toi32_i32$3 = $47_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3_1 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = 83240;
     HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $3_1;
     HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$5;
    }
    $250();
    $251();
    $252();
    $253();
    $258();
    label$9 : {
     label$10 : {
      $1_1 = (HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -100 | 0;
      if ($1_1 >>> 0 > 11 >>> 0) {
       break label$10
      }
      if ((1 << $1_1 | 0) & 3903 | 0) {
       break label$9
      }
     }
     HEAP32[(0 + 77796 | 0) >> 2] = HEAP32[(0 + 77796 | 0) >> 2] | 0 | 8 | 0;
    }
    i64toi32_i32$1 = 78400 + ((HEAPU8[(79952 + 8 | 0) >> 0] | 0) << 3 | 0) | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $62_1 = i64toi32_i32$5;
    i64toi32_i32$5 = 80120;
    HEAP32[(i64toi32_i32$5 + 152 | 0) >> 2] = $62_1;
    HEAP32[(i64toi32_i32$5 + 156 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$1 = 78400 + ((HEAPU8[(79952 + 9 | 0) >> 0] | 0) << 3 | 0) | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $66_1 = i64toi32_i32$2;
    i64toi32_i32$2 = 80120;
    HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] = $66_1;
    HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$1 = 79952;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $67_1 = i64toi32_i32$5;
    i64toi32_i32$5 = 80120;
    HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] = $67_1;
    HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$1 = 79952;
    i64toi32_i32$2 = HEAP16[(i64toi32_i32$1 + 12 | 0) >> 1] | 0;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $68_1 = i64toi32_i32$2;
    i64toi32_i32$2 = 80120;
    HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] = $68_1;
    HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] = i64toi32_i32$5;
    $1_1 = $4(80120 | 0, 79952 | 0, 144 | 0) | 0;
    i64toi32_i32$1 = 79952;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
    $71_1 = i64toi32_i32$5;
    i64toi32_i32$5 = $1_1;
    HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] = $71_1;
    HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$5 + 184 | 0) >> 2] = HEAP32[(79952 + 160 | 0) >> 2] | 0;
    break label$3;
   }
   $334();
   $335();
   $336();
   if (HEAP32[(0 + 101148 | 0) >> 2] | 0) {
    break label$3
   }
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          label$18 : {
           label$19 : {
            label$20 : {
             switch ((HEAPU8[(0 + 79952 | 0) >> 0] | 0) + -128 | 0 | 0) {
             case 0:
             case 13:
             case 52:
              i64toi32_i32$1 = 78400 + ((HEAPU8[(79952 + 8 | 0) >> 0] | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $80_1 = i64toi32_i32$2;
              i64toi32_i32$2 = 81784;
              HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] = $80_1;
              HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] = i64toi32_i32$5;
              i64toi32_i32$1 = 78400 + ((HEAPU8[(79952 + 9 | 0) >> 0] | 0) << 3 | 0) | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $84_1 = i64toi32_i32$5;
              i64toi32_i32$5 = 81784;
              HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] = $84_1;
              HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] = i64toi32_i32$2;
              i64toi32_i32$1 = 79952;
              i64toi32_i32$2 = HEAP16[(i64toi32_i32$1 + 12 | 0) >> 1] | 0;
              i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
              $85_1 = i64toi32_i32$2;
              i64toi32_i32$2 = 81784;
              HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] = $85_1;
              HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] = i64toi32_i32$5;
              $1_1 = HEAP32[(0 + 32096 | 0) >> 2] | 0;
              HEAP32[((78672 + ((HEAPU8[(79952 + 10 | 0) >> 0] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = $1_1 + (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0;
              i64toi32_i32$1 = 79952;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
              $93_1 = i64toi32_i32$5;
              i64toi32_i32$5 = 81784;
              HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] = $93_1;
              HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] = i64toi32_i32$2;
              HEAP32[(0 + 77800 | 0) >> 2] = HEAP32[(0 + 77800 | 0) >> 2] | 0 | (1 << ($1_1 + 1 | 0) | 0) | 0;
              $1_1 = $4(81784 | 0, 79952 | 0, 144 | 0) | 0;
              i64toi32_i32$1 = 79952;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
              $101_1 = i64toi32_i32$2;
              i64toi32_i32$2 = $1_1;
              HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] = $101_1;
              HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] = i64toi32_i32$5;
              HEAP32[(i64toi32_i32$2 + 200 | 0) >> 2] = HEAP32[(79952 + 160 | 0) >> 2] | 0;
              break label$19;
             case 54:
             case 55:
              break label$14;
             case 7:
             case 8:
             case 9:
             case 10:
             case 11:
             case 12:
             case 20:
             case 21:
             case 22:
             case 23:
             case 24:
             case 25:
              break label$16;
             case 4:
             case 5:
             case 17:
             case 18:
             case 28:
             case 29:
              break label$17;
             case 2:
             case 3:
             case 15:
             case 16:
             case 26:
             case 27:
              break label$18;
             case 1:
             case 14:
             case 53:
              break label$20;
             default:
              break label$15;
             };
            }
            $1_1 = HEAPU8[(79952 + 8 | 0) >> 0] | 0;
            i64toi32_i32$1 = 78400 + ($1_1 << 3 | 0) | 0;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $108_1 = i64toi32_i32$5;
            i64toi32_i32$5 = 81784;
            HEAP32[(i64toi32_i32$5 + 168 | 0) >> 2] = $108_1;
            HEAP32[(i64toi32_i32$5 + 172 | 0) >> 2] = i64toi32_i32$2;
            $2_1 = HEAPU8[(79952 + 9 | 0) >> 0] | 0;
            i64toi32_i32$1 = 78400 + ($2_1 << 3 | 0) | 0;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $113_1 = i64toi32_i32$2;
            i64toi32_i32$2 = 81784;
            HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] = $113_1;
            HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] = i64toi32_i32$5;
            i64toi32_i32$1 = 79952;
            i64toi32_i32$5 = HEAP16[(i64toi32_i32$1 + 12 | 0) >> 1] | 0;
            i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
            $114_1 = i64toi32_i32$5;
            i64toi32_i32$5 = 81784;
            HEAP32[(i64toi32_i32$5 + 184 | 0) >> 2] = $114_1;
            HEAP32[(i64toi32_i32$5 + 188 | 0) >> 2] = i64toi32_i32$2;
            i64toi32_i32$1 = 78672 + ($1_1 << 4 | 0) | 0;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $118_1 = i64toi32_i32$2;
            i64toi32_i32$2 = 81784;
            HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] = $118_1;
            HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] = i64toi32_i32$5;
            i64toi32_i32$1 = 78672 + ($2_1 << 4 | 0) | 0;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $122_1 = i64toi32_i32$5;
            i64toi32_i32$5 = 81784;
            HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] = $122_1;
            HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] = i64toi32_i32$2;
            i64toi32_i32$1 = 79952;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
            $123_1 = i64toi32_i32$2;
            i64toi32_i32$2 = 81784;
            HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] = $123_1;
            HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] = i64toi32_i32$5;
            $1_1 = $4(81784 | 0, 79952 | 0, 144 | 0) | 0;
            i64toi32_i32$1 = 79952;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
            $126_1 = i64toi32_i32$5;
            i64toi32_i32$5 = $1_1;
            HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] = $126_1;
            HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] = i64toi32_i32$2;
            HEAP32[(i64toi32_i32$5 + 200 | 0) >> 2] = HEAP32[(79952 + 160 | 0) >> 2] | 0;
           }
           $251();
           break label$13;
          }
          i64toi32_i32$1 = 78672 + ((HEAPU8[(79952 + 8 | 0) >> 0] | 0) << 4 | 0) | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $132_1 = i64toi32_i32$2;
          i64toi32_i32$2 = 81992;
          HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] = $132_1;
          HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] = i64toi32_i32$5;
          i64toi32_i32$1 = 78672 + ((HEAPU8[(79952 + 9 | 0) >> 0] | 0) << 4 | 0) | 0;
          i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $136_1 = i64toi32_i32$5;
          i64toi32_i32$5 = 81992;
          HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] = $136_1;
          HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] = i64toi32_i32$2;
          $1_1 = HEAP32[(0 + 32084 | 0) >> 2] | 0;
          HEAP32[((78672 + ((HEAPU8[(79952 + 10 | 0) >> 0] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = $1_1 + (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0;
          i64toi32_i32$1 = 79952;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
          $144_1 = i64toi32_i32$2;
          i64toi32_i32$2 = 81992;
          HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] = $144_1;
          HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] = i64toi32_i32$5;
          HEAP32[(0 + 77800 | 0) >> 2] = HEAP32[(0 + 77800 | 0) >> 2] | 0 | (1 << ($1_1 + 1 | 0) | 0) | 0;
          $1_1 = $4(81992 | 0, 79952 | 0, 144 | 0) | 0;
          i64toi32_i32$1 = 79952;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
          $152_1 = i64toi32_i32$5;
          i64toi32_i32$5 = $1_1;
          HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] = $152_1;
          HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] = i64toi32_i32$2;
          HEAP32[(i64toi32_i32$5 + 200 | 0) >> 2] = HEAP32[(79952 + 160 | 0) >> 2] | 0;
          $250();
          break label$13;
         }
         i64toi32_i32$1 = 78672 + ((HEAPU8[(79952 + 8 | 0) >> 0] | 0) << 4 | 0) | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $158_1 = i64toi32_i32$2;
         i64toi32_i32$2 = 82408;
         HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] = $158_1;
         HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] = i64toi32_i32$5;
         i64toi32_i32$1 = 78672 + ((HEAPU8[(79952 + 9 | 0) >> 0] | 0) << 4 | 0) | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $162_1 = i64toi32_i32$5;
         i64toi32_i32$5 = 82408;
         HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] = $162_1;
         HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] = i64toi32_i32$2;
         $1_1 = HEAP32[(0 + 32088 | 0) >> 2] | 0;
         HEAP32[((78672 + ((HEAPU8[(79952 + 10 | 0) >> 0] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = $1_1 + (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0;
         i64toi32_i32$1 = 79952;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
         $170_1 = i64toi32_i32$2;
         i64toi32_i32$2 = 82408;
         HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] = $170_1;
         HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] = i64toi32_i32$5;
         HEAP32[(0 + 77800 | 0) >> 2] = HEAP32[(0 + 77800 | 0) >> 2] | 0 | (1 << ($1_1 + 1 | 0) | 0) | 0;
         $1_1 = $4(82408 | 0, 79952 | 0, 144 | 0) | 0;
         i64toi32_i32$1 = 79952;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
         $178_1 = i64toi32_i32$5;
         i64toi32_i32$5 = $1_1;
         HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] = $178_1;
         HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] = i64toi32_i32$2;
         HEAP32[(i64toi32_i32$5 + 200 | 0) >> 2] = HEAP32[(79952 + 160 | 0) >> 2] | 0;
         $250();
         $251();
         break label$12;
        }
        i64toi32_i32$1 = 78672 + ((HEAPU8[(79952 + 8 | 0) >> 0] | 0) << 4 | 0) | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $184_1 = i64toi32_i32$2;
        i64toi32_i32$2 = 82824;
        HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] = $184_1;
        HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$1 = 78672 + ((HEAPU8[(79952 + 9 | 0) >> 0] | 0) << 4 | 0) | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $188_1 = i64toi32_i32$5;
        i64toi32_i32$5 = 82824;
        HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] = $188_1;
        HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] = i64toi32_i32$2;
        HEAP32[((78672 + ((HEAPU8[(79952 + 10 | 0) >> 0] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = (HEAP32[(0 + 32092 | 0) >> 2] | 0) + (HEAP32[(0 + 78356 | 0) >> 2] | 0) | 0;
        i64toi32_i32$1 = 79952;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
        $195_1 = i64toi32_i32$2;
        i64toi32_i32$2 = 82824;
        HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] = $195_1;
        HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] = i64toi32_i32$5;
        $1_1 = $4(82824 | 0, 79952 | 0, 144 | 0) | 0;
        i64toi32_i32$1 = 79952;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
        $198_1 = i64toi32_i32$5;
        i64toi32_i32$5 = $1_1;
        HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] = $198_1;
        HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$5 + 200 | 0) >> 2] = HEAP32[(79952 + 160 | 0) >> 2] | 0;
        $250();
        $251();
        $252();
        break label$11;
       }
       HEAP32[($0_1 + 24 | 0) >> 2] = 545;
       HEAP32[($0_1 + 20 | 0) >> 2] = 29284;
       HEAP32[($0_1 + 16 | 0) >> 2] = 28972;
       $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
       $64($1_1 | 0, 29249 | 0, $0_1 + 16 | 0 | 0) | 0;
       HEAP32[$0_1 >> 2] = HEAPU8[(0 + 79952 | 0) >> 0] | 0;
       $64($1_1 | 0, 29304 | 0, $0_1 | 0) | 0;
       fimport$9(1 | 0);
       abort();
      }
      $1_1 = $4(100704 | 0, 79952 | 0, 144 | 0) | 0;
      i64toi32_i32$1 = 79952;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
      $216_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $1_1;
      HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] = $216_1;
      HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] = i64toi32_i32$5;
      HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] = HEAP32[(79952 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = 78672 + ((HEAPU8[(79952 + 8 | 0) >> 0] | 0) << 4 | 0) | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $223_1 = i64toi32_i32$5;
      i64toi32_i32$5 = $1_1;
      HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] = $223_1;
      HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[((78672 + ((HEAPU8[(79952 + 10 | 0) >> 0] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = HEAP32[(0 + 78356 | 0) >> 2] | 0;
      HEAP32[(0 + 77800 | 0) >> 2] = HEAP32[(0 + 77800 | 0) >> 2] | 0 | 2 | 0;
      $250();
      $251();
      $252();
      $253();
      $247();
      break label$3;
     }
     $252();
    }
    $253();
   }
   $247();
   $258();
  }
  global$0 = $0_1 + 32 | 0;
  return 0 | 0;
 }
 
 function $342() {
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $1$hi = 0, $0_1 = 0, $19_1 = 0, $19$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $22_1 = 0, $22$hi = 0, $23_1 = 0, $24_1 = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0, $26_1 = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $46_1 = 0, $36_1 = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $38_1 = 0, $38$hi = 0, $39_1 = 0, $39$hi = 0, $40_1 = 0, $41_1 = 0, $41$hi = 0, $42_1 = 0, $42$hi = 0, $43_1 = 0, $43$hi = 0, $47$hi = 0, $47_1 = 0, $52_1 = 0, $52$hi = 0, $53_1 = 0, $53$hi = 0, $59_1 = 0;
  label$1 : {
   label$2 : {
    $0_1 = HEAPU8[(0 + 80312 | 0) >> 0] | 0;
    if (($0_1 | 0) == (120 | 0)) {
     break label$2
    }
    if (($0_1 | 0) != (1 | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80312;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
   $305(29241 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  }
  label$3 : {
   if ((HEAP32[(0 + 77816 | 0) >> 2] | 0) >>> 0 > 1 >>> 0) {
    break label$3
   }
   $0_1 = (HEAPU8[(0 + 80312 | 0) >> 0] | 0) + -100 | 0;
   if ($0_1 >>> 0 > 11 >>> 0) {
    break label$3
   }
   if (!((1 << $0_1 | 0) & 3903 | 0)) {
    break label$3
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80312;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
   $305(29241 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  }
  i64toi32_i32$2 = 80312;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$2 = 80312;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$1;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 80688;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 83352 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 83356 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$1;
  $22$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $19$hi;
  i64toi32_i32$1 = $20$hi;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$3 = $22$hi;
  i64toi32_i32$3 = $308($19_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$2 | 0, $22_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $23_1 = i64toi32_i32$3;
  i64toi32_i32$3 = 0;
  HEAP32[(i64toi32_i32$3 + 83272 | 0) >> 2] = $23_1;
  HEAP32[(i64toi32_i32$3 + 83276 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$1 = 80312;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$2;
  $24$hi = i64toi32_i32$3;
  i64toi32_i32$1 = 80312;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$3;
  $25$hi = i64toi32_i32$2;
  i64toi32_i32$1 = 80688;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$2;
  $26$hi = i64toi32_i32$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 83352 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 83356 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$3;
  $27$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $24$hi;
  i64toi32_i32$3 = $25$hi;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$0 = $27$hi;
  i64toi32_i32$0 = $309($24_1 | 0, i64toi32_i32$2 | 0, $25_1 | 0, i64toi32_i32$3 | 0, $26_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  i64toi32_i32$0 = 83272;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 83272 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 83276 | 0) >> 2] | 0;
  $31$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $31$hi;
  $46_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $306(HEAPU8[(0 + 80312 | 0) >> 0] | 0 | 0, $46_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $1_1 = i64toi32_i32$1;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$1 = 80504;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 83272;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$3 = 80312;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$0;
  $36$hi = i64toi32_i32$1;
  i64toi32_i32$3 = 80688;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$1;
  $37$hi = i64toi32_i32$0;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 83352 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 83356 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  $38$hi = i64toi32_i32$1;
  i64toi32_i32$3 = 81400;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$1;
  $39$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$1 = $37$hi;
  i64toi32_i32$3 = $38$hi;
  i64toi32_i32$2 = $39$hi;
  i64toi32_i32$2 = $310($36_1 | 0, i64toi32_i32$0 | 0, $37_1 | 0, i64toi32_i32$1 | 0, $38_1 | 0, i64toi32_i32$3 | 0, $39_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $40_1 = i64toi32_i32$2;
  i64toi32_i32$2 = 83272;
  HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $40_1;
  HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$1 = 80312;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
  $41_1 = i64toi32_i32$3;
  $41$hi = i64toi32_i32$2;
  i64toi32_i32$1 = 80688;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$2;
  $42$hi = i64toi32_i32$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 83352 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 83356 | 0) >> 2] | 0;
  $43_1 = i64toi32_i32$3;
  $43$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $41$hi;
  i64toi32_i32$3 = $42$hi;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$1 = $311($41_1 | 0, i64toi32_i32$2 | 0, $42_1 | 0, i64toi32_i32$3 | 0, $43_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $1_1 = i64toi32_i32$1;
  $1$hi = i64toi32_i32$3;
  i64toi32_i32$1 = 83272;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$2 = 83272;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
  $47$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $47$hi;
  $47_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$3 = $307(HEAPU8[(0 + 80312 | 0) >> 0] | 0 | 0, $47_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $1_1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$1;
  HEAP32[(80504 + 160 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = 83272;
  HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 80312;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$1;
  $52$hi = i64toi32_i32$3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 83352 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 83356 | 0) >> 2] | 0;
  $53_1 = i64toi32_i32$3;
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $52$hi;
  i64toi32_i32$3 = $53$hi;
  i64toi32_i32$3 = $312($52_1 | 0, i64toi32_i32$1 | 0, $53_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $1_1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$1;
  i64toi32_i32$3 = 80504;
  HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$3 = 83272;
  HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] = i64toi32_i32$1;
  $0_1 = $4(80504 | 0, 80312 | 0, 144 | 0) | 0;
  i64toi32_i32$2 = 80312;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
  $59_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = $59_1;
  HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] = i64toi32_i32$3;
  HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] = HEAP32[(80312 + 184 | 0) >> 2] | 0;
 }
 
 function $343() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $0_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2$hi = 0, $3_1 = 0, $1_1 = 0, $3$hi = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $23_1 = 0, $23$hi = 0, $24_1 = 0, $24$hi = 0, $77_1 = 0, $86_1 = 0, $117_1 = 0, $126_1 = 0, $157_1 = 0, $166_1 = 0, $171_1 = 0, $174_1 = 0;
  $0_1 = global$0 - 64 | 0;
  global$0 = $0_1;
  HEAP32[(0 + 101076 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
    if (($1_1 | 0) == (120 | 0)) {
     break label$2
    }
    if (($1_1 | 0) != (1 | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80688;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
   $305(29241 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  }
  label$3 : {
   if (HEAP32[(0 + 77816 | 0) >> 2] | 0) {
    break label$3
   }
   $1_1 = (HEAPU8[(0 + 80688 | 0) >> 0] | 0) + -100 | 0;
   if ($1_1 >>> 0 > 11 >>> 0) {
    break label$3
   }
   if (!((1 << $1_1 | 0) & 3903 | 0)) {
    break label$3
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   i64toi32_i32$2 = 80688;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
   $305(29241 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  }
  i64toi32_i32$2 = 80688;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  $23$hi = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 83352 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 83356 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$1;
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$1 = $313($23_1 | 0, i64toi32_i32$0 | 0, $24_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$1;
  $2$hi = i64toi32_i32$0;
  label$4 : {
   label$5 : {
    switch ((HEAPU8[(0 + 80688 | 0) >> 0] | 0) + -10 | 0 | 0) {
    case 54:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 83336 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 83340 | 0) >> 2] = i64toi32_i32$1;
     $111($0_1 + 40 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 5 | 0, $0_1 + 52 | 0 | 0, 28972 | 0, 698 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = 80872;
     HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
     break label$4;
    case 55:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 83336 | 0) >> 2] = $3_1;
     HEAP32[(i64toi32_i32$0 + 83340 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $0_1;
     HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $113(HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 + 8 | 0 | 0, 5 | 0, 1 | 0);
     break label$4;
    case 4:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 83336 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 83340 | 0) >> 2] = i64toi32_i32$0;
     $111($0_1 + 40 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 4 | 0, $0_1 + 52 | 0 | 0, 28972 | 0, 708 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $25_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     i64toi32_i32$1 = $25_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $26_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$1 = 80872;
     HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $26_1;
     HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $0_1;
     HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$2;
     break label$4;
    case 5:
     i64toi32_i32$0 = 80688;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     HEAP32[(i64toi32_i32$2 + 83336 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$2 + 83340 | 0) >> 2] = i64toi32_i32$1;
     $111($0_1 + 40 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 4 | 0, $0_1 + 52 | 0 | 0, 28972 | 0, 713 | 0);
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $77_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 80872;
     HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = $77_1;
     HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = $0_1;
     HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
     break label$4;
    case 8:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 83336 | 0) >> 2] = $3_1;
     HEAP32[(i64toi32_i32$1 + 83340 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
     $86_1 = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $86_1;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $113(HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 + 16 | 0 | 0, 4 | 0, 1 | 0);
     break label$4;
    case 2:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 83336 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 83340 | 0) >> 2] = i64toi32_i32$0;
     $111($0_1 + 40 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 3 | 0, $0_1 + 52 | 0 | 0, 28972 | 0, 723 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $27_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $27_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     i64toi32_i32$1 = $27_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $28_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$1 = 80872;
     HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $28_1;
     HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $0_1;
     HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$2;
     break label$4;
    case 3:
     i64toi32_i32$0 = 80688;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     HEAP32[(i64toi32_i32$2 + 83336 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$2 + 83340 | 0) >> 2] = i64toi32_i32$1;
     $111($0_1 + 40 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 3 | 0, $0_1 + 52 | 0 | 0, 28972 | 0, 728 | 0);
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $117_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 80872;
     HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = $117_1;
     HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = $0_1;
     HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
     break label$4;
    case 7:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 83336 | 0) >> 2] = $3_1;
     HEAP32[(i64toi32_i32$1 + 83340 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     HEAP16[($0_1 + 56 | 0) >> 1] = $2_1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
     $126_1 = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $126_1;
     HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $113(HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 + 24 | 0 | 0, 3 | 0, 1 | 0);
     break label$4;
    case 0:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 83336 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 83340 | 0) >> 2] = i64toi32_i32$0;
     $111($0_1 + 40 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 2 | 0, $0_1 + 52 | 0 | 0, 28972 | 0, 738 | 0);
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $29_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     i64toi32_i32$1 = $29_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $30_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      $30_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$1 = 80872;
     HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $30_1;
     HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $0_1;
     HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$2;
     break label$4;
    case 1:
     i64toi32_i32$0 = 80688;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     HEAP32[(i64toi32_i32$2 + 83336 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$2 + 83340 | 0) >> 2] = i64toi32_i32$1;
     $111($0_1 + 40 | 0 | 0, HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 2 | 0, $0_1 + 52 | 0 | 0, 28972 | 0, 743 | 0);
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 255;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $157_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 80872;
     HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = $157_1;
     HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = $0_1;
     HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
     break label$4;
    case 6:
     i64toi32_i32$2 = 80688;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 83336 | 0) >> 2] = $3_1;
     HEAP32[(i64toi32_i32$1 + 83340 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     HEAP8[($0_1 + 56 | 0) >> 0] = $2_1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
     $166_1 = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $166_1;
     HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $113(HEAP32[(0 + 34080 | 0) >> 2] | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 + 32 | 0 | 0, 2 | 0, 1 | 0);
     break label$4;
    default:
     break label$5;
    };
   }
   i64toi32_i32$0 = 80872;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$0 + 83336 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 83340 | 0) >> 2] = i64toi32_i32$1;
  }
  i64toi32_i32$2 = 80688;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
  $171_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 80872;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = $171_1;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $4(80872 | 0, 80688 | 0, 144 | 0) | 0;
  i64toi32_i32$2 = 80688;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
  $174_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] = $174_1;
  HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 168 | 0) >> 2] = HEAP32[(80688 + 176 | 0) >> 2] | 0;
  label$17 : {
   if (!(HEAP32[(0 + 32080 | 0) >> 2] | 0)) {
    break label$17
   }
   if (!(HEAP32[(0 + 77764 | 0) >> 2] | 0 | (HEAP32[(0 + 77768 | 0) >> 2] | 0) | 0)) {
    break label$17
   }
   label$18 : {
    $1_1 = HEAPU8[(0 + 80688 | 0) >> 0] | 0;
    if (($1_1 + -16 | 0) >>> 0 < 3 >>> 0) {
     break label$18
    }
    if (($1_1 | 0) != (65 | 0)) {
     break label$17
    }
   }
   $249();
  }
  global$0 = $0_1 + 64 | 0;
 }
 
 function $344() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $1_1 = 0, $4_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $0_1 = 0, $3_1 = 0, $25_1 = 0, $25$hi = 0, $26_1 = 0, $31_1 = 0, $31$hi = 0, $32_1 = 0, $37_1 = 0, $37$hi = 0, $38_1 = 0, $43_1 = 0, $43$hi = 0, $44_1 = 0, $49_1 = 0, $49$hi = 0, $50_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP8[(0 + 102208 | 0) >> 0] = 0;
  HEAP8[(0 + 101696 | 0) >> 0] = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAPU8[(0 + 81048 | 0) >> 0] | 0;
    if (($1_1 | 0) == (120 | 0)) {
     break label$2
    }
    if (($1_1 | 0) != (1 | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 101144 | 0) >> 2] = 1;
   i64toi32_i32$2 = 81048;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   $305(29241 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  }
  label$3 : {
   i64toi32_i32$2 = 81048;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
    break label$3
   }
   HEAP32[(78360 + 4 | 0) >> 2] = (HEAP32[(78360 + 4 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(78360 + 8 | 0) >> 2] = (HEAP32[(78360 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  $1_1 = 0;
  label$4 : {
   label$5 : {
    switch (HEAPU8[(0 + 81048 | 0) >> 0] | 0 | 0) {
    case 64:
     i64toi32_i32$3 = 81048;
     i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
     i64toi32_i32$0 = 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$0;
     if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
      break label$4
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $25_1 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = $25$hi;
     $182($4_1 | 0, i64toi32_i32$2 | 0, $25_1 | 0, i64toi32_i32$0 | 0, 5 | 0, 1 | 0);
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $26_1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 83352 | 0) >> 2] = $26_1;
     HEAP32[(i64toi32_i32$0 + 83356 | 0) >> 2] = i64toi32_i32$2;
     break label$4;
    case 14:
    case 15:
     i64toi32_i32$3 = 81048;
     i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
     i64toi32_i32$0 = 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$0;
     if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
      break label$4
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $31_1 = i64toi32_i32$0;
     $31$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = $31$hi;
     $182($4_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$0 | 0, 4 | 0, 1 | 0);
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $32_1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 83352 | 0) >> 2] = $32_1;
     HEAP32[(i64toi32_i32$0 + 83356 | 0) >> 2] = i64toi32_i32$2;
     break label$4;
    case 12:
    case 13:
     i64toi32_i32$3 = 81048;
     i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
     i64toi32_i32$0 = 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$0;
     if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
      break label$4
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $37_1 = i64toi32_i32$0;
     $37$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = $37$hi;
     $182($4_1 | 0, i64toi32_i32$2 | 0, $37_1 | 0, i64toi32_i32$0 | 0, 3 | 0, 1 | 0);
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $38_1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 83352 | 0) >> 2] = $38_1;
     HEAP32[(i64toi32_i32$0 + 83356 | 0) >> 2] = i64toi32_i32$2;
     break label$4;
    case 10:
    case 11:
     i64toi32_i32$3 = 81048;
     i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
     i64toi32_i32$0 = 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$0;
     if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
      break label$4
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $43_1 = i64toi32_i32$0;
     $43$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = $43$hi;
     $182($4_1 | 0, i64toi32_i32$2 | 0, $43_1 | 0, i64toi32_i32$0 | 0, 2 | 0, 1 | 0);
     i64toi32_i32$3 = 81048;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] | 0;
     $44_1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 83352 | 0) >> 2] = $44_1;
     HEAP32[(i64toi32_i32$0 + 83356 | 0) >> 2] = i64toi32_i32$2;
     break label$4;
    case 1:
     HEAP32[(0 + 78380 | 0) >> 2] = 1;
     break label$4;
    case 120:
     HEAP32[(0 + 78384 | 0) >> 2] = 1;
     break label$4;
    case 0:
    case 16:
    case 17:
    case 18:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 108:
    case 109:
    case 110:
    case 111:
     break label$4;
    default:
     break label$5;
    };
   }
   i64toi32_i32$3 = 81048;
   i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
   i64toi32_i32$0 = 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 81048;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
   $49_1 = i64toi32_i32$0;
   $49$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $49$hi;
   $182($4_1 | 0, i64toi32_i32$2 | 0, $49_1 | 0, i64toi32_i32$0 | 0, 5 | 0, 1 | 0);
   i64toi32_i32$3 = 81048;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
   $50_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$0 + 83352 | 0) >> 2] = $50_1;
   HEAP32[(i64toi32_i32$0 + 83356 | 0) >> 2] = i64toi32_i32$2;
  }
  label$12 : {
   label$13 : {
    if (HEAP32[(0 + 78380 | 0) >> 2] | 0) {
     break label$13
    }
    $2_1 = 0;
    break label$12;
   }
   $2_1 = 1;
   label$14 : while (1) {
    label$15 : {
     label$16 : {
      if ($2_1) {
       break label$16
      }
      $2_1 = 0;
      break label$15;
     }
     $2_1 = !(HEAP32[((78672 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0);
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != (32 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  $1_1 = 0;
  label$17 : {
   if (!(HEAP32[(0 + 78384 | 0) >> 2] | 0)) {
    break label$17
   }
   $3_1 = 1;
   label$18 : while (1) {
    label$19 : {
     label$20 : {
      if ($3_1) {
       break label$20
      }
      $3_1 = 0;
      break label$19;
     }
     $3_1 = !(HEAP32[((78672 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 2] | 0);
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != (32 | 0)) {
     continue label$18
    }
    break label$18;
   };
   if (!$3_1) {
    break label$17
   }
   HEAP32[(0 + 78384 | 0) >> 2] = 0;
   $2_1 = $339() | 0;
  }
  label$21 : {
   if (!$2_1) {
    break label$21
   }
   HEAP32[$0_1 >> 2] = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 29337 | 0, $0_1 | 0) | 0;
  }
  global$0 = $0_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $345() {
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $0_1 = 0, i64toi32_i32$1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, $38_1 = 0, $53_1 = 0, $68_1 = 0, $85_1 = 0, $102_1 = 0, $119_1 = 0, $134_1 = 0, $149_1 = 0;
  $0_1 = global$0 - 944 | 0;
  global$0 = $0_1;
  $4($0_1 + 608 | 0 | 0, 99528 | 0, 168 | 0) | 0;
  $4($0_1 + 440 | 0 | 0, 99864 | 0, 168 | 0) | 0;
  $4($0_1 + 272 | 0 | 0, 100200 | 0, 168 | 0) | 0;
  $4($0_1 + 104 | 0 | 0, 100872 | 0, 168 | 0) | 0;
  $329($0_1 + 776 | 0 | 0, $0_1 + 608 | 0 | 0, $0_1 + 440 | 0 | 0, $0_1 + 272 | 0 | 0, $0_1 + 104 | 0 | 0);
  label$1 : {
   i64toi32_i32$2 = $4(100536 | 0, $0_1 + 776 | 0 | 0, 168 | 0) | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$1
   }
   HEAP32[(78360 + 4 | 0) >> 2] = (HEAP32[(78360 + 4 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(78360 + 12 | 0) >> 2] = (HEAP32[(78360 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     switch (HEAPU8[(0 + 100536 | 0) >> 0] | 0 | 0) {
     case 141:
      i64toi32_i32$3 = 100536;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $38_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $38_1;
      HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 40 | 0 | 0, 8 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     case 128:
      i64toi32_i32$3 = 100536;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $53_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = $53_1;
      HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 48 | 0 | 0, 6 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     case 180:
      i64toi32_i32$3 = 100536;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $68_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] = $68_1;
      HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 56 | 0 | 0, 7 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     case 143:
     case 144:
     case 145:
     case 146:
      HEAP32[(78360 + 16 | 0) >> 2] = (HEAP32[(78360 + 16 | 0) >> 2] | 0) + 1 | 0;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $85_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] = $85_1;
      HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 64 | 0 | 0, 8 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     case 130:
     case 131:
     case 132:
     case 133:
      HEAP32[(78360 + 16 | 0) >> 2] = (HEAP32[(78360 + 16 | 0) >> 2] | 0) + 1 | 0;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $102_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] = $102_1;
      HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 72 | 0 | 0, 6 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     case 154:
     case 155:
     case 156:
     case 157:
      HEAP32[(78360 + 16 | 0) >> 2] = (HEAP32[(78360 + 16 | 0) >> 2] | 0) + 1 | 0;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $119_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] = $119_1;
      HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 80 | 0 | 0, 7 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     case 183:
      i64toi32_i32$3 = 100536;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $134_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] = $134_1;
      HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$3 = 100536;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 88 | 0 | 0, 8 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     case 0:
     case 129:
     case 142:
     case 181:
      break label$3;
     case 182:
      break label$4;
     default:
      break label$2;
     };
    }
    i64toi32_i32$3 = 100536;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
    $149_1 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] = $149_1;
    HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = 100536;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
    i64toi32_i32$2 = 0;
    $184(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $0_1 + 96 | 0 | 0, 6 | 0, 1 | 0);
    $1_1 = 78672 + ((HEAPU8[(100536 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
    if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   }
   global$0 = $0_1 + 944 | 0;
   return;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = 1027;
  HEAP32[($0_1 + 20 | 0) >> 2] = 29390;
  HEAP32[($0_1 + 16 | 0) >> 2] = 28972;
  $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
  $64($1_1 | 0, 29249 | 0, $0_1 + 16 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = HEAPU8[(0 + 100536 | 0) >> 0] | 0;
  $64($1_1 | 0, 29408 | 0, $0_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $346() {
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $0_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $30_1 = 0, $30$hi = 0, $31_1 = 0, $31$hi = 0;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  label$1 : {
   i64toi32_i32$2 = 81400;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$1
   }
   HEAP32[(78360 + 4 | 0) >> 2] = (HEAP32[(78360 + 4 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(78360 + 12 | 0) >> 2] = (HEAP32[(78360 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $1_1 = HEAPU8[(0 + 81400 | 0) >> 0] | 0;
       switch ($1_1 + -135 | 0 | 0) {
       case 6:
       case 7:
       case 8:
       case 9:
       case 10:
       case 11:
       case 12:
        break label$2;
       case 0:
       case 1:
       case 2:
       case 3:
       case 4:
       case 5:
        break label$5;
       case 13:
       case 14:
       case 15:
       case 16:
       case 17:
       case 18:
        break label$6;
       default:
        break label$4;
       };
      }
      HEAP32[(78360 + 16 | 0) >> 2] = (HEAP32[(78360 + 16 | 0) >> 2] | 0) + 1 | 0;
      i64toi32_i32$3 = 81400;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
      i64toi32_i32$1 = 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$1;
      i64toi32_i32$3 = 81400;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      $182($16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$1 | 0, 5 | 0, 1 | 0);
      $1_1 = 78672 + ((HEAPU8[(81400 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
      if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$3;
     }
     HEAP32[(78360 + 16 | 0) >> 2] = (HEAP32[(78360 + 16 | 0) >> 2] | 0) + 1 | 0;
     i64toi32_i32$3 = 81400;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 10 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $30_1 = i64toi32_i32$1;
     $30$hi = i64toi32_i32$2;
     i64toi32_i32$3 = 81400;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
     $31_1 = i64toi32_i32$2;
     $31$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $30$hi;
     i64toi32_i32$2 = $31$hi;
     $182($30_1 | 0, i64toi32_i32$1 | 0, $31_1 | 0, i64toi32_i32$2 | 0, 5 | 0, 1 | 0);
     $1_1 = 78672 + ((HEAPU8[(81400 + 10 | 0) >> 0] | 0) << 4 | 0) | 0;
     if ((HEAP32[(0 + 78356 | 0) >> 2] | 0 | 0) != ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0)) {
      break label$3
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = 0;
     break label$3;
    }
    if ($1_1) {
     break label$2
    }
   }
   global$0 = $0_1 + 32 | 0;
   return;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = 1112;
  HEAP32[($0_1 + 20 | 0) >> 2] = 29455;
  HEAP32[($0_1 + 16 | 0) >> 2] = 28972;
  $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
  $64($1_1 | 0, 29249 | 0, $0_1 + 16 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = HEAPU8[(0 + 81400 | 0) >> 0] | 0;
  $64($1_1 | 0, 29475 | 0, $0_1 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $347() {
  var $1_1 = 0, $0_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $11_1 = 0;
  label$1 : {
   if (!(HEAP32[(0 + 101156 | 0) >> 2] | 0)) {
    break label$1
   }
   $246();
   HEAP32[(0 + 101144 | 0) >> 2] = 0;
   HEAP32[(0 + 101156 | 0) >> 2] = 0;
  }
  label$2 : {
   label$3 : {
    if (HEAP32[(0 + 101144 | 0) >> 2] | 0) {
     break label$3
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79768 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79772 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$0 + 79776 | 0) >> 2] = $6_1;
    HEAP32[(i64toi32_i32$0 + 79780 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(0 + 78352 | 0) >> 2] = (HEAP32[(0 + 78352 | 0) >> 2] | 0) + 1 | 0;
    break label$2;
   }
   label$4 : {
    if (!(HEAP32[(0 + 101168 | 0) >> 2] | 0)) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79768 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79772 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    HEAP32[(i64toi32_i32$1 + 79776 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$1 + 79780 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(0 + 78352 | 0) >> 2] = (HEAP32[(0 + 78352 | 0) >> 2] | 0) + 1 | 0;
   }
   $246();
   HEAP32[(0 + 101144 | 0) >> 2] = 0;
  }
  label$5 : {
   if (!(HEAP32[(0 + 101160 | 0) >> 2] | 0)) {
    break label$5
   }
   $247();
   $250();
   $251();
   $253();
   $252();
   $258();
   HEAP32[(0 + 101148 | 0) >> 2] = 0;
   HEAP32[(0 + 101160 | 0) >> 2] = 0;
  }
  label$6 : {
   label$7 : {
    if (HEAP32[(0 + 101148 | 0) >> 2] | 0) {
     break label$7
    }
    $4(79952 | 0, 79784 | 0, 168 | 0) | 0;
    break label$6;
   }
   $247();
   $250();
   $251();
   $253();
   $252();
   $258();
   HEAP32[(0 + 101148 | 0) >> 2] = 0;
  }
  label$8 : {
   if (!(HEAP32[(0 + 101164 | 0) >> 2] | 0)) {
    break label$8
   }
   $248();
   $254();
   $255();
   $257();
   $256();
   HEAP32[(0 + 101152 | 0) >> 2] = 0;
   HEAP32[(0 + 101164 | 0) >> 2] = 0;
  }
  label$9 : {
   label$10 : {
    if (HEAP32[(0 + 101152 | 0) >> 2] | 0) {
     break label$10
    }
    $4(80312 | 0, 80120 | 0, 192 | 0) | 0;
    break label$9;
   }
   $248();
   HEAP32[(0 + 101152 | 0) >> 2] = 0;
  }
  $4(80688 | 0, 80504 | 0, 184 | 0) | 0;
  $4(81048 | 0, 80872 | 0, 176 | 0) | 0;
  $4(81576 | 0, 81784 | 0, 208 | 0) | 0;
  $0_1 = 2;
  label$11 : {
   if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$11
   }
   $1_1 = HEAP32[(0 + 32096 | 0) >> 2] | 0;
   $2_1 = ($1_1 | 0) > (2 | 0) ? $1_1 : 2;
   label$12 : while (1) {
    $1_1 = Math_imul($0_1, 200);
    $4(83360 + $1_1 | 0 | 0, 85360 + $1_1 | 0 | 0, 200 | 0) | 0;
    $1_1 = ($0_1 | 0) != ($2_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    if ($1_1) {
     continue label$12
    }
    break label$12;
   };
  }
  $4(82200 | 0, 81992 | 0, 208 | 0) | 0;
  $0_1 = 2;
  label$13 : {
   if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$13
   }
   $1_1 = HEAP32[(0 + 32084 | 0) >> 2] | 0;
   $2_1 = ($1_1 | 0) > (2 | 0) ? $1_1 : 2;
   label$14 : while (1) {
    $1_1 = Math_imul($0_1, 200);
    $4(87360 + $1_1 | 0 | 0, 89360 + $1_1 | 0 | 0, 200 | 0) | 0;
    $1_1 = ($0_1 | 0) != ($2_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    if ($1_1) {
     continue label$14
    }
    break label$14;
   };
  }
  $4(83032 | 0, 82824 | 0, 208 | 0) | 0;
  $0_1 = 2;
  label$15 : {
   if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$15
   }
   $1_1 = HEAP32[(0 + 32092 | 0) >> 2] | 0;
   $2_1 = ($1_1 | 0) > (2 | 0) ? $1_1 : 2;
   label$16 : while (1) {
    $1_1 = Math_imul($0_1, 200);
    $4(95360 + $1_1 | 0 | 0, 97360 + $1_1 | 0 | 0, 200 | 0) | 0;
    $1_1 = ($0_1 | 0) != ($2_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    if ($1_1) {
     continue label$16
    }
    break label$16;
   };
  }
  $4(82616 | 0, 82408 | 0, 208 | 0) | 0;
  $0_1 = 2;
  label$17 : {
   if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$17
   }
   $1_1 = HEAP32[(0 + 32088 | 0) >> 2] | 0;
   $2_1 = ($1_1 | 0) > (2 | 0) ? $1_1 : 2;
   label$18 : while (1) {
    $1_1 = Math_imul($0_1, 200);
    $4(91360 + $1_1 | 0 | 0, 93360 + $1_1 | 0 | 0, 200 | 0) | 0;
    $1_1 = ($0_1 | 0) != ($2_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    if ($1_1) {
     continue label$18
    }
    break label$18;
   };
  }
  $4(99528 | 0, 99360 | 0, 168 | 0) | 0;
  $4(99864 | 0, 99696 | 0, 168 | 0) | 0;
  $4(100200 | 0, 100032 | 0, 168 | 0) | 0;
  $4(100536 | 0, 100368 | 0, 168 | 0) | 0;
  $4(81400 | 0, 81224 | 0, 176 | 0) | 0;
  $4(100872 | 0, 100704 | 0, 168 | 0) | 0;
  HEAP32[(0 + 77800 | 0) >> 2] = (HEAP32[(0 + 77800 | 0) >> 2] | 0) >> 1 | 0;
  HEAP32[(0 + 77796 | 0) >> 2] = (HEAP32[(0 + 77796 | 0) >> 2] | 0) >> 1 | 0;
 }
 
 function $348($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $15_1 = 0, $16_1 = 0, i64toi32_i32$1 = 0, $17_1 = 0, $18_1 = 0, $66_1 = 0, $398 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 21232 | 0;
  global$0 = $9_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     $1_1 = $0_1;
     break label$2;
    }
    label$4 : {
     label$5 : {
      switch ($2_1 | 0) {
      case 0:
       label$8 : {
        switch ($3_1 + -1 | 0 | 0) {
        case 0:
         HEAP32[(0 + 77816 | 0) >> 2] = 2;
         break label$4;
        case 1:
         HEAP32[(0 + 77816 | 0) >> 2] = 1;
         break label$4;
        case 2:
         break label$8;
        default:
         break label$4;
        };
       }
       HEAP32[(0 + 77816 | 0) >> 2] = 0;
       break label$4;
      case 1:
       label$11 : {
        switch ($3_1 + -1 | 0 | 0) {
        case 0:
         HEAP32[(0 + 77816 | 0) >> 2] = 5;
         break label$4;
        case 1:
         HEAP32[(0 + 77816 | 0) >> 2] = 4;
         break label$4;
        case 2:
         break label$11;
        default:
         break label$4;
        };
       }
       HEAP32[(0 + 77816 | 0) >> 2] = 3;
       break label$4;
      case 2:
       break label$5;
      default:
       break label$4;
      };
     }
     label$14 : {
      switch ($3_1 + -1 | 0 | 0) {
      case 0:
       HEAP32[(0 + 77816 | 0) >> 2] = 8;
       break label$4;
      case 1:
       HEAP32[(0 + 77816 | 0) >> 2] = 7;
       break label$4;
      case 2:
       break label$14;
      default:
       break label$4;
      };
     }
     HEAP32[(0 + 77816 | 0) >> 2] = 6;
    }
    label$17 : {
     if ($4_1 >>> 0 > 2 >>> 0) {
      break label$17
     }
     HEAP32[(0 + 77820 | 0) >> 2] = HEAP32[(($4_1 << 2 | 0) + 31172 | 0) >> 2] | 0;
    }
    $4_1 = 0;
    HEAP32[(0 + 32092 | 0) >> 2] = ($6_1 | 0) < (10 | 0) ? $6_1 : 10;
    HEAP32[(0 + 32084 | 0) >> 2] = ($5_1 | 0) < (10 | 0) ? $5_1 : 10;
    HEAP32[(0 + 32096 | 0) >> 2] = ($7_1 | 0) < (10 | 0) ? $7_1 : 10;
    HEAP32[(0 + 32088 | 0) >> 2] = ($8_1 | 0) < (10 | 0) ? $8_1 : 10;
    break label$1;
   }
   label$18 : {
    label$19 : while (1) {
     $4_1 = 0;
     label$20 : {
      label$21 : {
       $6_1 = HEAPU8[$1_1 >> 0] | 0;
       switch ($6_1 | 0) {
       case 0:
       case 10:
        break label$1;
       case 1:
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 9:
        break label$20;
       default:
        break label$21;
       };
      }
      if (($6_1 | 0) == (59 | 0)) {
       break label$18
      }
     }
     $1_1 = $1_1 + 1 | 0;
     continue label$19;
    };
   }
   $6_1 = $1_1 + 1 | 0;
   $1_1 = $6_1;
   label$22 : {
    label$23 : while (1) {
     label$24 : {
      switch (HEAPU8[$1_1 >> 0] | 0 | 0) {
      case 0:
       break label$1;
      case 10:
       break label$22;
      default:
       break label$24;
      };
     }
     $1_1 = $1_1 + 1 | 0;
     continue label$23;
    };
   }
   HEAP8[$1_1 >> 0] = 0;
   $5_1 = $5(4 | 0) | 0;
   HEAP32[$5_1 >> 2] = 29524;
   label$25 : {
    label$26 : {
     $6_1 = $14($6_1 | 0, 29529 | 0) | 0;
     if ($6_1) {
      break label$26
     }
     $4_1 = 1;
     break label$25;
    }
    $4_1 = 1;
    label$27 : while (1) {
     $66_1 = $4_1 << 2 | 0;
     $4_1 = $4_1 + 1 | 0;
     $5_1 = $7($5_1 | 0, $4_1 << 2 | 0 | 0) | 0;
     HEAP32[($66_1 + $5_1 | 0) >> 2] = $6_1;
     $6_1 = $14(0 | 0, 29529 | 0) | 0;
     if ($6_1) {
      continue label$27
     }
     break label$27;
    };
   }
   $0_1 = $1_1 + 1 | 0;
   $1_1 = $4_1 << 2 | 0;
   $5_1 = $7($5_1 | 0, $1_1 + 4 | 0 | 0) | 0;
   HEAP32[($5_1 + $1_1 | 0) >> 2] = 0;
  }
  $1_1 = $30(29532 | 0, 29542 | 0) | 0;
  $36($0_1 | 0, $1_1 | 0) | 0;
  $39($1_1 | 0) | 0;
  HEAP8[(0 + 77824 | 0) >> 0] = 0;
  $6_1 = 0;
  label$28 : {
   label$29 : {
    label$30 : {
     label$31 : {
      label$32 : {
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        HEAP32[(0 + 77816 | 0) >> 2] = 3;
        HEAP32[(0 + 77820 | 0) >> 2] = 1;
        HEAP32[(0 + 77984 | 0) >> 2] = 0;
        i64toi32_i32$1 = $9_1;
        i64toi32_i32$0 = 1074790400;
        HEAP32[($9_1 + 416 | 0) >> 2] = 0;
        HEAP32[($9_1 + 420 | 0) >> 2] = i64toi32_i32$0;
        $65(HEAP32[(0 + 1032 | 0) >> 2] | 0 | 0, 30436 | 0, $9_1 + 416 | 0 | 0) | 0;
        $6_1 = 0;
        label$34 : while (1) {
         HEAP32[($9_1 + 428 | 0) >> 2] = 0;
         label$35 : {
          $1_1 = $82($4_1 | 0, $5_1 | 0, 30659 | 0, 32112 | 0, $9_1 + 428 | 0 | 0) | 0;
          if (($1_1 | 0) == (-1 | 0)) {
           break label$35
          }
          label$36 : {
           label$37 : {
            switch ($1_1 | 0) {
            case 63:
             HEAP32[($9_1 + 48 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 29544 | 0, $9_1 + 48 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 0:
             $0_1 = (HEAP32[($9_1 + 428 | 0) >> 2] | 0) << 4 | 0;
             if (HEAP32[($0_1 + 32120 | 0) >> 2] | 0) {
              break label$35
             }
             HEAP32[($9_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 32112 | 0) >> 2] | 0;
             $86(30679 | 0, $9_1 + 80 | 0 | 0) | 0;
             label$49 : {
              $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$49
              }
              HEAP32[($9_1 + 64 | 0) >> 2] = $0_1;
              $86(30689 | 0, $9_1 + 64 | 0 | 0) | 0;
             }
             $89(10 | 0) | 0;
             break label$35;
            case 99:
             label$50 : {
              $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
              if ($90($0_1 | 0, 30702 | 0, 4 | 0) | 0) {
               break label$50
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 0;
              break label$35;
             }
             label$51 : {
              if ($90($0_1 | 0, 30704 | 0, 4 | 0) | 0) {
               break label$51
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 0;
              break label$35;
             }
             label$52 : {
              if ($90($0_1 | 0, 30707 | 0, 4 | 0) | 0) {
               break label$52
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 1;
              break label$35;
             }
             label$53 : {
              if ($90($0_1 | 0, 30710 | 0, 4 | 0) | 0) {
               break label$53
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 2;
              break label$35;
             }
             label$54 : {
              if ($90($0_1 | 0, 30713 | 0, 4 | 0) | 0) {
               break label$54
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 3;
              break label$35;
             }
             label$55 : {
              if ($90($0_1 | 0, 30715 | 0, 4 | 0) | 0) {
               break label$55
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 3;
              break label$35;
             }
             label$56 : {
              if ($90($0_1 | 0, 30720 | 0, 4 | 0) | 0) {
               break label$56
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 4;
              break label$35;
             }
             label$57 : {
              if ($90($0_1 | 0, 30725 | 0, 4 | 0) | 0) {
               break label$57
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 5;
              break label$35;
             }
             label$58 : {
              if ($90($0_1 | 0, 30730 | 0, 4 | 0) | 0) {
               break label$58
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 6;
              break label$35;
             }
             label$59 : {
              if ($90($0_1 | 0, 30734 | 0, 4 | 0) | 0) {
               break label$59
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 7;
              break label$35;
             }
             label$60 : {
              if ($90($0_1 | 0, 30738 | 0, 4 | 0) | 0) {
               break label$60
              }
              HEAP32[(0 + 77816 | 0) >> 2] = 8;
              break label$35;
             }
             HEAP32[($9_1 + 116 | 0) >> 2] = $0_1;
             HEAP32[($9_1 + 112 | 0) >> 2] = 30768;
             $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
             $64($1_1 | 0, 30742 | 0, $9_1 + 112 | 0 | 0) | 0;
             HEAP32[($9_1 + 96 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64($1_1 | 0, 29544 | 0, $9_1 + 96 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 100:
             label$61 : {
              label$62 : {
               label$63 : {
                $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
                switch ((HEAPU8[$0_1 >> 0] | 0) + -99 | 0 | 0) {
                case 11:
                 break label$36;
                case 0:
                 break label$62;
                case 13:
                 break label$63;
                default:
                 break label$61;
                };
               }
               HEAP32[(0 + 77820 | 0) >> 2] = 0;
               break label$35;
              }
              HEAP32[(0 + 77820 | 0) >> 2] = 1;
              break label$35;
             }
             HEAP32[($9_1 + 148 | 0) >> 2] = $0_1;
             HEAP32[($9_1 + 144 | 0) >> 2] = 30798;
             $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
             $64($1_1 | 0, 30771 | 0, $9_1 + 144 | 0 | 0) | 0;
             HEAP32[($9_1 + 128 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64($1_1 | 0, 29544 | 0, $9_1 + 128 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 102:
             $0_1 = $92(($9_1 + 432 | 0) + ($6_1 << 12 | 0) | 0 | 0, HEAP32[(0 + 34072 | 0) >> 2] | 0 | 0) | 0;
             if (!($349($0_1 | 0) | 0)) {
              break label$32
             }
             (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $93(HEAP32[(0 + 34072 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 180 | 0) >> 2] = wasm2js_i32$1;
             HEAP32[($9_1 + 176 | 0) >> 2] = 77824;
             $99($9_1 + 20912 | 0 | 0, 30845 | 0, $9_1 + 176 | 0 | 0) | 0;
             $92(77824 | 0, $9_1 + 20912 | 0 | 0) | 0;
             $6_1 = $6_1 + 1 | 0;
             break label$35;
            case 97:
             label$64 : {
              $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
              if (((HEAP8[$0_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
               break label$64
              }
              if (($102($0_1 | 0) | 0 | 0) < (2 | 0)) {
               break label$64
              }
              $0_1 = $102($0_1 | 0) | 0;
              if (($0_1 | 0) >= (10 | 0)) {
               break label$31
              }
              HEAP32[(0 + 32084 | 0) >> 2] = $0_1;
              break label$35;
             }
             HEAP32[($9_1 + 228 | 0) >> 2] = $0_1;
             HEAP32[($9_1 + 224 | 0) >> 2] = 30899;
             $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
             $64($1_1 | 0, 30771 | 0, $9_1 + 224 | 0 | 0) | 0;
             HEAP32[($9_1 + 208 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64($1_1 | 0, 29544 | 0, $9_1 + 208 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 107:
             label$65 : {
              $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
              if (((HEAP8[$0_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
               break label$65
              }
              if (($102($0_1 | 0) | 0 | 0) < (2 | 0)) {
               break label$65
              }
              $0_1 = $102($0_1 | 0) | 0;
              if (($0_1 | 0) >= (10 | 0)) {
               break label$30
              }
              HEAP32[(0 + 32092 | 0) >> 2] = $0_1;
              break label$35;
             }
             HEAP32[($9_1 + 276 | 0) >> 2] = $0_1;
             HEAP32[($9_1 + 272 | 0) >> 2] = 30902;
             $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
             $64($1_1 | 0, 30771 | 0, $9_1 + 272 | 0 | 0) | 0;
             HEAP32[($9_1 + 256 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64($1_1 | 0, 29544 | 0, $9_1 + 256 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 108:
             label$66 : {
              $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
              if (((HEAP8[$0_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
               break label$66
              }
              if (($102($0_1 | 0) | 0 | 0) < (2 | 0)) {
               break label$66
              }
              $0_1 = $102($0_1 | 0) | 0;
              if (($0_1 | 0) >= (10 | 0)) {
               break label$29
              }
              HEAP32[(0 + 32096 | 0) >> 2] = $0_1;
              break label$35;
             }
             HEAP32[($9_1 + 324 | 0) >> 2] = $0_1;
             HEAP32[($9_1 + 320 | 0) >> 2] = 30905;
             $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
             $64($1_1 | 0, 30771 | 0, $9_1 + 320 | 0 | 0) | 0;
             HEAP32[($9_1 + 304 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64($1_1 | 0, 29544 | 0, $9_1 + 304 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 109:
             label$67 : {
              $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
              if (((HEAP8[$0_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
               break label$67
              }
              if (($102($0_1 | 0) | 0 | 0) < (2 | 0)) {
               break label$67
              }
              $0_1 = $102($0_1 | 0) | 0;
              if (($0_1 | 0) >= (10 | 0)) {
               break label$28
              }
              HEAP32[(0 + 32088 | 0) >> 2] = $0_1;
              break label$35;
             }
             HEAP32[($9_1 + 372 | 0) >> 2] = $0_1;
             HEAP32[($9_1 + 368 | 0) >> 2] = 30908;
             $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
             $64($1_1 | 0, 30771 | 0, $9_1 + 368 | 0 | 0) | 0;
             HEAP32[($9_1 + 352 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64($1_1 | 0, 29544 | 0, $9_1 + 352 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 115:
             label$68 : {
              $0_1 = HEAP32[(0 + 34072 | 0) >> 2] | 0;
              if ($90($0_1 | 0, 30911 | 0, 6 | 0) | 0) {
               break label$68
              }
              HEAP32[(0 + 77984 | 0) >> 2] = 2;
              break label$35;
             }
             label$69 : {
              if ($90($0_1 | 0, 30918 | 0, 5 | 0) | 0) {
               break label$69
              }
              HEAP32[(0 + 77984 | 0) >> 2] = 3;
              break label$35;
             }
             label$70 : {
              if ($90($0_1 | 0, 30924 | 0, 10 | 0) | 0) {
               break label$70
              }
              HEAP32[(0 + 77984 | 0) >> 2] = 0;
              break label$35;
             }
             label$71 : {
              if ($90($0_1 | 0, 30929 | 0, 10 | 0) | 0) {
               break label$71
              }
              HEAP32[(0 + 77984 | 0) >> 2] = 1;
              break label$35;
             }
             HEAP32[($9_1 + 404 | 0) >> 2] = $0_1;
             HEAP32[($9_1 + 400 | 0) >> 2] = 30940;
             $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
             $64($1_1 | 0, 30771 | 0, $9_1 + 400 | 0 | 0) | 0;
             HEAP32[($9_1 + 384 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
             $64($1_1 | 0, 29544 | 0, $9_1 + 384 | 0 | 0) | 0;
             fimport$9(1 | 0);
             abort();
            case 106:
             HEAP32[(0 + 77988 | 0) >> 2] = 1;
             break label$35;
            case 110:
             break label$35;
            default:
             break label$37;
            };
           }
           fimport$10();
           abort();
          }
          HEAP32[(0 + 77820 | 0) >> 2] = 2;
         }
         if (($1_1 | 0) != (-1 | 0)) {
          continue label$34
         }
         break label$34;
        };
        if ((HEAP32[(0 + 31712 | 0) >> 2] | 0 | 0) >= ($4_1 | 0)) {
         break label$33
        }
        label$72 : {
         $1_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
         if (($1_1 | 0) >= ($4_1 | 0)) {
          break label$72
         }
         $6_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
         label$73 : while (1) {
          HEAP32[(0 + 31712 | 0) >> 2] = $1_1 + 1 | 0;
          HEAP32[($9_1 + 32 | 0) >> 2] = HEAP32[($5_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          $64($6_1 | 0, 30943 | 0, $9_1 + 32 | 0 | 0) | 0;
          $1_1 = HEAP32[(0 + 31712 | 0) >> 2] | 0;
          if (($1_1 | 0) < ($4_1 | 0)) {
           continue label$73
          }
          break label$73;
         };
        }
        HEAP32[($9_1 + 16 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
        $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 29544 | 0, $9_1 + 16 | 0 | 0) | 0;
        fimport$9(1 | 0);
        abort();
       }
       HEAP32[(0 + 77988 | 0) >> 2] = 1;
       $1_1 = ($9_1 + 432 | 0) + ($6_1 << 12 | 0) | 0;
       $17_1 = 0;
       $18_1 = HEAPU8[($17_1 + 29540 | 0) >> 0] | 0 | ((HEAPU8[($17_1 + 29541 | 0) >> 0] | 0) << 8 | 0) | 0;
       HEAP8[($1_1 + 8 | 0) >> 0] = $18_1;
       HEAP8[($1_1 + 9 | 0) >> 0] = $18_1 >>> 8 | 0;
       $14_1 = 0;
       i64toi32_i32$0 = HEAPU8[($14_1 + 29532 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 29533 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 29534 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 29535 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($14_1 + 29536 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 29537 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 29538 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 29539 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $398 = i64toi32_i32$0;
       i64toi32_i32$0 = $1_1;
       $15_1 = $398;
       HEAP8[$1_1 >> 0] = $15_1;
       HEAP8[($1_1 + 1 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($1_1 + 2 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($1_1 + 3 | 0) >> 0] = $15_1 >>> 24 | 0;
       $16_1 = i64toi32_i32$1;
       HEAP8[($1_1 + 4 | 0) >> 0] = $16_1;
       HEAP8[($1_1 + 5 | 0) >> 0] = $16_1 >>> 8 | 0;
       HEAP8[($1_1 + 6 | 0) >> 0] = $16_1 >>> 16 | 0;
       HEAP8[($1_1 + 7 | 0) >> 0] = $16_1 >>> 24 | 0;
       HEAP32[(0 + 77984 | 0) >> 2] = 0;
       HEAP32[$9_1 >> 2] = 77824;
       $64(HEAP32[(0 + 1032 | 0) >> 2] | 0 | 0, 30967 | 0, $9_1 | 0) | 0;
       $207(77992 | 0, 1 | 0);
       $208(HEAP32[(0 + 77992 | 0) >> 2] | 0 | 0, $9_1 + 432 | 0 | 0);
       label$74 : {
        if (!($349(30982 | 0) | 0)) {
         break label$74
        }
        $1_1 = $30(30982 | 0, 30996 | 0) | 0;
        $212(78224 | 0, 128 | 0, $1_1 | 0) | 0;
        HEAP32[(0 + 77792 | 0) >> 2] = 1;
        $39($1_1 | 0) | 0;
       }
       $350();
       $351();
       $215();
       $352();
       $1_1 = $30(30998 | 0, 30996 | 0) | 0;
       $222($1_1 | 0, 0 | 0, 2 | 0) | 0;
       $6_1 = $225($1_1 | 0) | 0;
       $226($1_1 | 0);
       $0_1 = $5($6_1 + 1 | 0 | 0) | 0;
       $163($0_1 | 0, $6_1 | 0, 1 | 0, $1_1 | 0) | 0;
       HEAP8[($0_1 + $6_1 | 0) >> 0] = 0;
       $39($1_1 | 0) | 0;
       label$75 : {
        if (!$4_1) {
         break label$75
        }
        $6($5_1 | 0);
       }
       global$0 = $9_1 + 21232 | 0;
       return $0_1 | 0;
      }
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[($9_1 + 164 | 0) >> 2] = $0_1;
      HEAP32[($9_1 + 160 | 0) >> 2] = $1_1;
      $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 30801 | 0, $9_1 + 160 | 0 | 0) | 0;
      fimport$9(1 | 0);
      abort();
     }
     HEAP32[($9_1 + 192 | 0) >> 2] = 9;
     $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 30851 | 0, $9_1 + 192 | 0 | 0) | 0;
     fimport$9(1 | 0);
     abort();
    }
    HEAP32[($9_1 + 240 | 0) >> 2] = 9;
    $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 30851 | 0, $9_1 + 240 | 0 | 0) | 0;
    fimport$9(1 | 0);
    abort();
   }
   HEAP32[($9_1 + 288 | 0) >> 2] = 9;
   $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 30851 | 0, $9_1 + 288 | 0 | 0) | 0;
   fimport$9(1 | 0);
   abort();
  }
  HEAP32[($9_1 + 336 | 0) >> 2] = 9;
  $64(HEAP32[(0 + 1576 | 0) >> 2] | 0 | 0, 30851 | 0, $9_1 + 336 | 0 | 0) | 0;
  fimport$9(1 | 0);
  abort();
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  $0_1 = $227($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 96 | 0;
  return !$0_1 | 0;
 }
 
 function $350() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $0_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 79776 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 79780 | 0) >> 2] = i64toi32_i32$0;
  $3(78400 | 0, 0 | 0, 264 | 0) | 0;
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1 << 4 | 0;
   HEAP32[($2_1 + 78680 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2_1 + 78672 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (33 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $3(79200 | 0, 0 | 0, 132 | 0) | 0;
  $43_1 = 0;
  $44_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($43_1 + 79953 | 0) >> 0] = $44_1;
  HEAP8[($43_1 + 79954 | 0) >> 0] = $44_1 >>> 8 | 0;
  $3_1 = $0_1 + 143 | 0;
  HEAP8[(0 + 79955 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP8[(0 + 79952 | 0) >> 0] = 0;
  HEAP16[(0 + 79964 | 0) >> 1] = 0;
  HEAP32[(0 + 79956 | 0) >> 2] = 0;
  $7_1 = 0;
  $8_1 = 0;
  HEAP8[($7_1 + 79959 | 0) >> 0] = $8_1;
  HEAP8[($7_1 + 79960 | 0) >> 0] = $8_1 >>> 8 | 0;
  HEAP8[($7_1 + 79961 | 0) >> 0] = $8_1 >>> 16 | 0;
  HEAP8[($7_1 + 79962 | 0) >> 0] = $8_1 >>> 24 | 0;
  $4(79966 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 80104 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 80108 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80096 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80100 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 0;
  $46_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($45_1 + 80313 | 0) >> 0] = $46_1;
  HEAP8[($45_1 + 80314 | 0) >> 0] = $46_1 >>> 8 | 0;
  HEAP8[(0 + 80315 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP32[(0 + 80112 | 0) >> 2] = 0;
  HEAP8[(0 + 80312 | 0) >> 0] = 0;
  HEAP16[(0 + 80324 | 0) >> 1] = 0;
  HEAP32[(0 + 80316 | 0) >> 2] = 0;
  $9_1 = 0;
  $10_1 = 0;
  HEAP8[($9_1 + 80319 | 0) >> 0] = $10_1;
  HEAP8[($9_1 + 80320 | 0) >> 0] = $10_1 >>> 8 | 0;
  HEAP8[($9_1 + 80321 | 0) >> 0] = $10_1 >>> 16 | 0;
  HEAP8[($9_1 + 80322 | 0) >> 0] = $10_1 >>> 24 | 0;
  $4(80326 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80480 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80484 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80472 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80476 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80464 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80468 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80456 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80460 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 80496 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 80488 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 80492 | 0) >> 2] = i64toi32_i32$0;
  $47_1 = 0;
  $48_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($47_1 + 80689 | 0) >> 0] = $48_1;
  HEAP8[($47_1 + 80690 | 0) >> 0] = $48_1 >>> 8 | 0;
  HEAP8[(0 + 80691 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP8[(0 + 80688 | 0) >> 0] = 0;
  HEAP16[(0 + 80700 | 0) >> 1] = 0;
  HEAP32[(0 + 80692 | 0) >> 2] = 0;
  $11_1 = 0;
  $12_1 = 0;
  HEAP8[($11_1 + 80695 | 0) >> 0] = $12_1;
  HEAP8[($11_1 + 80696 | 0) >> 0] = $12_1 >>> 8 | 0;
  HEAP8[($11_1 + 80697 | 0) >> 0] = $12_1 >>> 16 | 0;
  HEAP8[($11_1 + 80698 | 0) >> 0] = $12_1 >>> 24 | 0;
  $4(80702 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80840 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80844 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80832 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80836 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 80864 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 80856 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 80860 | 0) >> 2] = i64toi32_i32$0;
  $49_1 = 0;
  $50_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($49_1 + 81049 | 0) >> 0] = $50_1;
  HEAP8[($49_1 + 81050 | 0) >> 0] = $50_1 >>> 8 | 0;
  HEAP8[(0 + 81051 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP32[(0 + 80848 | 0) >> 2] = 0;
  HEAP8[(0 + 81048 | 0) >> 0] = 0;
  HEAP16[(0 + 81060 | 0) >> 1] = 0;
  HEAP32[(0 + 81052 | 0) >> 2] = 0;
  $13_1 = 0;
  $14_1 = 0;
  HEAP8[($13_1 + 81055 | 0) >> 0] = $14_1;
  HEAP8[($13_1 + 81056 | 0) >> 0] = $14_1 >>> 8 | 0;
  HEAP8[($13_1 + 81057 | 0) >> 0] = $14_1 >>> 16 | 0;
  HEAP8[($13_1 + 81058 | 0) >> 0] = $14_1 >>> 24 | 0;
  $4(81062 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81200 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81204 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81192 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81196 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 81216 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 81208 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 81212 | 0) >> 2] = i64toi32_i32$0;
  $51_1 = 0;
  $52_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($51_1 + 81577 | 0) >> 0] = $52_1;
  HEAP8[($51_1 + 81578 | 0) >> 0] = $52_1 >>> 8 | 0;
  HEAP8[(0 + 81579 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP32[(0 + 101144 | 0) >> 2] = 0;
  HEAP32[(0 + 101148 | 0) >> 2] = 0;
  HEAP8[(0 + 81576 | 0) >> 0] = 0;
  HEAP16[(0 + 81588 | 0) >> 1] = 0;
  HEAP32[(0 + 81580 | 0) >> 2] = 0;
  $15_1 = 0;
  $16_1 = 0;
  HEAP8[($15_1 + 81583 | 0) >> 0] = $16_1;
  HEAP8[($15_1 + 81584 | 0) >> 0] = $16_1 >>> 8 | 0;
  HEAP8[($15_1 + 81585 | 0) >> 0] = $16_1 >>> 16 | 0;
  HEAP8[($15_1 + 81586 | 0) >> 0] = $16_1 >>> 24 | 0;
  $4(81590 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81760 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81764 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81752 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81756 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81744 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81748 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81736 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81740 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81728 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81732 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 81776 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 81768 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 81772 | 0) >> 2] = i64toi32_i32$0;
  $53_1 = 0;
  $54_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($53_1 + 82201 | 0) >> 0] = $54_1;
  HEAP8[($53_1 + 82202 | 0) >> 0] = $54_1 >>> 8 | 0;
  HEAP8[(0 + 82203 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP8[(0 + 82200 | 0) >> 0] = 0;
  HEAP16[(0 + 82212 | 0) >> 1] = 0;
  HEAP32[(0 + 82204 | 0) >> 2] = 0;
  $17_1 = 0;
  $18_1 = 0;
  HEAP8[($17_1 + 82207 | 0) >> 0] = $18_1;
  HEAP8[($17_1 + 82208 | 0) >> 0] = $18_1 >>> 8 | 0;
  HEAP8[($17_1 + 82209 | 0) >> 0] = $18_1 >>> 16 | 0;
  HEAP8[($17_1 + 82210 | 0) >> 0] = $18_1 >>> 24 | 0;
  $4(82214 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82384 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82388 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82376 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82380 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82368 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82372 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82360 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82364 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82352 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82356 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 82400 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 82392 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 82396 | 0) >> 2] = i64toi32_i32$0;
  $55_1 = 0;
  $56_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($55_1 + 83033 | 0) >> 0] = $56_1;
  HEAP8[($55_1 + 83034 | 0) >> 0] = $56_1 >>> 8 | 0;
  HEAP8[(0 + 83035 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP8[(0 + 83032 | 0) >> 0] = 0;
  HEAP16[(0 + 83044 | 0) >> 1] = 0;
  HEAP32[(0 + 83036 | 0) >> 2] = 0;
  $19_1 = 0;
  $20_1 = 0;
  HEAP8[($19_1 + 83039 | 0) >> 0] = $20_1;
  HEAP8[($19_1 + 83040 | 0) >> 0] = $20_1 >>> 8 | 0;
  HEAP8[($19_1 + 83041 | 0) >> 0] = $20_1 >>> 16 | 0;
  HEAP8[($19_1 + 83042 | 0) >> 0] = $20_1 >>> 24 | 0;
  $4(83046 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 83216 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 83220 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 83208 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 83212 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 83200 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 83204 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 83192 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 83196 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 83184 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 83188 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 83232 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 83224 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 83228 | 0) >> 2] = i64toi32_i32$0;
  $57_1 = 0;
  $58_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($57_1 + 82617 | 0) >> 0] = $58_1;
  HEAP8[($57_1 + 82618 | 0) >> 0] = $58_1 >>> 8 | 0;
  HEAP8[(0 + 82619 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
  HEAP8[(0 + 82616 | 0) >> 0] = 0;
  HEAP16[(0 + 82628 | 0) >> 1] = 0;
  HEAP32[(0 + 82620 | 0) >> 2] = 0;
  $21_1 = 0;
  $22_1 = 0;
  HEAP8[($21_1 + 82623 | 0) >> 0] = $22_1;
  HEAP8[($21_1 + 82624 | 0) >> 0] = $22_1 >>> 8 | 0;
  HEAP8[($21_1 + 82625 | 0) >> 0] = $22_1 >>> 16 | 0;
  HEAP8[($21_1 + 82626 | 0) >> 0] = $22_1 >>> 24 | 0;
  $4(82630 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82800 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82804 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82792 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82796 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82784 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82788 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82776 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82780 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 82768 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 82772 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 82816 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 82808 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 82812 | 0) >> 2] = i64toi32_i32$0;
  label$2 : {
   if ((HEAP32[(0 + 32084 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $1_1 = HEAP32[(0 + 32084 | 0) >> 2] | 0;
   $4_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
   $2_1 = 1;
   label$3 : while (1) {
    $1_1 = Math_imul($2_1, 200);
    HEAP8[($1_1 + 87360 | 0) >> 0] = 0;
    i64toi32_i32$1 = $1_1 + 87512 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $59_1 = $1_1 + 87361 | 0;
    $60_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$59_1 >> 0] = $60_1;
    HEAP8[($59_1 + 1 | 0) >> 0] = $60_1 >>> 8 | 0;
    HEAP8[($1_1 + 87363 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
    HEAP16[($1_1 + 87372 | 0) >> 1] = 0;
    HEAP32[($1_1 + 87364 | 0) >> 2] = 0;
    $23_1 = $1_1 + 87367 | 0;
    $24_1 = 0;
    HEAP8[$23_1 >> 0] = $24_1;
    HEAP8[($23_1 + 1 | 0) >> 0] = $24_1 >>> 8 | 0;
    HEAP8[($23_1 + 2 | 0) >> 0] = $24_1 >>> 16 | 0;
    HEAP8[($23_1 + 3 | 0) >> 0] = $24_1 >>> 24 | 0;
    $4($1_1 + 87374 | 0 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
    HEAP32[($1_1 + 87552 | 0) >> 2] = -1;
    i64toi32_i32$1 = $1_1 + 87544 | 0;
    i64toi32_i32$0 = -1;
    HEAP32[i64toi32_i32$1 >> 2] = -1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = ($2_1 | 0) == ($4_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if (!$1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   if ((HEAP32[(0 + 32092 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$4
   }
   $1_1 = HEAP32[(0 + 32092 | 0) >> 2] | 0;
   $3_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
   $4_1 = $0_1 + 143 | 0;
   $2_1 = 1;
   label$5 : while (1) {
    $1_1 = Math_imul($2_1, 200);
    HEAP8[($1_1 + 95360 | 0) >> 0] = 0;
    i64toi32_i32$1 = $1_1 + 95504 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $61_1 = $1_1 + 95361 | 0;
    $62_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$61_1 >> 0] = $62_1;
    HEAP8[($61_1 + 1 | 0) >> 0] = $62_1 >>> 8 | 0;
    HEAP8[($1_1 + 95363 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
    HEAP16[($1_1 + 95372 | 0) >> 1] = 0;
    HEAP32[($1_1 + 95364 | 0) >> 2] = 0;
    $25_1 = $1_1 + 95367 | 0;
    $26_1 = 0;
    HEAP8[$25_1 >> 0] = $26_1;
    HEAP8[($25_1 + 1 | 0) >> 0] = $26_1 >>> 8 | 0;
    HEAP8[($25_1 + 2 | 0) >> 0] = $26_1 >>> 16 | 0;
    HEAP8[($25_1 + 3 | 0) >> 0] = $26_1 >>> 24 | 0;
    $4($1_1 + 95374 | 0 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
    HEAP32[($1_1 + 95552 | 0) >> 2] = -1;
    i64toi32_i32$1 = $1_1 + 95544 | 0;
    i64toi32_i32$0 = -1;
    HEAP32[i64toi32_i32$1 >> 2] = -1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = ($2_1 | 0) == ($3_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if (!$1_1) {
     continue label$5
    }
    break label$5;
   };
  }
  label$6 : {
   if ((HEAP32[(0 + 32096 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$6
   }
   $1_1 = HEAP32[(0 + 32096 | 0) >> 2] | 0;
   $3_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
   $4_1 = $0_1 + 143 | 0;
   $2_1 = 1;
   label$7 : while (1) {
    $1_1 = Math_imul($2_1, 200);
    HEAP8[($1_1 + 83360 | 0) >> 0] = 0;
    i64toi32_i32$1 = $1_1 + 83512 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $63_1 = $1_1 + 83361 | 0;
    $64_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$63_1 >> 0] = $64_1;
    HEAP8[($63_1 + 1 | 0) >> 0] = $64_1 >>> 8 | 0;
    HEAP8[($1_1 + 83363 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
    HEAP16[($1_1 + 83372 | 0) >> 1] = 0;
    HEAP32[($1_1 + 83364 | 0) >> 2] = 0;
    $27_1 = $1_1 + 83367 | 0;
    $28_1 = 0;
    HEAP8[$27_1 >> 0] = $28_1;
    HEAP8[($27_1 + 1 | 0) >> 0] = $28_1 >>> 8 | 0;
    HEAP8[($27_1 + 2 | 0) >> 0] = $28_1 >>> 16 | 0;
    HEAP8[($27_1 + 3 | 0) >> 0] = $28_1 >>> 24 | 0;
    $4($1_1 + 83374 | 0 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
    HEAP32[($1_1 + 83552 | 0) >> 2] = -1;
    i64toi32_i32$1 = $1_1 + 83544 | 0;
    i64toi32_i32$0 = -1;
    HEAP32[i64toi32_i32$1 >> 2] = -1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = ($2_1 | 0) == ($3_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if (!$1_1) {
     continue label$7
    }
    break label$7;
   };
  }
  label$8 : {
   if ((HEAP32[(0 + 32088 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$8
   }
   $1_1 = HEAP32[(0 + 32088 | 0) >> 2] | 0;
   $3_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
   $4_1 = $0_1 + 143 | 0;
   $2_1 = 1;
   label$9 : while (1) {
    $1_1 = Math_imul($2_1, 200);
    HEAP8[($1_1 + 91360 | 0) >> 0] = 0;
    i64toi32_i32$1 = $1_1 + 91512 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $65_1 = $1_1 + 91361 | 0;
    $66_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$65_1 >> 0] = $66_1;
    HEAP8[($65_1 + 1 | 0) >> 0] = $66_1 >>> 8 | 0;
    HEAP8[($1_1 + 91363 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
    HEAP16[($1_1 + 91372 | 0) >> 1] = 0;
    HEAP32[($1_1 + 91364 | 0) >> 2] = 0;
    $29_1 = $1_1 + 91367 | 0;
    $30_1 = 0;
    HEAP8[$29_1 >> 0] = $30_1;
    HEAP8[($29_1 + 1 | 0) >> 0] = $30_1 >>> 8 | 0;
    HEAP8[($29_1 + 2 | 0) >> 0] = $30_1 >>> 16 | 0;
    HEAP8[($29_1 + 3 | 0) >> 0] = $30_1 >>> 24 | 0;
    $4($1_1 + 91374 | 0 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
    HEAP32[($1_1 + 91552 | 0) >> 2] = -1;
    i64toi32_i32$1 = $1_1 + 91544 | 0;
    i64toi32_i32$0 = -1;
    HEAP32[i64toi32_i32$1 >> 2] = -1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = ($2_1 | 0) != ($3_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if ($1_1) {
     continue label$9
    }
    break label$9;
   };
  }
  $67_1 = 0;
  $68_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($67_1 + 99529 | 0) >> 0] = $68_1;
  HEAP8[($67_1 + 99530 | 0) >> 0] = $68_1 >>> 8 | 0;
  $1_1 = $0_1 + 143 | 0;
  HEAP8[(0 + 99531 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[(0 + 99528 | 0) >> 0] = 0;
  HEAP16[(0 + 99540 | 0) >> 1] = 0;
  HEAP32[(0 + 99532 | 0) >> 2] = 0;
  $31_1 = 0;
  $32_1 = 0;
  HEAP8[($31_1 + 99535 | 0) >> 0] = $32_1;
  HEAP8[($31_1 + 99536 | 0) >> 0] = $32_1 >>> 8 | 0;
  HEAP8[($31_1 + 99537 | 0) >> 0] = $32_1 >>> 16 | 0;
  HEAP8[($31_1 + 99538 | 0) >> 0] = $32_1 >>> 24 | 0;
  $4(99542 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  HEAP32[(0 + 99688 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 99680 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 99684 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 99672 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 99676 | 0) >> 2] = i64toi32_i32$0;
  $69_1 = 0;
  $70_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($69_1 + 99865 | 0) >> 0] = $70_1;
  HEAP8[($69_1 + 99866 | 0) >> 0] = $70_1 >>> 8 | 0;
  HEAP8[(0 + 99867 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[(0 + 99864 | 0) >> 0] = 0;
  HEAP16[(0 + 99876 | 0) >> 1] = 0;
  HEAP32[(0 + 99868 | 0) >> 2] = 0;
  $33_1 = 0;
  $34_1 = 0;
  HEAP8[($33_1 + 99871 | 0) >> 0] = $34_1;
  HEAP8[($33_1 + 99872 | 0) >> 0] = $34_1 >>> 8 | 0;
  HEAP8[($33_1 + 99873 | 0) >> 0] = $34_1 >>> 16 | 0;
  HEAP8[($33_1 + 99874 | 0) >> 0] = $34_1 >>> 24 | 0;
  $4(99878 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  HEAP32[(0 + 100024 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 100016 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 100020 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 100008 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 100012 | 0) >> 2] = i64toi32_i32$0;
  $71_1 = 0;
  $72_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($71_1 + 81401 | 0) >> 0] = $72_1;
  HEAP8[($71_1 + 81402 | 0) >> 0] = $72_1 >>> 8 | 0;
  HEAP8[(0 + 81403 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[(0 + 81400 | 0) >> 0] = 0;
  HEAP16[(0 + 81412 | 0) >> 1] = 0;
  HEAP32[(0 + 81404 | 0) >> 2] = 0;
  $35_1 = 0;
  $36_1 = 0;
  HEAP8[($35_1 + 81407 | 0) >> 0] = $36_1;
  HEAP8[($35_1 + 81408 | 0) >> 0] = $36_1 >>> 8 | 0;
  HEAP8[($35_1 + 81409 | 0) >> 0] = $36_1 >>> 16 | 0;
  HEAP8[($35_1 + 81410 | 0) >> 0] = $36_1 >>> 24 | 0;
  $4(81414 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  HEAP32[(0 + 81568 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 81560 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 81564 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 81544 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 81548 | 0) >> 2] = i64toi32_i32$0;
  $73_1 = 0;
  $74_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($73_1 + 100201 | 0) >> 0] = $74_1;
  HEAP8[($73_1 + 100202 | 0) >> 0] = $74_1 >>> 8 | 0;
  HEAP8[(0 + 100203 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[(0 + 100200 | 0) >> 0] = 0;
  HEAP16[(0 + 100212 | 0) >> 1] = 0;
  HEAP32[(0 + 100204 | 0) >> 2] = 0;
  $37_1 = 0;
  $38_1 = 0;
  HEAP8[($37_1 + 100207 | 0) >> 0] = $38_1;
  HEAP8[($37_1 + 100208 | 0) >> 0] = $38_1 >>> 8 | 0;
  HEAP8[($37_1 + 100209 | 0) >> 0] = $38_1 >>> 16 | 0;
  HEAP8[($37_1 + 100210 | 0) >> 0] = $38_1 >>> 24 | 0;
  $4(100214 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  HEAP32[(0 + 100360 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 100352 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 100356 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 100344 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 100348 | 0) >> 2] = i64toi32_i32$0;
  $75_1 = 0;
  $76_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($75_1 + 100873 | 0) >> 0] = $76_1;
  HEAP8[($75_1 + 100874 | 0) >> 0] = $76_1 >>> 8 | 0;
  HEAP8[(0 + 100875 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[(0 + 100872 | 0) >> 0] = 0;
  HEAP16[(0 + 100884 | 0) >> 1] = 0;
  HEAP32[(0 + 100876 | 0) >> 2] = 0;
  $39_1 = 0;
  $40_1 = 0;
  HEAP8[($39_1 + 100879 | 0) >> 0] = $40_1;
  HEAP8[($39_1 + 100880 | 0) >> 0] = $40_1 >>> 8 | 0;
  HEAP8[($39_1 + 100881 | 0) >> 0] = $40_1 >>> 16 | 0;
  HEAP8[($39_1 + 100882 | 0) >> 0] = $40_1 >>> 24 | 0;
  $4(100886 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  HEAP32[(0 + 101032 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 101024 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 101028 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 101016 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 101020 | 0) >> 2] = i64toi32_i32$0;
  $77_1 = 0;
  $78_1 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 142 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[($77_1 + 100537 | 0) >> 0] = $78_1;
  HEAP8[($77_1 + 100538 | 0) >> 0] = $78_1 >>> 8 | 0;
  HEAP8[(0 + 100539 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[(0 + 100536 | 0) >> 0] = 0;
  HEAP16[(0 + 100548 | 0) >> 1] = 0;
  HEAP32[(0 + 100540 | 0) >> 2] = 0;
  $41_1 = 0;
  $42_1 = 0;
  HEAP8[($41_1 + 100543 | 0) >> 0] = $42_1;
  HEAP8[($41_1 + 100544 | 0) >> 0] = $42_1 >>> 8 | 0;
  HEAP8[($41_1 + 100545 | 0) >> 0] = $42_1 >>> 16 | 0;
  HEAP8[($41_1 + 100546 | 0) >> 0] = $42_1 >>> 24 | 0;
  $4(100550 | 0, $0_1 + 10 | 0 | 0, 130 | 0) | 0;
  HEAP32[(0 + 100696 | 0) >> 2] = -1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 100688 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 100692 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 100680 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 100684 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $0_1 + 144 | 0;
 }
 
 function $351() {
  var $0_1 = 0;
  $0_1 = 0;
  label$1 : {
   if ((HEAP32[(0 + 77996 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $188((HEAP32[(0 + 77992 | 0) >> 2] | 0) + Math_imul($0_1, 4328) | 0 | 0);
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < (HEAP32[(0 + 77996 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $108(78008 | 0);
  HEAP32[(0 + 34080 | 0) >> 2] = 78008;
  $209(77992 | 0);
  $211(77992 | 0);
 }
 
 function $352() {
  var $4_1 = 0, $5_1 = 0, $0_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0_1 = global$0 - 80 | 0;
  global$0 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 78360 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 78364 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 78368 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 78372 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 78352 | 0) >> 2] = 1;
  HEAP32[(0 + 78356 | 0) >> 2] = 0;
  HEAP32[(0 + 78376 | 0) >> 2] = 0;
  label$1 : {
   if (HEAP32[(0 + 77764 | 0) >> 2] | 0 | (HEAP32[(0 + 77768 | 0) >> 2] | 0) | 0) {
    break label$1
   }
   HEAP32[(0 + 77788 | 0) >> 2] = 1;
  }
  $280();
  label$2 : {
   if (HEAP32[(0 + 77984 | 0) >> 2] | 0) {
    break label$2
   }
   $299();
  }
  label$3 : {
   if ((HEAP32[(0 + 77984 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $299();
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 77808 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 77812 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$0 + 79776 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 79780 | 0) >> 2] = i64toi32_i32$1;
  label$4 : {
   if (HEAP32[(0 + 77804 | 0) >> 2] | 0) {
    break label$4
   }
   $1_1 = HEAP32[(0 + 1576 | 0) >> 2] | 0;
   $2_1 = HEAP32[(0 + 1032 | 0) >> 2] | 0;
   $3_1 = 0;
   label$5 : while (1) {
    label$6 : {
     if (((HEAP32[(0 + 77984 | 0) >> 2] | 0) + -1 | 0) >>> 0 > 2 >>> 0) {
      break label$6
     }
     $4_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
     $5_1 = ($4_1 >>> 0) % (2e3 >>> 0) | 0;
     label$7 : {
      if (!$4_1) {
       break label$7
      }
      if ($5_1) {
       break label$7
      }
      $89(46 | 0) | 0;
      $37($2_1 | 0) | 0;
     }
     $4_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
     $5_1 = ($4_1 >>> 0) % (1e4 >>> 0) | 0;
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      if ($5_1) {
       break label$8
      }
      HEAP32[($0_1 + 64 | 0) >> 2] = ($4_1 >>> 0) / (1e3 >>> 0) | 0;
      $86(31008 | 0, $0_1 + 64 | 0 | 0) | 0;
      $37($2_1 | 0) | 0;
     }
     $4_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
     $5_1 = ($4_1 >>> 0) % (5e4 >>> 0) | 0;
     if (!$4_1) {
      break label$6
     }
     if ($5_1) {
      break label$6
     }
     $89(10 | 0) | 0;
    }
    (wasm2js_i32$0 = 0, wasm2js_i32$1 = $344() | 0), HEAP32[(wasm2js_i32$0 + 77804 | 0) >> 2] = wasm2js_i32$1;
    $343();
    $342();
    $345();
    $346();
    label$9 : {
     $4_1 = HEAP32[(0 + 32096 | 0) >> 2] | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$9
     }
     label$10 : while (1) {
      $330(($4_1 << 16 | 0) >> 16 | 0 | 0);
      $5_1 = ($4_1 | 0) > (1 | 0);
      $4_1 = $4_1 + -1 | 0;
      if ($5_1) {
       continue label$10
      }
      break label$10;
     };
    }
    label$11 : {
     $4_1 = HEAP32[(0 + 32084 | 0) >> 2] | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$11
     }
     label$12 : while (1) {
      $331(($4_1 << 16 | 0) >> 16 | 0 | 0);
      $5_1 = ($4_1 | 0) > (1 | 0);
      $4_1 = $4_1 + -1 | 0;
      if ($5_1) {
       continue label$12
      }
      break label$12;
     };
    }
    label$13 : {
     $4_1 = HEAP32[(0 + 32092 | 0) >> 2] | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$13
     }
     label$14 : while (1) {
      $333(($4_1 << 16 | 0) >> 16 | 0 | 0);
      $5_1 = ($4_1 | 0) > (1 | 0);
      $4_1 = $4_1 + -1 | 0;
      if ($5_1) {
       continue label$14
      }
      break label$14;
     };
    }
    label$15 : {
     $4_1 = HEAP32[(0 + 32088 | 0) >> 2] | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$15
     }
     label$16 : while (1) {
      $332(($4_1 << 16 | 0) >> 16 | 0 | 0);
      $5_1 = ($4_1 | 0) > (1 | 0);
      $4_1 = $4_1 + -1 | 0;
      if ($5_1) {
       continue label$16
      }
      break label$16;
     };
    }
    $341() | 0;
    $340();
    $4_1 = (HEAP32[(0 + 78356 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 78356 | 0) >> 2] = $4_1;
    HEAP32[(0 + 78360 | 0) >> 2] = (HEAP32[(0 + 78360 | 0) >> 2] | 0) + 1 | 0;
    label$17 : {
     if ($4_1 >>> 0 < 1e8 >>> 0) {
      break label$17
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = 1e8;
     $64($1_1 | 0, 31013 | 0, $0_1 + 48 | 0 | 0) | 0;
     HEAP32[(0 + 77804 | 0) >> 2] = 1;
    }
    label$18 : {
     if (HEAP32[(0 + 77984 | 0) >> 2] | 0 | $3_1 | 0) {
      break label$18
     }
     if ((HEAP32[(0 + 78356 | 0) >> 2] | 0) >>> 0 < 1e3 >>> 0) {
      break label$18
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = 1e3;
     $64($1_1 | 0, 31078 | 0, $0_1 + 32 | 0 | 0) | 0;
     $3_1 = 1;
    }
    label$19 : {
     if (!$3_1) {
      break label$19
     }
     $4_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
     $5_1 = ($4_1 >>> 0) % (2e3 >>> 0) | 0;
     label$20 : {
      if (!$4_1) {
       break label$20
      }
      if ($5_1) {
       break label$20
      }
      $89(46 | 0) | 0;
      $37($2_1 | 0) | 0;
     }
     $4_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
     $5_1 = ($4_1 >>> 0) % (1e4 >>> 0) | 0;
     label$21 : {
      if (!$4_1) {
       break label$21
      }
      if ($5_1) {
       break label$21
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = ($4_1 >>> 0) / (1e3 >>> 0) | 0;
      $86(31008 | 0, $0_1 + 16 | 0 | 0) | 0;
      $37($2_1 | 0) | 0;
     }
     $4_1 = HEAP32[(0 + 78356 | 0) >> 2] | 0;
     $5_1 = ($4_1 >>> 0) % (5e4 >>> 0) | 0;
     if (!$4_1) {
      break label$19
     }
     if ($5_1) {
      break label$19
     }
     $89(10 | 0) | 0;
    }
    label$22 : {
     if (HEAP32[(0 + 77984 | 0) >> 2] | 0 | $3_1 | 0) {
      break label$22
     }
     $284();
     $288();
    }
    $347();
    if (!(HEAP32[(0 + 77804 | 0) >> 2] | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
  label$23 : {
   if ((HEAP32[(0 + 77984 | 0) >> 2] | 0 | 0) != (2 | 0)) {
    break label$23
   }
   $217();
  }
  label$24 : {
   if ((HEAP32[(0 + 77984 | 0) >> 2] | 0 | 0) != (3 | 0)) {
    break label$24
   }
   HEAP32[$0_1 >> 2] = 77824;
   $86(31155 | 0, $0_1 | 0) | 0;
   $216();
   $217();
   $218();
   $219();
  }
  label$25 : {
   if (HEAP32[(0 + 77984 | 0) >> 2] | 0) {
    break label$25
   }
   $217();
   $301();
  }
  label$26 : {
   if ((HEAP32[(0 + 77984 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$26
   }
   $217();
   $301();
  }
  global$0 = $0_1 + 80 | 0;
 }
 
 function $353() {
  return global$0 | 0;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $355($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $356($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $357($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $356($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$12($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $358($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$13($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $20_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$0 = $21_1;
  var$0$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$2$hi;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
  i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, $19, $20, $21, $23, $40, $41, $60, $94, $159]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "libmips_main": $348, 
  "__errno_location": $1, 
  "fflush": $37, 
  "stackSave": $353, 
  "stackRestore": $354, 
  "stackAlloc": $355, 
  "emscripten_stack_init": $71, 
  "emscripten_stack_get_free": $72, 
  "emscripten_stack_get_end": $73, 
  "malloc": $5, 
  "free": $6, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "dynCall_jiji": $357
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536
      ,
      'maximum': 2147483648 / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

__ATINIT__.push({ func: function() { ___wasm_call_ctors() } });

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile = '<<< WASM_BINARY_FILE >>>';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }
    
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (_emscripten_stack_get_free() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 16384);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        assert(typeof parent === 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = varargs ? SYSCALLS.get() : 0;
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_stat64(path, buf) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _abort() {
      abort();
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit was set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_fdstat_get(fd, pbuf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      // All character devices are terminals (other things a Linux system would
      // assume is a character device, like the mouse, we have special APIs for).
      var type = stream.tty ? 2 :
                 FS.isDir(stream.mode) ? 3 :
                 FS.isLink(stream.mode) ? 7 :
                 4;
      HEAP8[((pbuf)>>0)] = type;
      // TODO HEAP16[(((pbuf)+(2))>>1)] = ?;
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(8))>>2)] = tempI64[0],HEAP32[(((pbuf)+(12))>>2)] = tempI64[1]);
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(16))>>2)] = tempI64[0],HEAP32[(((pbuf)+(20))>>2)] = tempI64[1]);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "__sys_stat64": ___sys_stat64,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_fdstat_get": _fd_fdstat_get,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _libmips_main = Module["_libmips_main"] = createExportWrapper("libmips_main");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

noExitRuntime = true;

run();





  Module['preRun'] = () =>
  {
    function stdin() {
      let code = null;
      return code;
    }

    let log = document.getElementById('log');
    log.innerHTML = '';

    function stdout(code) {
      log.innerHTML += String.fromCharCode(code);
    }

    function stderr(code) {
      log.innerHTML += String.fromCharCode(code);
    }

    FS.init(stdin, stdout, stderr);
  }

  Module['onRuntimeInitialized'] = () =>
  {
    let ensamblador_s = document.getElementById('ensamblador').value;
    let ensamblador_s_ptr = _malloc(lengthBytesUTF8(ensamblador_s)+1);

    stringToUTF8(ensamblador_s, ensamblador_s_ptr, lengthBytesUTF8(ensamblador_s)+1);

    function arg(arg_name)
    {
      let element = document.getElementById(arg_name);

      if (element.type == 'checkbox')
      {
        return element.checked;
      }
      return element.value;
    }

    let htm_ptr = ccall('libmips_main',
      // libmips_main returns a pointer to a char* string
      'number',
      // Argument types
      [
        //char* ensamblador_s,
        'number',
        //int config_en_s,
        'number',
        //int solucion_riesgos_control_p, int latencia_salto_p,
        'number', 'number',
        //int solucion_riesgos_datos_p,
        'number',
        //int FP_ADD_LAT_p, FP_CMP_LAT_p, FP_LS_LAT_p, FP_MUL_LAT_p,	
        'number', 'number', 'number', 'number'
      ],
      // Arguments
      [
        ensamblador_s_ptr,
        arg('config_en_s'),
        arg('solucion_riesgos_control_p'), arg('latencia_salto_p'),
        arg('solucion_riesgos_datos_p'),
        arg('FP_ADD_LAT_p'), arg('FP_CMP_LAT_p'), arg('FP_LS_LAT_p'), arg('FP_MUL_LAT_p')
      ]
    );
    _free(ensamblador_s_ptr);

    let resultado = window.open();

    resultado.document.open();
    resultado.document.write(UTF8ToString(htm_ptr));
    _free(htm_ptr);
    resultado.document.close();

  } /* onRuntimeInitialized */
} /* ejecutar_ensamblador */

function leer_fichero_ensamblador(fichero_ensamblador)
{
  let reader = new FileReader();

  reader.addEventListener("load", () => { document.getElementById('ensamblador').value = reader.result; }, false);
  reader.readAsText(fichero_ensamblador.files[0]);
}

</script>
</head>
<body>

<table>
  <tr>
    <th style="text-align:left;">
      Configuración
    </th>
    <th style="text-align:left;">
      <button id="ejecutar" onClick="ejecutar_ensamblador()">Ejecutar</button>
      <input type="file" id="fichero_ensamblador" onChange="leer_fichero_ensamblador(this)" />
    </th>
    <th style="text-align:left;">
      Salida
    </th>
  </tr>
  <tr>
    <td style="vertical-align:top; white-space:nowrap;">
      <hr/>
      Riesgos de datos:<br/>
      <select id="solucion_riesgos_datos_p">
        <option value="1">Stalls</option>
        <option value="2">Cortocircuitos</option>
        <option value="0">No solucionados</option>
      </select>
      <hr/>
      Riesgos de control:<br/>
      <select id="solucion_riesgos_control_p">
        <option value="0">Stalls</option>
        <option value="1">Predict-Not-Taken</option>
        <option value="2">Delay Slot</option>
      </select>
      <br/>
      Latencia de salto:<br/> 
      <select id="latencia_salto_p">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3" selected="selected">3</option>
      </select>
      <hr/>
      Latencia operadores de coma flotante:<br/>
      LS <input type="text" id="FP_LS_LAT_p" value="2" size="1" />
      ADD <input type="text" id="FP_ADD_LAT_p" value="4" size="1" />
      CMP <input type="text" id="FP_CMP_LAT_p" value="4" size="1" />
      MUL <input type="text" id="FP_MUL_LAT_p" value="7" size="1" />
      <hr/>
      Configuraci&oacute;n en el c&oacute;digo ensamblador <input type="checkbox" id="config_en_s" /><br/>
      (invalida toda la configuraci&oacute;n anterior)
      <hr/>
    </td>
    <td>
      <textarea id="ensamblador" rows="40" cols="80">
    .data
    
    ; Vector x
x:  .dword 0,1,2,3,4,5,6,7,8,9
    .dword 10,11,12,13,14,15
	
    ; Vector y
y:  .dword 100,100,100,100,100,100,100,100,100,100
    .dword 100,100,100,100,100,100

    ; Vector z
    ; 16 elementos son 16*8=128 bytes
z:  .space 128

    ; Escalar a
a:  .dword -10

    ; Codigo
    .text

start:
    dadd r1,$gp,x
    dadd r4,r1,#128 ; 16*8
    dadd r2,$gp,y
    dadd r3,$gp,z
    ld r10,a($gp)

loop:
    ld r12,0(r1)
    dadd r12,r10,r12
    ld r14,0(r2)
    dadd r14,r12,r14
    sd r14,0(r3)
    dadd r1,r1,#8
    dadd r2,r2,#8
    dadd r3,r3,#8
    seq r5,r4,r1
    beqz r5,loop

    trap #0         ; Fin de programa      
      </textarea>    
    </td>
    <td>
      <textarea id="log" rows="40" cols="80">
      </textarea>
    </td>
  </tr>
</table>

</body>
</html>
